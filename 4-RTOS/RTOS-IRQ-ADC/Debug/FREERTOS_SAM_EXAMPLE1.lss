
FREERTOS_SAM_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006ec8  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00406ec8  00406ec8  00016ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  00406ed0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000310  204009c0  00407890  000209c0  2**2
                  ALLOC
  4 .stack        00002000  20400cd0  00407ba0  000209c0  2**0
                  ALLOC
  5 .heap         00000200  20402cd0  00409ba0  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   00020ee5  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004704  00000000  00000000  0004192c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000afb9  00000000  00000000  00046030  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ea8  00000000  00000000  00050fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002060  00000000  00000000  00051e91  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000220c1  00000000  00000000  00053ef1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000120a9  00000000  00000000  00075fb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00094d40  00000000  00000000  0008805b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000036a8  00000000  00000000  0011cd9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d0 2c 40 20 49 0a 40 00 45 0a 40 00 45 0a 40 00     .,@ I.@.E.@.E.@.
  400010:	45 0a 40 00 45 0a 40 00 45 0a 40 00 00 00 00 00     E.@.E.@.E.@.....
	...
  40002c:	05 0e 40 00 45 0a 40 00 00 00 00 00 a1 0e 40 00     ..@.E.@.......@.
  40003c:	09 0f 40 00 45 0a 40 00 45 0a 40 00 45 0a 40 00     ..@.E.@.E.@.E.@.
  40004c:	45 0a 40 00 45 0a 40 00 45 0a 40 00 45 0a 40 00     E.@.E.@.E.@.E.@.
  40005c:	45 0a 40 00 45 0a 40 00 00 00 00 00 7d 07 40 00     E.@.E.@.....}.@.
  40006c:	8d 07 40 00 9d 07 40 00 45 0a 40 00 45 0a 40 00     ..@...@.E.@.E.@.
  40007c:	45 0a 40 00 ad 07 40 00 bd 07 40 00 45 0a 40 00     E.@...@...@.E.@.
  40008c:	45 0a 40 00 45 0a 40 00 45 0a 40 00 45 0a 40 00     E.@.E.@.E.@.E.@.
  40009c:	45 0a 40 00 45 0a 40 00 45 0a 40 00 45 0a 40 00     E.@.E.@.E.@.E.@.
  4000ac:	45 0a 40 00 45 0a 40 00 a5 06 40 00 45 0a 40 00     E.@.E.@...@.E.@.
  4000bc:	45 0a 40 00 45 0a 40 00 45 0a 40 00 45 0a 40 00     E.@.E.@.E.@.E.@.
  4000cc:	45 0a 40 00 00 00 00 00 45 0a 40 00 00 00 00 00     E.@.....E.@.....
  4000dc:	45 0a 40 00 b5 06 40 00 45 0a 40 00 45 0a 40 00     E.@...@.E.@.E.@.
  4000ec:	45 0a 40 00 45 0a 40 00 45 0a 40 00 45 0a 40 00     E.@.E.@.E.@.E.@.
  4000fc:	45 0a 40 00 45 0a 40 00 45 0a 40 00 45 0a 40 00     E.@.E.@.E.@.E.@.
  40010c:	45 0a 40 00 45 0a 40 00 00 00 00 00 00 00 00 00     E.@.E.@.........
  40011c:	00 00 00 00 45 0a 40 00 45 0a 40 00 45 0a 40 00     ....E.@.E.@.E.@.
  40012c:	45 0a 40 00 45 0a 40 00 00 00 00 00 45 0a 40 00     E.@.E.@.....E.@.
  40013c:	45 0a 40 00                                         E.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009c0 	.word	0x204009c0
  40015c:	00000000 	.word	0x00000000
  400160:	00406ed0 	.word	0x00406ed0

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00406ed0 	.word	0x00406ed0
  4001a0:	204009c4 	.word	0x204009c4
  4001a4:	00406ed0 	.word	0x00406ed0
  4001a8:	00000000 	.word	0x00000000

004001ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001ac:	b570      	push	{r4, r5, r6, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001ae:	4810      	ldr	r0, [pc, #64]	; (4001f0 <sysclk_init+0x44>)
  4001b0:	4d10      	ldr	r5, [pc, #64]	; (4001f4 <sysclk_init+0x48>)
  4001b2:	47a8      	blx	r5
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001b4:	213e      	movs	r1, #62	; 0x3e
  4001b6:	2000      	movs	r0, #0
  4001b8:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x4c>)
  4001ba:	4c10      	ldr	r4, [pc, #64]	; (4001fc <sysclk_init+0x50>)
  4001bc:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001c0:	2800      	cmp	r0, #0
  4001c2:	d0fc      	beq.n	4001be <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001c4:	4b0e      	ldr	r3, [pc, #56]	; (400200 <sysclk_init+0x54>)
  4001c6:	4798      	blx	r3
  4001c8:	4c0e      	ldr	r4, [pc, #56]	; (400204 <sysclk_init+0x58>)
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001ca:	4b0f      	ldr	r3, [pc, #60]	; (400208 <sysclk_init+0x5c>)
  4001cc:	4a0f      	ldr	r2, [pc, #60]	; (40020c <sysclk_init+0x60>)
  4001ce:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001d2:	2800      	cmp	r0, #0
  4001d4:	d0fc      	beq.n	4001d0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001d6:	2002      	movs	r0, #2
  4001d8:	4b0d      	ldr	r3, [pc, #52]	; (400210 <sysclk_init+0x64>)
  4001da:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001dc:	4b0d      	ldr	r3, [pc, #52]	; (400214 <sysclk_init+0x68>)
  4001de:	2000      	movs	r0, #0
  4001e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <sysclk_init+0x6c>)
  4001e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001e6:	462b      	mov	r3, r5
  4001e8:	4801      	ldr	r0, [pc, #4]	; (4001f0 <sysclk_init+0x44>)

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4001ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	system_init_flash(sysclk_get_cpu_hz());
  4001ee:	4718      	bx	r3
  4001f0:	11e1a300 	.word	0x11e1a300
  4001f4:	00400bed 	.word	0x00400bed
  4001f8:	00400851 	.word	0x00400851
  4001fc:	004008a5 	.word	0x004008a5
  400200:	004008b5 	.word	0x004008b5
  400204:	004008c5 	.word	0x004008c5
  400208:	400e0600 	.word	0x400e0600
  40020c:	20183f01 	.word	0x20183f01
  400210:	004007cd 	.word	0x004007cd
  400214:	004007fd 	.word	0x004007fd
  400218:	00400b09 	.word	0x00400b09

0040021c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40021c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400220:	b990      	cbnz	r0, 400248 <_read+0x2c>
		return -1;
	}

	for (; len > 0; --len) {
  400222:	2a00      	cmp	r2, #0
  400224:	4690      	mov	r8, r2
  400226:	dd0d      	ble.n	400244 <_read+0x28>
  400228:	460c      	mov	r4, r1
  40022a:	188f      	adds	r7, r1, r2
  40022c:	4e08      	ldr	r6, [pc, #32]	; (400250 <_read+0x34>)
  40022e:	4d09      	ldr	r5, [pc, #36]	; (400254 <_read+0x38>)
		ptr_get(stdio_base, ptr);
  400230:	4621      	mov	r1, r4
		ptr++;
  400232:	3401      	adds	r4, #1
		ptr_get(stdio_base, ptr);
  400234:	6830      	ldr	r0, [r6, #0]
  400236:	682b      	ldr	r3, [r5, #0]
  400238:	4798      	blx	r3
	for (; len > 0; --len) {
  40023a:	42bc      	cmp	r4, r7
  40023c:	d1f8      	bne.n	400230 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40023e:	4640      	mov	r0, r8
  400240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (; len > 0; --len) {
  400244:	4680      	mov	r8, r0
  400246:	e7fa      	b.n	40023e <_read+0x22>
		return -1;
  400248:	f04f 38ff 	mov.w	r8, #4294967295
  40024c:	e7f7      	b.n	40023e <_read+0x22>
  40024e:	bf00      	nop
  400250:	20400bd8 	.word	0x20400bd8
  400254:	20400bd0 	.word	0x20400bd0

00400258 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400258:	3801      	subs	r0, #1
  40025a:	2802      	cmp	r0, #2
  40025c:	d81e      	bhi.n	40029c <_write+0x44>
{
  40025e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400262:	4615      	mov	r5, r2
		return -1;
	}

	for (; len != 0; --len) {
  400264:	b1ba      	cbz	r2, 400296 <_write+0x3e>
  400266:	460e      	mov	r6, r1
  400268:	460c      	mov	r4, r1
  40026a:	f8df 803c 	ldr.w	r8, [pc, #60]	; 4002a8 <_write+0x50>
  40026e:	4f0d      	ldr	r7, [pc, #52]	; (4002a4 <_write+0x4c>)
  400270:	e001      	b.n	400276 <_write+0x1e>
  400272:	3d01      	subs	r5, #1
  400274:	d00d      	beq.n	400292 <_write+0x3a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400276:	f814 1b01 	ldrb.w	r1, [r4], #1
  40027a:	f8d8 0000 	ldr.w	r0, [r8]
  40027e:	683b      	ldr	r3, [r7, #0]
  400280:	4798      	blx	r3
  400282:	2800      	cmp	r0, #0
  400284:	eba4 0006 	sub.w	r0, r4, r6
  400288:	daf3      	bge.n	400272 <_write+0x1a>
		return -1;
  40028a:	f04f 30ff 	mov.w	r0, #4294967295
  40028e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (; len != 0; --len) {
  400296:	4610      	mov	r0, r2
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  400298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40029c:	f04f 30ff 	mov.w	r0, #4294967295
}
  4002a0:	4770      	bx	lr
  4002a2:	bf00      	nop
  4002a4:	20400bd4 	.word	0x20400bd4
  4002a8:	20400bd8 	.word	0x20400bd8

004002ac <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4002ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002b2:	4b5a      	ldr	r3, [pc, #360]	; (40041c <board_init+0x170>)
  4002b4:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4002b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002ba:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4002be:	4c58      	ldr	r4, [pc, #352]	; (400420 <board_init+0x174>)
  4002c0:	2300      	movs	r3, #0
  4002c2:	f8c4 3250 	str.w	r3, [r4, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4002c6:	6963      	ldr	r3, [r4, #20]
  4002c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  4002cc:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb");
  4002ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002d2:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4002d6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4002da:	f003 0607 	and.w	r6, r3, #7
    sets    = CCSIDR_SETS(ccsidr);
  4002de:	f3c3 3e4e 	ubfx	lr, r3, #13, #15
    ways    = CCSIDR_WAYS(ccsidr);
  4002e2:	f3c3 0cc9 	ubfx	ip, r3, #3, #10
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4002e6:	3604      	adds	r6, #4
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4002e8:	fabc f38c 	clz	r3, ip
    wshift  = __CLZ(ways) & 0x1f;
  4002ec:	f003 031f 	and.w	r3, r3, #31
  __ASM volatile ("dsb");
  4002f0:	f3bf 8f4f 	dsb	sy
  4002f4:	f04f 35ff 	mov.w	r5, #4294967295
  4002f8:	fa0e f006 	lsl.w	r0, lr, r6
  4002fc:	fa0c f703 	lsl.w	r7, ip, r3
  400300:	fa05 f606 	lsl.w	r6, r5, r6
  400304:	409d      	lsls	r5, r3
{
  400306:	463a      	mov	r2, r7

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  400308:	4663      	mov	r3, ip
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  40030a:	ea40 0102 	orr.w	r1, r0, r2
              SCB->DCISW = sw;
            } while(tmpways--);
  40030e:	3b01      	subs	r3, #1
  400310:	442a      	add	r2, r5
              SCB->DCISW = sw;
  400312:	f8c4 1260 	str.w	r1, [r4, #608]	; 0x260
            } while(tmpways--);
  400316:	1c59      	adds	r1, r3, #1
  400318:	d1f7      	bne.n	40030a <board_init+0x5e>
        } while(sets--);
  40031a:	f10e 3eff 	add.w	lr, lr, #4294967295
  40031e:	4430      	add	r0, r6
  400320:	f1be 3fff 	cmp.w	lr, #4294967295
  400324:	d1ef      	bne.n	400306 <board_init+0x5a>
  400326:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  40032a:	6963      	ldr	r3, [r4, #20]
  40032c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400330:	6163      	str	r3, [r4, #20]
  400332:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400336:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40033a:	4b3a      	ldr	r3, [pc, #232]	; (400424 <board_init+0x178>)
  40033c:	493a      	ldr	r1, [pc, #232]	; (400428 <board_init+0x17c>)
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40033e:	4a3b      	ldr	r2, [pc, #236]	; (40042c <board_init+0x180>)
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400340:	6059      	str	r1, [r3, #4]
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400342:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  400344:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400348:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  40034c:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  400350:	f023 0301 	bic.w	r3, r3, #1
  400354:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400358:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
  40035c:	f023 0301 	bic.w	r3, r3, #1
  400360:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  __ASM volatile ("dsb");
  400364:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400368:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40036c:	4c30      	ldr	r4, [pc, #192]	; (400430 <board_init+0x184>)
  40036e:	200a      	movs	r0, #10
  400370:	47a0      	blx	r4
  400372:	200b      	movs	r0, #11
  400374:	47a0      	blx	r4
  400376:	200c      	movs	r0, #12
  400378:	47a0      	blx	r4
  40037a:	2010      	movs	r0, #16
  40037c:	47a0      	blx	r4
  40037e:	2011      	movs	r0, #17
  400380:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400382:	f44f 7580 	mov.w	r5, #256	; 0x100
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400386:	4a2b      	ldr	r2, [pc, #172]	; (400434 <board_init+0x188>)
  400388:	f44f 6300 	mov.w	r3, #2048	; 0x800
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40038c:	492a      	ldr	r1, [pc, #168]	; (400438 <board_init+0x18c>)
		base->PIO_PUDR = mask;
  40038e:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400392:	4e2a      	ldr	r6, [pc, #168]	; (40043c <board_init+0x190>)
  400394:	2010      	movs	r0, #16
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400396:	610d      	str	r5, [r1, #16]
		base->PIO_PUDR = mask;
  400398:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40039c:	f8c1 52a0 	str.w	r5, [r1, #672]	; 0x2a0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4003a0:	f8c1 5230 	str.w	r5, [r1, #560]	; 0x230
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4003a4:	6153      	str	r3, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003a6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_PUER = mask;
  4003aa:	6653      	str	r3, [r2, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4003ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003b0:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFER = mask;
  4003b2:	6213      	str	r3, [r2, #32]
		base->PIO_IFSCER = mask;
  4003b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4003b8:	6f15      	ldr	r5, [r2, #112]	; 0x70
  4003ba:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
  4003be:	6715      	str	r5, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003c0:	6f55      	ldr	r5, [r2, #116]	; 0x74
  4003c2:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
  4003c6:	6755      	str	r5, [r2, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4003c8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4003cc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4003d0:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4003d4:	6614      	str	r4, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003d6:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003da:	6554      	str	r4, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003dc:	6254      	str	r4, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003de:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4003e2:	6f13      	ldr	r3, [r2, #112]	; 0x70
  4003e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  4003e8:	6713      	str	r3, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003ea:	6f53      	ldr	r3, [r2, #116]	; 0x74
  4003ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  4003f0:	6753      	str	r3, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003f2:	6054      	str	r4, [r2, #4]
  4003f4:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
  4003f8:	4303      	orrs	r3, r0
  4003fa:	f8c6 3114 	str.w	r3, [r6, #276]	; 0x114
		base->PIO_PUDR = mask;
  4003fe:	6608      	str	r0, [r1, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400400:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
		base->PIO_MDDR = mask;
  400404:	6548      	str	r0, [r1, #84]	; 0x54
		base->PIO_IFDR = mask;
  400406:	6248      	str	r0, [r1, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400408:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40040c:	6f0b      	ldr	r3, [r1, #112]	; 0x70
  40040e:	4303      	orrs	r3, r0
  400410:	670b      	str	r3, [r1, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400412:	6f4b      	ldr	r3, [r1, #116]	; 0x74
  400414:	4303      	orrs	r3, r0
  400416:	674b      	str	r3, [r1, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400418:	6048      	str	r0, [r1, #4]
  40041a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40041c:	400e1850 	.word	0x400e1850
  400420:	e000ed00 	.word	0xe000ed00
  400424:	400e0c00 	.word	0x400e0c00
  400428:	5a00080c 	.word	0x5a00080c
  40042c:	5a00070c 	.word	0x5a00070c
  400430:	004008d5 	.word	0x004008d5
  400434:	400e0e00 	.word	0x400e0e00
  400438:	400e1200 	.word	0x400e1200
  40043c:	40088000 	.word	0x40088000

00400440 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  400440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (afec == AFEC1) {
  400444:	4f17      	ldr	r7, [pc, #92]	; (4004a4 <afec_process_callback+0x64>)
{
  400446:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  400448:	6b02      	ldr	r2, [r0, #48]	; 0x30
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  40044a:	2400      	movs	r4, #0
	if (afec == AFEC1) {
  40044c:	1bc7      	subs	r7, r0, r7
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  40044e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  400450:	f8df 8054 	ldr.w	r8, [pc, #84]	; 4004a8 <afec_process_callback+0x68>
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  400454:	2601      	movs	r6, #1
	if (afec == AFEC1) {
  400456:	fab7 f787 	clz	r7, r7
	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  40045a:	4013      	ands	r3, r2
	if (afec == AFEC1) {
  40045c:	097f      	lsrs	r7, r7, #5
	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  40045e:	9301      	str	r3, [sp, #4]
  400460:	01bf      	lsls	r7, r7, #6
  400462:	eb08 0507 	add.w	r5, r8, r7
  400466:	e009      	b.n	40047c <afec_process_callback+0x3c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  400468:	9a01      	ldr	r2, [sp, #4]
  40046a:	4213      	tst	r3, r2
  40046c:	d002      	beq.n	400474 <afec_process_callback+0x34>
	if (afec_callback_pointer[inst_num][source]) {
  40046e:	682b      	ldr	r3, [r5, #0]
  400470:	b103      	cbz	r3, 400474 <afec_process_callback+0x34>
		afec_callback_pointer[inst_num][source]();
  400472:	4798      	blx	r3
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400474:	3401      	adds	r4, #1
  400476:	3504      	adds	r5, #4
  400478:	2c10      	cmp	r4, #16
  40047a:	d010      	beq.n	40049e <afec_process_callback+0x5e>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  40047c:	2c0b      	cmp	r4, #11
			if (status & (1 << cnt)) {
  40047e:	fa06 f304 	lsl.w	r3, r6, r4
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  400482:	d9f1      	bls.n	400468 <afec_process_callback+0x28>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  400484:	f104 030c 	add.w	r3, r4, #12
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  400488:	2c0f      	cmp	r4, #15
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  40048a:	fa06 f303 	lsl.w	r3, r6, r3
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  40048e:	d1eb      	bne.n	400468 <afec_process_callback+0x28>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400490:	9b01      	ldr	r3, [sp, #4]
  400492:	005b      	lsls	r3, r3, #1
  400494:	d503      	bpl.n	40049e <afec_process_callback+0x5e>
	if (afec_callback_pointer[inst_num][source]) {
  400496:	4447      	add	r7, r8
  400498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  40049a:	b103      	cbz	r3, 40049e <afec_process_callback+0x5e>
		afec_callback_pointer[inst_num][source]();
  40049c:	4798      	blx	r3
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  40049e:	b002      	add	sp, #8
  4004a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4004a4:	40064000 	.word	0x40064000
  4004a8:	20400bdc 	.word	0x20400bdc

004004ac <afec_ch_set_config>:
{
  4004ac:	b470      	push	{r4, r5, r6}
	reg &= ~(0x1u << channel);
  4004ae:	2301      	movs	r3, #1
	reg |= (config->diff) ? (0x1u << channel) : 0;
  4004b0:	7814      	ldrb	r4, [r2, #0]
	reg = afec->AFEC_DIFFR;
  4004b2:	6e06      	ldr	r6, [r0, #96]	; 0x60
	reg &= ~(0x03u << (2 * channel));
  4004b4:	2503      	movs	r5, #3
	reg &= ~(0x1u << channel);
  4004b6:	408b      	lsls	r3, r1
	reg |= (config->diff) ? (0x1u << channel) : 0;
  4004b8:	2c00      	cmp	r4, #0
	reg &= ~(0x03u << (2 * channel));
  4004ba:	ea4f 0441 	mov.w	r4, r1, lsl #1
	reg &= ~(0x1u << channel);
  4004be:	ea26 0103 	bic.w	r1, r6, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  4004c2:	bf08      	it	eq
  4004c4:	2300      	moveq	r3, #0
	reg &= ~(0x03u << (2 * channel));
  4004c6:	40a5      	lsls	r5, r4
	reg |= (config->diff) ? (0x1u << channel) : 0;
  4004c8:	430b      	orrs	r3, r1
	afec->AFEC_DIFFR = reg;
  4004ca:	6603      	str	r3, [r0, #96]	; 0x60
	reg |= (config->gain) << (2 * channel);
  4004cc:	7851      	ldrb	r1, [r2, #1]
	reg = afec->AFEC_CGR;
  4004ce:	6d43      	ldr	r3, [r0, #84]	; 0x54
	reg |= (config->gain) << (2 * channel);
  4004d0:	40a1      	lsls	r1, r4
	reg &= ~(0x03u << (2 * channel));
  4004d2:	ea23 0305 	bic.w	r3, r3, r5
	reg |= (config->gain) << (2 * channel);
  4004d6:	4319      	orrs	r1, r3
}
  4004d8:	bc70      	pop	{r4, r5, r6}
	afec->AFEC_CGR = reg;
  4004da:	6541      	str	r1, [r0, #84]	; 0x54
}
  4004dc:	4770      	bx	lr
  4004de:	bf00      	nop

004004e0 <afec_temp_sensor_set_config>:
	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  4004e0:	784b      	ldrb	r3, [r1, #1]
  4004e2:	780a      	ldrb	r2, [r1, #0]
  4004e4:	4313      	orrs	r3, r2
	afec->AFEC_TEMPMR = reg;
  4004e6:	6703      	str	r3, [r0, #112]	; 0x70
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  4004e8:	f8d1 3002 	ldr.w	r3, [r1, #2]
  4004ec:	6743      	str	r3, [r0, #116]	; 0x74
  4004ee:	4770      	bx	lr

004004f0 <afec_get_config_defaults>:
		cfg->transfer = 1;
  4004f0:	2301      	movs	r3, #1
	cfg->resolution = AFEC_12_BITS;
  4004f2:	2200      	movs	r2, #0
		cfg->tracktim = 2;
  4004f4:	2102      	movs	r1, #2
	cfg->resolution = AFEC_12_BITS;
  4004f6:	6002      	str	r2, [r0, #0]
		cfg->tracktim = 2;
  4004f8:	7401      	strb	r1, [r0, #16]
		cfg->useq = false;
  4004fa:	74c2      	strb	r2, [r0, #19]
		cfg->transfer = 1;
  4004fc:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  4004fe:	7483      	strb	r3, [r0, #18]
		cfg->tag = true;
  400500:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  400502:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  400504:	7583      	strb	r3, [r0, #22]
{
  400506:	b470      	push	{r4, r5, r6}
	cfg->mck = sysclk_get_cpu_hz();
  400508:	4e04      	ldr	r6, [pc, #16]	; (40051c <afec_get_config_defaults+0x2c>)
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  40050a:	f44f 2480 	mov.w	r4, #262144	; 0x40000
		cfg->afec_clock = 6000000UL;
  40050e:	4d04      	ldr	r5, [pc, #16]	; (400520 <afec_get_config_defaults+0x30>)
	cfg->mck = sysclk_get_cpu_hz();
  400510:	6046      	str	r6, [r0, #4]
		cfg->afec_clock = 6000000UL;
  400512:	6085      	str	r5, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400514:	60c4      	str	r4, [r0, #12]
}
  400516:	bc70      	pop	{r4, r5, r6}
  400518:	4770      	bx	lr
  40051a:	bf00      	nop
  40051c:	11e1a300 	.word	0x11e1a300
  400520:	005b8d80 	.word	0x005b8d80

00400524 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  400524:	2200      	movs	r2, #0
   	cfg->gain = AFEC_GAINVALUE_1;
  400526:	2301      	movs	r3, #1
	cfg->diff = false;
  400528:	7002      	strb	r2, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  40052a:	7043      	strb	r3, [r0, #1]
  40052c:	4770      	bx	lr
  40052e:	bf00      	nop

00400530 <afec_temp_sensor_get_config_defaults>:
{
  400530:	b410      	push	{r4}
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  400532:	2120      	movs	r1, #32
	cfg->rctc = false;
  400534:	2400      	movs	r4, #0
	cfg->low_threshold= 0xFF;
  400536:	22ff      	movs	r2, #255	; 0xff
	cfg->high_threshold= 0xFFF;
  400538:	f640 73ff 	movw	r3, #4095	; 0xfff
	cfg->rctc = false;
  40053c:	7004      	strb	r4, [r0, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  40053e:	7041      	strb	r1, [r0, #1]
	cfg->low_threshold= 0xFF;
  400540:	8042      	strh	r2, [r0, #2]
	cfg->high_threshold= 0xFFF;
  400542:	8083      	strh	r3, [r0, #4]
}
  400544:	f85d 4b04 	ldr.w	r4, [sp], #4
  400548:	4770      	bx	lr
  40054a:	bf00      	nop

0040054c <afec_init>:
	return afec->AFEC_ISR;
  40054c:	6b02      	ldr	r2, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  40054e:	f012 7280 	ands.w	r2, r2, #16777216	; 0x1000000
  400552:	d001      	beq.n	400558 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  400554:	2019      	movs	r0, #25
  400556:	4770      	bx	lr
	afec->AFEC_CR = AFEC_CR_SWRST;
  400558:	2301      	movs	r3, #1
{
  40055a:	b5f0      	push	{r4, r5, r6, r7, lr}
	afec->AFEC_CR = AFEC_CR_SWRST;
  40055c:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40055e:	1d0b      	adds	r3, r1, #4
			AFEC_MR_TRACKTIM(config->tracktim) |
  400560:	7c0e      	ldrb	r6, [r1, #16]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400562:	f891 e013 	ldrb.w	lr, [r1, #19]
			AFEC_MR_TRACKTIM(config->tracktim) |
  400566:	0636      	lsls	r6, r6, #24
	if(afec == AFEC0) {
  400568:	4c26      	ldr	r4, [pc, #152]	; (400604 <afec_init+0xb8>)
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40056a:	f1be 0f00 	cmp.w	lr, #0
			AFEC_MR_TRACKTIM(config->tracktim) |
  40056e:	f006 6670 	and.w	r6, r6, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400572:	bf18      	it	ne
  400574:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
  400578:	cba8      	ldmia	r3, {r3, r5, r7}
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  40057a:	fbb3 f3f5 	udiv	r3, r3, r5
  40057e:	3b01      	subs	r3, #1
			AFEC_MR_TRANSFER(config->transfer) |
  400580:	7c4d      	ldrb	r5, [r1, #17]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400582:	f447 0700 	orr.w	r7, r7, #8388608	; 0x800000
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  400586:	021b      	lsls	r3, r3, #8
			AFEC_MR_TRANSFER(config->transfer) |
  400588:	072d      	lsls	r5, r5, #28
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  40058a:	b29b      	uxth	r3, r3
			AFEC_MR_TRANSFER(config->transfer) |
  40058c:	f005 5540 	and.w	r5, r5, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400590:	433b      	orrs	r3, r7
  400592:	4333      	orrs	r3, r6
  400594:	432b      	orrs	r3, r5
  400596:	4313      	orrs	r3, r2
	afec->AFEC_MR = reg;
  400598:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  40059a:	7d0b      	ldrb	r3, [r1, #20]
			(config->stm ? AFEC_EMR_STM : 0);
  40059c:	7d4d      	ldrb	r5, [r1, #21]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  40059e:	2b00      	cmp	r3, #0
  4005a0:	680a      	ldr	r2, [r1, #0]
  4005a2:	bf14      	ite	ne
  4005a4:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  4005a8:	2300      	moveq	r3, #0
			(config->stm ? AFEC_EMR_STM : 0);
  4005aa:	2d00      	cmp	r5, #0
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4005ac:	ea43 0302 	orr.w	r3, r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  4005b0:	bf14      	ite	ne
  4005b2:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  4005b6:	2200      	moveq	r2, #0
	if(afec == AFEC0) {
  4005b8:	42a0      	cmp	r0, r4
			(config->resolution) |
  4005ba:	ea43 0302 	orr.w	r3, r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4005be:	6083      	str	r3, [r0, #8]
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  4005c0:	7d8b      	ldrb	r3, [r1, #22]
  4005c2:	ea4f 2303 	mov.w	r3, r3, lsl #8
  4005c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4005ca:	f043 030c 	orr.w	r3, r3, #12
  4005ce:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  4005d2:	d00d      	beq.n	4005f0 <afec_init+0xa4>
	if(afec == AFEC1) {
  4005d4:	4b0c      	ldr	r3, [pc, #48]	; (400608 <afec_init+0xbc>)
  4005d6:	4298      	cmp	r0, r3
  4005d8:	d001      	beq.n	4005de <afec_init+0x92>
	return STATUS_OK;
  4005da:	2000      	movs	r0, #0
  4005dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4005de:	4b0b      	ldr	r3, [pc, #44]	; (40060c <afec_init+0xc0>)
			afec_callback_pointer[1][i] = 0;
  4005e0:	2100      	movs	r1, #0
  4005e2:	f103 0240 	add.w	r2, r3, #64	; 0x40
  4005e6:	f843 1b04 	str.w	r1, [r3], #4
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4005ea:	4293      	cmp	r3, r2
  4005ec:	d1fb      	bne.n	4005e6 <afec_init+0x9a>
  4005ee:	e7f4      	b.n	4005da <afec_init+0x8e>
  4005f0:	4b07      	ldr	r3, [pc, #28]	; (400610 <afec_init+0xc4>)
			afec_callback_pointer[0][i] = 0;
  4005f2:	2100      	movs	r1, #0
  4005f4:	f103 0240 	add.w	r2, r3, #64	; 0x40
  4005f8:	f843 1f04 	str.w	r1, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4005fc:	429a      	cmp	r2, r3
  4005fe:	d1fb      	bne.n	4005f8 <afec_init+0xac>
  400600:	e7eb      	b.n	4005da <afec_init+0x8e>
  400602:	bf00      	nop
  400604:	4003c000 	.word	0x4003c000
  400608:	40064000 	.word	0x40064000
  40060c:	20400c1c 	.word	0x20400c1c
  400610:	20400bd8 	.word	0x20400bd8

00400614 <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  400614:	4b0b      	ldr	r3, [pc, #44]	; (400644 <afec_enable_interrupt+0x30>)
  400616:	4299      	cmp	r1, r3
  400618:	d007      	beq.n	40062a <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  40061a:	290b      	cmp	r1, #11
  40061c:	d907      	bls.n	40062e <afec_enable_interrupt+0x1a>
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  40061e:	290e      	cmp	r1, #14
  400620:	d90a      	bls.n	400638 <afec_enable_interrupt+0x24>
				+ AFEC_INTERRUPT_GAP2);
  400622:	310f      	adds	r1, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  400624:	2301      	movs	r3, #1
  400626:	fa03 f101 	lsl.w	r1, r3, r1
  40062a:	6241      	str	r1, [r0, #36]	; 0x24
  40062c:	4770      	bx	lr
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  40062e:	d1f9      	bne.n	400624 <afec_enable_interrupt+0x10>
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  400630:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400634:	6243      	str	r3, [r0, #36]	; 0x24
  400636:	4770      	bx	lr
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  400638:	310c      	adds	r1, #12
  40063a:	2301      	movs	r3, #1
  40063c:	fa03 f101 	lsl.w	r1, r3, r1
  400640:	6241      	str	r1, [r0, #36]	; 0x24
  400642:	4770      	bx	lr
  400644:	47000fff 	.word	0x47000fff

00400648 <afec_set_callback>:
{
  400648:	b4f0      	push	{r4, r5, r6, r7}
	if (afec == AFEC1) {
  40064a:	4c12      	ldr	r4, [pc, #72]	; (400694 <afec_set_callback+0x4c>)
  40064c:	42a0      	cmp	r0, r4
  40064e:	d00f      	beq.n	400670 <afec_set_callback+0x28>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400650:	015b      	lsls	r3, r3, #5
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400652:	4c11      	ldr	r4, [pc, #68]	; (400698 <afec_set_callback+0x50>)
  400654:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
	afec_callback_pointer[i][source] = callback;
  400658:	4e10      	ldr	r6, [pc, #64]	; (40069c <afec_set_callback+0x54>)
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40065a:	b2db      	uxtb	r3, r3
  40065c:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400660:	f8c4 5180 	str.w	r5, [r4, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400664:	f884 331d 	strb.w	r3, [r4, #797]	; 0x31d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400668:	6025      	str	r5, [r4, #0]
	afec_enable_interrupt(afec, source);
  40066a:	4b0d      	ldr	r3, [pc, #52]	; (4006a0 <afec_set_callback+0x58>)
}
  40066c:	bcf0      	pop	{r4, r5, r6, r7}
	afec_enable_interrupt(afec, source);
  40066e:	4718      	bx	r3
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400670:	015b      	lsls	r3, r3, #5
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400672:	4c09      	ldr	r4, [pc, #36]	; (400698 <afec_set_callback+0x50>)
  400674:	f44f 7680 	mov.w	r6, #256	; 0x100
	afec_callback_pointer[i][source] = callback;
  400678:	4f08      	ldr	r7, [pc, #32]	; (40069c <afec_set_callback+0x54>)
  40067a:	f101 0510 	add.w	r5, r1, #16
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40067e:	b2db      	uxtb	r3, r3
  400680:	f847 2025 	str.w	r2, [r7, r5, lsl #2]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400684:	f8c4 6184 	str.w	r6, [r4, #388]	; 0x184
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400688:	f884 3328 	strb.w	r3, [r4, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40068c:	6066      	str	r6, [r4, #4]
	afec_enable_interrupt(afec, source);
  40068e:	4b04      	ldr	r3, [pc, #16]	; (4006a0 <afec_set_callback+0x58>)
}
  400690:	bcf0      	pop	{r4, r5, r6, r7}
	afec_enable_interrupt(afec, source);
  400692:	4718      	bx	r3
  400694:	40064000 	.word	0x40064000
  400698:	e000e100 	.word	0xe000e100
  40069c:	20400bdc 	.word	0x20400bdc
  4006a0:	00400615 	.word	0x00400615

004006a4 <AFEC0_Handler>:
/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
	afec_process_callback(AFEC0);
  4006a4:	4801      	ldr	r0, [pc, #4]	; (4006ac <AFEC0_Handler+0x8>)
  4006a6:	4b02      	ldr	r3, [pc, #8]	; (4006b0 <AFEC0_Handler+0xc>)
  4006a8:	4718      	bx	r3
  4006aa:	bf00      	nop
  4006ac:	4003c000 	.word	0x4003c000
  4006b0:	00400441 	.word	0x00400441

004006b4 <AFEC1_Handler>:
/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
	afec_process_callback(AFEC1);
  4006b4:	4801      	ldr	r0, [pc, #4]	; (4006bc <AFEC1_Handler+0x8>)
  4006b6:	4b02      	ldr	r3, [pc, #8]	; (4006c0 <AFEC1_Handler+0xc>)
  4006b8:	4718      	bx	r3
  4006ba:	bf00      	nop
  4006bc:	40064000 	.word	0x40064000
  4006c0:	00400441 	.word	0x00400441

004006c4 <afec_enable>:
	if (afec == AFEC1) {
  4006c4:	4a13      	ldr	r2, [pc, #76]	; (400714 <afec_enable+0x50>)
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  4006c6:	4b14      	ldr	r3, [pc, #80]	; (400718 <afec_enable+0x54>)
  4006c8:	4290      	cmp	r0, r2
  4006ca:	bf0c      	ite	eq
  4006cc:	2028      	moveq	r0, #40	; 0x28
  4006ce:	201d      	movne	r0, #29
{
  4006d0:	b500      	push	{lr}
  4006d2:	b083      	sub	sp, #12
	pmc_enable_periph_clk(pid);
  4006d4:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  4006d6:	4a11      	ldr	r2, [pc, #68]	; (40071c <afec_enable+0x58>)
  4006d8:	7893      	ldrb	r3, [r2, #2]
  4006da:	2bff      	cmp	r3, #255	; 0xff
  4006dc:	d018      	beq.n	400710 <afec_enable+0x4c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4006de:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4006e2:	fab3 f383 	clz	r3, r3
  4006e6:	095b      	lsrs	r3, r3, #5
  4006e8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4006ea:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4006ec:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4006f0:	2000      	movs	r0, #0
  4006f2:	490b      	ldr	r1, [pc, #44]	; (400720 <afec_enable+0x5c>)
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4006f4:	7893      	ldrb	r3, [r2, #2]
  4006f6:	7008      	strb	r0, [r1, #0]
  4006f8:	3301      	adds	r3, #1
	return flags;
  4006fa:	9801      	ldr	r0, [sp, #4]
  4006fc:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4006fe:	b120      	cbz	r0, 40070a <afec_enable+0x46>
		cpu_irq_enable();
  400700:	2301      	movs	r3, #1
  400702:	700b      	strb	r3, [r1, #0]
  400704:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400708:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  40070a:	b003      	add	sp, #12
  40070c:	f85d fb04 	ldr.w	pc, [sp], #4
  400710:	e7fe      	b.n	400710 <afec_enable+0x4c>
  400712:	bf00      	nop
  400714:	40064000 	.word	0x40064000
  400718:	004008d5 	.word	0x004008d5
  40071c:	20400bc8 	.word	0x20400bc8
  400720:	20400000 	.word	0x20400000

00400724 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400724:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400726:	4770      	bx	lr

00400728 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400728:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40072a:	4770      	bx	lr

0040072c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40072c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40072e:	4604      	mov	r4, r0
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400730:	4b0f      	ldr	r3, [pc, #60]	; (400770 <pio_handler_process+0x44>)
{
  400732:	460f      	mov	r7, r1
	status = pio_get_interrupt_status(p_pio);
  400734:	4798      	blx	r3
  400736:	4606      	mov	r6, r0
	status &= pio_get_interrupt_mask(p_pio);
  400738:	4b0e      	ldr	r3, [pc, #56]	; (400774 <pio_handler_process+0x48>)
  40073a:	4620      	mov	r0, r4
  40073c:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40073e:	4006      	ands	r6, r0
  400740:	d015      	beq.n	40076e <pio_handler_process+0x42>
  400742:	4c0d      	ldr	r4, [pc, #52]	; (400778 <pio_handler_process+0x4c>)
  400744:	2500      	movs	r5, #0
  400746:	e004      	b.n	400752 <pio_handler_process+0x26>
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400748:	2d07      	cmp	r5, #7
  40074a:	f104 0410 	add.w	r4, r4, #16
  40074e:	d00e      	beq.n	40076e <pio_handler_process+0x42>
  400750:	b16e      	cbz	r6, 40076e <pio_handler_process+0x42>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400752:	6823      	ldr	r3, [r4, #0]
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
  400754:	3501      	adds	r5, #1
			if (gs_interrupt_sources[i].id == ul_id) {
  400756:	42bb      	cmp	r3, r7
  400758:	d1f6      	bne.n	400748 <pio_handler_process+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40075a:	6861      	ldr	r1, [r4, #4]
  40075c:	4231      	tst	r1, r6
  40075e:	d0f3      	beq.n	400748 <pio_handler_process+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400760:	68e3      	ldr	r3, [r4, #12]
  400762:	4638      	mov	r0, r7
  400764:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400766:	6863      	ldr	r3, [r4, #4]
  400768:	ea26 0603 	bic.w	r6, r6, r3
  40076c:	e7ec      	b.n	400748 <pio_handler_process+0x1c>
  40076e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400770:	00400725 	.word	0x00400725
  400774:	00400729 	.word	0x00400729
  400778:	204009dc 	.word	0x204009dc

0040077c <PIOA_Handler>:
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
	pio_handler_process(PIOA, ID_PIOA);
  40077c:	210a      	movs	r1, #10
  40077e:	4801      	ldr	r0, [pc, #4]	; (400784 <PIOA_Handler+0x8>)
  400780:	4b01      	ldr	r3, [pc, #4]	; (400788 <PIOA_Handler+0xc>)
  400782:	4718      	bx	r3
  400784:	400e0e00 	.word	0x400e0e00
  400788:	0040072d 	.word	0x0040072d

0040078c <PIOB_Handler>:
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
    pio_handler_process(PIOB, ID_PIOB);
  40078c:	210b      	movs	r1, #11
  40078e:	4801      	ldr	r0, [pc, #4]	; (400794 <PIOB_Handler+0x8>)
  400790:	4b01      	ldr	r3, [pc, #4]	; (400798 <PIOB_Handler+0xc>)
  400792:	4718      	bx	r3
  400794:	400e1000 	.word	0x400e1000
  400798:	0040072d 	.word	0x0040072d

0040079c <PIOC_Handler>:
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
	pio_handler_process(PIOC, ID_PIOC);
  40079c:	210c      	movs	r1, #12
  40079e:	4801      	ldr	r0, [pc, #4]	; (4007a4 <PIOC_Handler+0x8>)
  4007a0:	4b01      	ldr	r3, [pc, #4]	; (4007a8 <PIOC_Handler+0xc>)
  4007a2:	4718      	bx	r3
  4007a4:	400e1200 	.word	0x400e1200
  4007a8:	0040072d 	.word	0x0040072d

004007ac <PIOD_Handler>:
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
	pio_handler_process(PIOD, ID_PIOD);
  4007ac:	2110      	movs	r1, #16
  4007ae:	4801      	ldr	r0, [pc, #4]	; (4007b4 <PIOD_Handler+0x8>)
  4007b0:	4b01      	ldr	r3, [pc, #4]	; (4007b8 <PIOD_Handler+0xc>)
  4007b2:	4718      	bx	r3
  4007b4:	400e1400 	.word	0x400e1400
  4007b8:	0040072d 	.word	0x0040072d

004007bc <PIOE_Handler>:
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
	pio_handler_process(PIOE, ID_PIOE);
  4007bc:	2111      	movs	r1, #17
  4007be:	4801      	ldr	r0, [pc, #4]	; (4007c4 <PIOE_Handler+0x8>)
  4007c0:	4b01      	ldr	r3, [pc, #4]	; (4007c8 <PIOE_Handler+0xc>)
  4007c2:	4718      	bx	r3
  4007c4:	400e1600 	.word	0x400e1600
  4007c8:	0040072d 	.word	0x0040072d

004007cc <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  4007cc:	3802      	subs	r0, #2
  4007ce:	2802      	cmp	r0, #2
  4007d0:	d80d      	bhi.n	4007ee <pmc_mck_set_division+0x22>
  4007d2:	4b08      	ldr	r3, [pc, #32]	; (4007f4 <pmc_mck_set_division+0x28>)
  4007d4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4007d8:	4907      	ldr	r1, [pc, #28]	; (4007f8 <pmc_mck_set_division+0x2c>)
  4007da:	6b0b      	ldr	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4007dc:	460a      	mov	r2, r1
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4007de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4007e2:	4303      	orrs	r3, r0
	PMC->PMC_MCKR =
  4007e4:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4007e6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007e8:	071b      	lsls	r3, r3, #28
  4007ea:	d5fc      	bpl.n	4007e6 <pmc_mck_set_division+0x1a>
}
  4007ec:	4770      	bx	lr
{
  4007ee:	2000      	movs	r0, #0
  4007f0:	e7f2      	b.n	4007d8 <pmc_mck_set_division+0xc>
  4007f2:	bf00      	nop
  4007f4:	00406c18 	.word	0x00406c18
  4007f8:	400e0600 	.word	0x400e0600

004007fc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4007fc:	4913      	ldr	r1, [pc, #76]	; (40084c <pmc_switch_mck_to_pllack+0x50>)
  4007fe:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400804:	4318      	orrs	r0, r3
  400806:	6308      	str	r0, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400808:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  40080a:	0718      	lsls	r0, r3, #28
  40080c:	d407      	bmi.n	40081e <pmc_switch_mck_to_pllack+0x22>
  40080e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400812:	e001      	b.n	400818 <pmc_switch_mck_to_pllack+0x1c>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400814:	3b01      	subs	r3, #1
  400816:	d016      	beq.n	400846 <pmc_switch_mck_to_pllack+0x4a>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400818:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40081a:	0712      	lsls	r2, r2, #28
  40081c:	d5fa      	bpl.n	400814 <pmc_switch_mck_to_pllack+0x18>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40081e:	490b      	ldr	r1, [pc, #44]	; (40084c <pmc_switch_mck_to_pllack+0x50>)
  400820:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400822:	f023 0303 	bic.w	r3, r3, #3
  400826:	f043 0302 	orr.w	r3, r3, #2
  40082a:	630b      	str	r3, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40082c:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  40082e:	0718      	lsls	r0, r3, #28
  400830:	d407      	bmi.n	400842 <pmc_switch_mck_to_pllack+0x46>
  400832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400836:	e001      	b.n	40083c <pmc_switch_mck_to_pllack+0x40>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400838:	3b01      	subs	r3, #1
  40083a:	d004      	beq.n	400846 <pmc_switch_mck_to_pllack+0x4a>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40083c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40083e:	0712      	lsls	r2, r2, #28
  400840:	d5fa      	bpl.n	400838 <pmc_switch_mck_to_pllack+0x3c>
			return 1;
		}
	}

	return 0;
  400842:	2000      	movs	r0, #0
}
  400844:	4770      	bx	lr
			return 1;
  400846:	2001      	movs	r0, #1
  400848:	4770      	bx	lr
  40084a:	bf00      	nop
  40084c:	400e0600 	.word	0x400e0600

00400850 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400850:	b9a0      	cbnz	r0, 40087c <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400852:	4b0e      	ldr	r3, [pc, #56]	; (40088c <pmc_switch_mainck_to_xtal+0x3c>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400854:	0209      	lsls	r1, r1, #8
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400856:	480e      	ldr	r0, [pc, #56]	; (400890 <pmc_switch_mainck_to_xtal+0x40>)
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400858:	b289      	uxth	r1, r1
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40085a:	461a      	mov	r2, r3
{
  40085c:	b430      	push	{r4, r5}
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40085e:	4c0d      	ldr	r4, [pc, #52]	; (400894 <pmc_switch_mainck_to_xtal+0x44>)
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400860:	6a1d      	ldr	r5, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400862:	402c      	ands	r4, r5
  400864:	4320      	orrs	r0, r4
  400866:	4301      	orrs	r1, r0
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400868:	6219      	str	r1, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40086a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40086c:	07db      	lsls	r3, r3, #31
  40086e:	d5fc      	bpl.n	40086a <pmc_switch_mainck_to_xtal+0x1a>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400870:	6a11      	ldr	r1, [r2, #32]
  400872:	4b09      	ldr	r3, [pc, #36]	; (400898 <pmc_switch_mainck_to_xtal+0x48>)
  400874:	430b      	orrs	r3, r1
  400876:	6213      	str	r3, [r2, #32]
	}
}
  400878:	bc30      	pop	{r4, r5}
  40087a:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40087c:	4903      	ldr	r1, [pc, #12]	; (40088c <pmc_switch_mainck_to_xtal+0x3c>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40087e:	4a07      	ldr	r2, [pc, #28]	; (40089c <pmc_switch_mainck_to_xtal+0x4c>)
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400880:	6a08      	ldr	r0, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400882:	4b07      	ldr	r3, [pc, #28]	; (4008a0 <pmc_switch_mainck_to_xtal+0x50>)
  400884:	4002      	ands	r2, r0
  400886:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400888:	620b      	str	r3, [r1, #32]
  40088a:	4770      	bx	lr
  40088c:	400e0600 	.word	0x400e0600
  400890:	00370001 	.word	0x00370001
  400894:	ffc8fffc 	.word	0xffc8fffc
  400898:	01370000 	.word	0x01370000
  40089c:	fec8fffc 	.word	0xfec8fffc
  4008a0:	01370002 	.word	0x01370002

004008a4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4008a4:	4b02      	ldr	r3, [pc, #8]	; (4008b0 <pmc_osc_is_ready_mainck+0xc>)
  4008a6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4008a8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4008ac:	4770      	bx	lr
  4008ae:	bf00      	nop
  4008b0:	400e0600 	.word	0x400e0600

004008b4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4008b4:	4b02      	ldr	r3, [pc, #8]	; (4008c0 <pmc_disable_pllack+0xc>)
  4008b6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4008ba:	629a      	str	r2, [r3, #40]	; 0x28
  4008bc:	4770      	bx	lr
  4008be:	bf00      	nop
  4008c0:	400e0600 	.word	0x400e0600

004008c4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4008c4:	4b02      	ldr	r3, [pc, #8]	; (4008d0 <pmc_is_locked_pllack+0xc>)
  4008c6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4008c8:	f000 0002 	and.w	r0, r0, #2
  4008cc:	4770      	bx	lr
  4008ce:	bf00      	nop
  4008d0:	400e0600 	.word	0x400e0600

004008d4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4008d4:	283f      	cmp	r0, #63	; 0x3f
  4008d6:	d81a      	bhi.n	40090e <pmc_enable_periph_clk+0x3a>
		return 1;
	}

	if (ul_id < 32) {
  4008d8:	281f      	cmp	r0, #31
  4008da:	d80a      	bhi.n	4008f2 <pmc_enable_periph_clk+0x1e>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4008dc:	2301      	movs	r3, #1
  4008de:	4a0e      	ldr	r2, [pc, #56]	; (400918 <pmc_enable_periph_clk+0x44>)
  4008e0:	fa03 f000 	lsl.w	r0, r3, r0
  4008e4:	6991      	ldr	r1, [r2, #24]
  4008e6:	ea30 0301 	bics.w	r3, r0, r1
  4008ea:	d012      	beq.n	400912 <pmc_enable_periph_clk+0x3e>
			PMC->PMC_PCER0 = 1 << ul_id;
  4008ec:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4008ee:	2000      	movs	r0, #0
  4008f0:	4770      	bx	lr
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4008f2:	2301      	movs	r3, #1
		ul_id -= 32;
  4008f4:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4008f6:	4a08      	ldr	r2, [pc, #32]	; (400918 <pmc_enable_periph_clk+0x44>)
  4008f8:	fa03 f000 	lsl.w	r0, r3, r0
  4008fc:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
  400900:	ea30 0303 	bics.w	r3, r0, r3
  400904:	d005      	beq.n	400912 <pmc_enable_periph_clk+0x3e>
			PMC->PMC_PCER1 = 1 << ul_id;
  400906:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
	return 0;
  40090a:	2000      	movs	r0, #0
  40090c:	4770      	bx	lr
		return 1;
  40090e:	2001      	movs	r0, #1
  400910:	4770      	bx	lr
	return 0;
  400912:	2000      	movs	r0, #0
}
  400914:	4770      	bx	lr
  400916:	bf00      	nop
  400918:	400e0600 	.word	0x400e0600

0040091c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40091c:	6943      	ldr	r3, [r0, #20]
  40091e:	079b      	lsls	r3, r3, #30
  400920:	d502      	bpl.n	400928 <uart_write+0xc>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400922:	61c1      	str	r1, [r0, #28]
	return 0;
  400924:	2000      	movs	r0, #0
  400926:	4770      	bx	lr
		return 1;
  400928:	2001      	movs	r0, #1
}
  40092a:	4770      	bx	lr

0040092c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40092c:	6943      	ldr	r3, [r0, #20]
  40092e:	07db      	lsls	r3, r3, #31
  400930:	d503      	bpl.n	40093a <uart_read+0xe>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400932:	6983      	ldr	r3, [r0, #24]
	return 0;
  400934:	2000      	movs	r0, #0
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400936:	700b      	strb	r3, [r1, #0]
	return 0;
  400938:	4770      	bx	lr
		return 1;
  40093a:	2001      	movs	r0, #1
}
  40093c:	4770      	bx	lr
  40093e:	bf00      	nop

00400940 <usart_set_async_baudrate>:
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400940:	010b      	lsls	r3, r1, #4
  400942:	4293      	cmp	r3, r2
{
  400944:	b410      	push	{r4}
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400946:	d814      	bhi.n	400972 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400948:	0859      	lsrs	r1, r3, #1
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40094a:	f64f 74fe 	movw	r4, #65534	; 0xfffe
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40094e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400952:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400956:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400958:	1e59      	subs	r1, r3, #1
  40095a:	42a1      	cmp	r1, r4
  40095c:	d815      	bhi.n	40098a <usart_set_async_baudrate+0x4a>
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40095e:	0412      	lsls	r2, r2, #16

	return 0;
  400960:	2100      	movs	r1, #0
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400962:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400966:	431a      	orrs	r2, r3
  400968:	6202      	str	r2, [r0, #32]
}
  40096a:	4608      	mov	r0, r1
  40096c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400970:	4770      	bx	lr
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400972:	00c9      	lsls	r1, r1, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400974:	f64f 74fe 	movw	r4, #65534	; 0xfffe
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400978:	084b      	lsrs	r3, r1, #1
  40097a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  40097e:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400982:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400984:	1e59      	subs	r1, r3, #1
  400986:	42a1      	cmp	r1, r4
  400988:	d904      	bls.n	400994 <usart_set_async_baudrate+0x54>
		return 1;
  40098a:	2101      	movs	r1, #1
}
  40098c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400990:	4608      	mov	r0, r1
  400992:	4770      	bx	lr
		p_usart->US_MR |= US_MR_OVER;
  400994:	6841      	ldr	r1, [r0, #4]
  400996:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  40099a:	6041      	str	r1, [r0, #4]
  40099c:	e7df      	b.n	40095e <usart_set_async_baudrate+0x1e>
  40099e:	bf00      	nop

004009a0 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4009a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	p_usart->US_MR = 0;
  4009a2:	2400      	movs	r4, #0
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4009a4:	4d14      	ldr	r5, [pc, #80]	; (4009f8 <usart_init_rs232+0x58>)
	p_usart->US_CR = US_CR_RSTSTA;
  4009a6:	f44f 7680 	mov.w	r6, #256	; 0x100
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4009aa:	f04f 0e88 	mov.w	lr, #136	; 0x88
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4009ae:	2724      	movs	r7, #36	; 0x24
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4009b0:	f8c0 50e4 	str.w	r5, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  4009b4:	6044      	str	r4, [r0, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  4009b6:	f44f 2500 	mov.w	r5, #524288	; 0x80000
	p_usart->US_RTOR = 0;
  4009ba:	6244      	str	r4, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4009bc:	6284      	str	r4, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4009be:	f8c0 e000 	str.w	lr, [r0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4009c2:	6007      	str	r7, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  4009c4:	6006      	str	r6, [r0, #0]
	ul_reg_val = 0;
  4009c6:	4e0d      	ldr	r6, [pc, #52]	; (4009fc <usart_init_rs232+0x5c>)
	p_usart->US_CR = US_CR_RTSDIS;
  4009c8:	6005      	str	r5, [r0, #0]
	ul_reg_val = 0;
  4009ca:	6034      	str	r4, [r6, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4009cc:	b189      	cbz	r1, 4009f2 <usart_init_rs232+0x52>
  4009ce:	460d      	mov	r5, r1
  4009d0:	4b0b      	ldr	r3, [pc, #44]	; (400a00 <usart_init_rs232+0x60>)
  4009d2:	6809      	ldr	r1, [r1, #0]
  4009d4:	4604      	mov	r4, r0
  4009d6:	4798      	blx	r3
  4009d8:	b958      	cbnz	r0, 4009f2 <usart_init_rs232+0x52>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4009da:	686a      	ldr	r2, [r5, #4]
  4009dc:	68ab      	ldr	r3, [r5, #8]
  4009de:	692f      	ldr	r7, [r5, #16]
  4009e0:	4313      	orrs	r3, r2
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4009e2:	68e9      	ldr	r1, [r5, #12]
	p_usart->US_MR |= ul_reg_val;
  4009e4:	6862      	ldr	r2, [r4, #4]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4009e6:	433b      	orrs	r3, r7
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4009e8:	430b      	orrs	r3, r1
	p_usart->US_MR |= ul_reg_val;
  4009ea:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4009ec:	6033      	str	r3, [r6, #0]
	p_usart->US_MR |= ul_reg_val;
  4009ee:	6062      	str	r2, [r4, #4]
}
  4009f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
  4009f2:	2001      	movs	r0, #1
  4009f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4009f6:	bf00      	nop
  4009f8:	55534100 	.word	0x55534100
  4009fc:	20400a4c 	.word	0x20400a4c
  400a00:	00400941 	.word	0x00400941

00400a04 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400a04:	2340      	movs	r3, #64	; 0x40
  400a06:	6003      	str	r3, [r0, #0]
  400a08:	4770      	bx	lr
  400a0a:	bf00      	nop

00400a0c <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  400a0c:	2310      	movs	r3, #16
  400a0e:	6003      	str	r3, [r0, #0]
  400a10:	4770      	bx	lr
  400a12:	bf00      	nop

00400a14 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400a14:	6942      	ldr	r2, [r0, #20]
{
  400a16:	4603      	mov	r3, r0
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400a18:	0792      	lsls	r2, r2, #30
  400a1a:	d504      	bpl.n	400a26 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400a1c:	f3c1 0108 	ubfx	r1, r1, #0, #9
	return 0;
  400a20:	2000      	movs	r0, #0
	p_usart->US_THR = US_THR_TXCHR(c);
  400a22:	61d9      	str	r1, [r3, #28]
	return 0;
  400a24:	4770      	bx	lr
		return 1;
  400a26:	2001      	movs	r0, #1
}
  400a28:	4770      	bx	lr
  400a2a:	bf00      	nop

00400a2c <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400a2c:	6943      	ldr	r3, [r0, #20]
  400a2e:	07db      	lsls	r3, r3, #31
  400a30:	d505      	bpl.n	400a3e <usart_read+0x12>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400a32:	6983      	ldr	r3, [r0, #24]
	return 0;
  400a34:	2000      	movs	r0, #0
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400a3a:	600b      	str	r3, [r1, #0]
	return 0;
  400a3c:	4770      	bx	lr
		return 1;
  400a3e:	2001      	movs	r0, #1
}
  400a40:	4770      	bx	lr
  400a42:	bf00      	nop

00400a44 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400a44:	e7fe      	b.n	400a44 <Dummy_Handler>
  400a46:	bf00      	nop

00400a48 <Reset_Handler>:
        if (pSrc != pDest) {
  400a48:	4924      	ldr	r1, [pc, #144]	; (400adc <Reset_Handler+0x94>)
  400a4a:	4a25      	ldr	r2, [pc, #148]	; (400ae0 <Reset_Handler+0x98>)
  400a4c:	4291      	cmp	r1, r2
{
  400a4e:	b500      	push	{lr}
  400a50:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400a52:	d00e      	beq.n	400a72 <Reset_Handler+0x2a>
                for (; pDest < &_erelocate;) {
  400a54:	4823      	ldr	r0, [pc, #140]	; (400ae4 <Reset_Handler+0x9c>)
  400a56:	4282      	cmp	r2, r0
  400a58:	d20b      	bcs.n	400a72 <Reset_Handler+0x2a>
  400a5a:	43d3      	mvns	r3, r2
  400a5c:	4403      	add	r3, r0
  400a5e:	f023 0303 	bic.w	r3, r3, #3
  400a62:	3304      	adds	r3, #4
  400a64:	4413      	add	r3, r2
                        *pDest++ = *pSrc++;
  400a66:	f851 0b04 	ldr.w	r0, [r1], #4
  400a6a:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400a6e:	429a      	cmp	r2, r3
  400a70:	d1f9      	bne.n	400a66 <Reset_Handler+0x1e>
        for (pDest = &_szero; pDest < &_ezero;) {
  400a72:	4a1d      	ldr	r2, [pc, #116]	; (400ae8 <Reset_Handler+0xa0>)
  400a74:	491d      	ldr	r1, [pc, #116]	; (400aec <Reset_Handler+0xa4>)
  400a76:	428a      	cmp	r2, r1
  400a78:	d20a      	bcs.n	400a90 <Reset_Handler+0x48>
  400a7a:	43d3      	mvns	r3, r2
                *pDest++ = 0;
  400a7c:	2000      	movs	r0, #0
  400a7e:	440b      	add	r3, r1
  400a80:	f023 0303 	bic.w	r3, r3, #3
  400a84:	3304      	adds	r3, #4
  400a86:	4413      	add	r3, r2
  400a88:	f842 0b04 	str.w	r0, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400a8c:	429a      	cmp	r2, r3
  400a8e:	d1fb      	bne.n	400a88 <Reset_Handler+0x40>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400a90:	4b17      	ldr	r3, [pc, #92]	; (400af0 <Reset_Handler+0xa8>)
  400a92:	4a18      	ldr	r2, [pc, #96]	; (400af4 <Reset_Handler+0xac>)
  400a94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400a98:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400a9a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400a9e:	fab3 f383 	clz	r3, r3
  400aa2:	095b      	lsrs	r3, r3, #5
  400aa4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400aa6:	b672      	cpsid	i
  400aa8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400aac:	4a12      	ldr	r2, [pc, #72]	; (400af8 <Reset_Handler+0xb0>)
  400aae:	2300      	movs	r3, #0
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400ab0:	4912      	ldr	r1, [pc, #72]	; (400afc <Reset_Handler+0xb4>)
  400ab2:	7013      	strb	r3, [r2, #0]
	return flags;
  400ab4:	9801      	ldr	r0, [sp, #4]
  400ab6:	680b      	ldr	r3, [r1, #0]
  400ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400abc:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb");
  400abe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400ac2:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  400ac6:	b120      	cbz	r0, 400ad2 <Reset_Handler+0x8a>
		cpu_irq_enable();
  400ac8:	2301      	movs	r3, #1
  400aca:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dmb");
  400acc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400ad0:	b662      	cpsie	i
        __libc_init_array();
  400ad2:	4b0b      	ldr	r3, [pc, #44]	; (400b00 <Reset_Handler+0xb8>)
  400ad4:	4798      	blx	r3
        main();
  400ad6:	4b0b      	ldr	r3, [pc, #44]	; (400b04 <Reset_Handler+0xbc>)
  400ad8:	4798      	blx	r3
  400ada:	e7fe      	b.n	400ada <Reset_Handler+0x92>
  400adc:	00406ed0 	.word	0x00406ed0
  400ae0:	20400000 	.word	0x20400000
  400ae4:	204009c0 	.word	0x204009c0
  400ae8:	204009c0 	.word	0x204009c0
  400aec:	20400cd0 	.word	0x20400cd0
  400af0:	00400000 	.word	0x00400000
  400af4:	e000ed00 	.word	0xe000ed00
  400af8:	20400000 	.word	0x20400000
  400afc:	e000ed88 	.word	0xe000ed88
  400b00:	00403c6d 	.word	0x00403c6d
  400b04:	00402cf5 	.word	0x00402cf5

00400b08 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400b08:	4a31      	ldr	r2, [pc, #196]	; (400bd0 <SystemCoreClockUpdate+0xc8>)
  400b0a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400b0c:	f003 0303 	and.w	r3, r3, #3
  400b10:	2b01      	cmp	r3, #1
  400b12:	d03d      	beq.n	400b90 <SystemCoreClockUpdate+0x88>
  400b14:	d326      	bcc.n	400b64 <SystemCoreClockUpdate+0x5c>
  400b16:	2b02      	cmp	r3, #2
  400b18:	d00d      	beq.n	400b36 <SystemCoreClockUpdate+0x2e>
  400b1a:	492e      	ldr	r1, [pc, #184]	; (400bd4 <SystemCoreClockUpdate+0xcc>)
  400b1c:	680b      	ldr	r3, [r1, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400b1e:	482c      	ldr	r0, [pc, #176]	; (400bd0 <SystemCoreClockUpdate+0xc8>)
  400b20:	6b02      	ldr	r2, [r0, #48]	; 0x30
  400b22:	f002 0270 	and.w	r2, r2, #112	; 0x70
  400b26:	2a70      	cmp	r2, #112	; 0x70
  400b28:	d02c      	beq.n	400b84 <SystemCoreClockUpdate+0x7c>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400b2a:	6b02      	ldr	r2, [r0, #48]	; 0x30
  400b2c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400b30:	40d3      	lsrs	r3, r2
  400b32:	600b      	str	r3, [r1, #0]
  400b34:	4770      	bx	lr
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400b36:	6a13      	ldr	r3, [r2, #32]
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400b38:	4926      	ldr	r1, [pc, #152]	; (400bd4 <SystemCoreClockUpdate+0xcc>)
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400b3a:	01db      	lsls	r3, r3, #7
  400b3c:	d538      	bpl.n	400bb0 <SystemCoreClockUpdate+0xa8>
            SystemCoreClock *= 3U;
  400b3e:	4b26      	ldr	r3, [pc, #152]	; (400bd8 <SystemCoreClockUpdate+0xd0>)
  400b40:	600b      	str	r3, [r1, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400b42:	4823      	ldr	r0, [pc, #140]	; (400bd0 <SystemCoreClockUpdate+0xc8>)
  400b44:	6b02      	ldr	r2, [r0, #48]	; 0x30
  400b46:	f002 0203 	and.w	r2, r2, #3
  400b4a:	2a02      	cmp	r2, #2
  400b4c:	d1e7      	bne.n	400b1e <SystemCoreClockUpdate+0x16>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400b4e:	6a82      	ldr	r2, [r0, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400b50:	6a80      	ldr	r0, [r0, #40]	; 0x28
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400b52:	f3c2 420a 	ubfx	r2, r2, #16, #11
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400b56:	b2c0      	uxtb	r0, r0
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400b58:	fb02 3303 	mla	r3, r2, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400b5c:	fbb3 f3f0 	udiv	r3, r3, r0
  400b60:	600b      	str	r3, [r1, #0]
  400b62:	e7dc      	b.n	400b1e <SystemCoreClockUpdate+0x16>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400b64:	4b1d      	ldr	r3, [pc, #116]	; (400bdc <SystemCoreClockUpdate+0xd4>)
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400b66:	491b      	ldr	r1, [pc, #108]	; (400bd4 <SystemCoreClockUpdate+0xcc>)
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400b68:	695b      	ldr	r3, [r3, #20]
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400b6a:	4819      	ldr	r0, [pc, #100]	; (400bd0 <SystemCoreClockUpdate+0xc8>)
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400b6c:	061b      	lsls	r3, r3, #24
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400b6e:	bf4c      	ite	mi
  400b70:	f44f 4300 	movmi.w	r3, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400b74:	f44f 43fa 	movpl.w	r3, #32000	; 0x7d00
  400b78:	600b      	str	r3, [r1, #0]
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400b7a:	6b02      	ldr	r2, [r0, #48]	; 0x30
  400b7c:	f002 0270 	and.w	r2, r2, #112	; 0x70
  400b80:	2a70      	cmp	r2, #112	; 0x70
  400b82:	d1d2      	bne.n	400b2a <SystemCoreClockUpdate+0x22>
    SystemCoreClock /= 3U;
  400b84:	4a16      	ldr	r2, [pc, #88]	; (400be0 <SystemCoreClockUpdate+0xd8>)
  400b86:	fba2 2303 	umull	r2, r3, r2, r3
  400b8a:	085b      	lsrs	r3, r3, #1
  400b8c:	600b      	str	r3, [r1, #0]
  400b8e:	4770      	bx	lr
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400b90:	6a13      	ldr	r3, [r2, #32]
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400b92:	4910      	ldr	r1, [pc, #64]	; (400bd4 <SystemCoreClockUpdate+0xcc>)
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400b94:	01d8      	lsls	r0, r3, #7
  400b96:	d408      	bmi.n	400baa <SystemCoreClockUpdate+0xa2>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400b98:	4b12      	ldr	r3, [pc, #72]	; (400be4 <SystemCoreClockUpdate+0xdc>)
  400b9a:	600b      	str	r3, [r1, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400b9c:	6a12      	ldr	r2, [r2, #32]
  400b9e:	f002 0270 	and.w	r2, r2, #112	; 0x70
  400ba2:	2a10      	cmp	r2, #16
  400ba4:	d011      	beq.n	400bca <SystemCoreClockUpdate+0xc2>
  400ba6:	2a20      	cmp	r2, #32
  400ba8:	d1b9      	bne.n	400b1e <SystemCoreClockUpdate+0x16>
            SystemCoreClock *= 3U;
  400baa:	4b0b      	ldr	r3, [pc, #44]	; (400bd8 <SystemCoreClockUpdate+0xd0>)
  400bac:	600b      	str	r3, [r1, #0]
          break;
  400bae:	e7b6      	b.n	400b1e <SystemCoreClockUpdate+0x16>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400bb0:	4b0c      	ldr	r3, [pc, #48]	; (400be4 <SystemCoreClockUpdate+0xdc>)
  400bb2:	600b      	str	r3, [r1, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400bb4:	6a12      	ldr	r2, [r2, #32]
  400bb6:	f002 0270 	and.w	r2, r2, #112	; 0x70
  400bba:	2a10      	cmp	r2, #16
  400bbc:	d002      	beq.n	400bc4 <SystemCoreClockUpdate+0xbc>
  400bbe:	2a20      	cmp	r2, #32
  400bc0:	d0bd      	beq.n	400b3e <SystemCoreClockUpdate+0x36>
  400bc2:	e7be      	b.n	400b42 <SystemCoreClockUpdate+0x3a>
            SystemCoreClock *= 2U;
  400bc4:	4b08      	ldr	r3, [pc, #32]	; (400be8 <SystemCoreClockUpdate+0xe0>)
  400bc6:	600b      	str	r3, [r1, #0]
          break;
  400bc8:	e7bb      	b.n	400b42 <SystemCoreClockUpdate+0x3a>
            SystemCoreClock *= 2U;
  400bca:	4b07      	ldr	r3, [pc, #28]	; (400be8 <SystemCoreClockUpdate+0xe0>)
  400bcc:	600b      	str	r3, [r1, #0]
          break;
  400bce:	e7a6      	b.n	400b1e <SystemCoreClockUpdate+0x16>
  400bd0:	400e0600 	.word	0x400e0600
  400bd4:	20400004 	.word	0x20400004
  400bd8:	00b71b00 	.word	0x00b71b00
  400bdc:	400e1810 	.word	0x400e1810
  400be0:	aaaaaaab 	.word	0xaaaaaaab
  400be4:	003d0900 	.word	0x003d0900
  400be8:	007a1200 	.word	0x007a1200

00400bec <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400bec:	4b16      	ldr	r3, [pc, #88]	; (400c48 <system_init_flash+0x5c>)
  400bee:	4298      	cmp	r0, r3
  400bf0:	d917      	bls.n	400c22 <system_init_flash+0x36>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400bf2:	4b16      	ldr	r3, [pc, #88]	; (400c4c <system_init_flash+0x60>)
  400bf4:	4298      	cmp	r0, r3
  400bf6:	d910      	bls.n	400c1a <system_init_flash+0x2e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400bf8:	4b15      	ldr	r3, [pc, #84]	; (400c50 <system_init_flash+0x64>)
  400bfa:	4298      	cmp	r0, r3
  400bfc:	d91a      	bls.n	400c34 <system_init_flash+0x48>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400bfe:	4b15      	ldr	r3, [pc, #84]	; (400c54 <system_init_flash+0x68>)
  400c00:	4298      	cmp	r0, r3
  400c02:	d913      	bls.n	400c2c <system_init_flash+0x40>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400c04:	4b14      	ldr	r3, [pc, #80]	; (400c58 <system_init_flash+0x6c>)
  400c06:	4298      	cmp	r0, r3
  400c08:	d918      	bls.n	400c3c <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400c0a:	4b14      	ldr	r3, [pc, #80]	; (400c5c <system_init_flash+0x70>)
  400c0c:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400c0e:	4b14      	ldr	r3, [pc, #80]	; (400c60 <system_init_flash+0x74>)
  400c10:	bf94      	ite	ls
  400c12:	4a14      	ldrls	r2, [pc, #80]	; (400c64 <system_init_flash+0x78>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400c14:	4a14      	ldrhi	r2, [pc, #80]	; (400c68 <system_init_flash+0x7c>)
  400c16:	601a      	str	r2, [r3, #0]
  400c18:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400c1a:	4b11      	ldr	r3, [pc, #68]	; (400c60 <system_init_flash+0x74>)
  400c1c:	4a13      	ldr	r2, [pc, #76]	; (400c6c <system_init_flash+0x80>)
  400c1e:	601a      	str	r2, [r3, #0]
  400c20:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400c22:	4b0f      	ldr	r3, [pc, #60]	; (400c60 <system_init_flash+0x74>)
  400c24:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400c28:	601a      	str	r2, [r3, #0]
  400c2a:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400c2c:	4b0c      	ldr	r3, [pc, #48]	; (400c60 <system_init_flash+0x74>)
  400c2e:	4a10      	ldr	r2, [pc, #64]	; (400c70 <system_init_flash+0x84>)
  400c30:	601a      	str	r2, [r3, #0]
  400c32:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400c34:	4b0a      	ldr	r3, [pc, #40]	; (400c60 <system_init_flash+0x74>)
  400c36:	4a0f      	ldr	r2, [pc, #60]	; (400c74 <system_init_flash+0x88>)
  400c38:	601a      	str	r2, [r3, #0]
  400c3a:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400c3c:	4b08      	ldr	r3, [pc, #32]	; (400c60 <system_init_flash+0x74>)
  400c3e:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400c42:	601a      	str	r2, [r3, #0]
  400c44:	4770      	bx	lr
  400c46:	bf00      	nop
  400c48:	015ef3bf 	.word	0x015ef3bf
  400c4c:	02bde77f 	.word	0x02bde77f
  400c50:	041cdb3f 	.word	0x041cdb3f
  400c54:	057bceff 	.word	0x057bceff
  400c58:	06dac2bf 	.word	0x06dac2bf
  400c5c:	0839b67f 	.word	0x0839b67f
  400c60:	400e0c00 	.word	0x400e0c00
  400c64:	04000500 	.word	0x04000500
  400c68:	04000600 	.word	0x04000600
  400c6c:	04000100 	.word	0x04000100
  400c70:	04000300 	.word	0x04000300
  400c74:	04000200 	.word	0x04000200

00400c78 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400c78:	4a0d      	ldr	r2, [pc, #52]	; (400cb0 <_sbrk+0x38>)
	int ramend = (int)&__ram_end__;
  400c7a:	490e      	ldr	r1, [pc, #56]	; (400cb4 <_sbrk+0x3c>)
	if (heap == NULL) {
  400c7c:	6813      	ldr	r3, [r2, #0]
  400c7e:	b143      	cbz	r3, 400c92 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
  400c80:	4418      	add	r0, r3
  400c82:	4281      	cmp	r1, r0
  400c84:	db02      	blt.n	400c8c <_sbrk+0x14>
		return (caddr_t) -1;	
	}

	heap += incr;
  400c86:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400c88:	4618      	mov	r0, r3
  400c8a:	4770      	bx	lr
		return (caddr_t) -1;	
  400c8c:	f04f 30ff 	mov.w	r0, #4294967295
  400c90:	4770      	bx	lr
{
  400c92:	b410      	push	{r4}
		heap = (unsigned char *)&_end;
  400c94:	4c08      	ldr	r4, [pc, #32]	; (400cb8 <_sbrk+0x40>)
	if (((int)prev_heap + incr) > ramend) {
  400c96:	4420      	add	r0, r4
		heap = (unsigned char *)&_end;
  400c98:	6014      	str	r4, [r2, #0]
	if (((int)prev_heap + incr) > ramend) {
  400c9a:	4281      	cmp	r1, r0
  400c9c:	db04      	blt.n	400ca8 <_sbrk+0x30>
	heap += incr;
  400c9e:	6010      	str	r0, [r2, #0]
	return (caddr_t) prev_heap;
  400ca0:	4620      	mov	r0, r4
}
  400ca2:	f85d 4b04 	ldr.w	r4, [sp], #4
  400ca6:	4770      	bx	lr
		return (caddr_t) -1;	
  400ca8:	f04f 30ff 	mov.w	r0, #4294967295
  400cac:	e7f9      	b.n	400ca2 <_sbrk+0x2a>
  400cae:	bf00      	nop
  400cb0:	20400a50 	.word	0x20400a50
  400cb4:	2045fffc 	.word	0x2045fffc
  400cb8:	20402ed0 	.word	0x20402ed0

00400cbc <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400cbc:	f04f 30ff 	mov.w	r0, #4294967295
  400cc0:	4770      	bx	lr
  400cc2:	bf00      	nop

00400cc4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400cc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000

	return 0;
}
  400cc8:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
  400cca:	604b      	str	r3, [r1, #4]
}
  400ccc:	4770      	bx	lr
  400cce:	bf00      	nop

00400cd0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400cd0:	2001      	movs	r0, #1
  400cd2:	4770      	bx	lr

00400cd4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400cd4:	2000      	movs	r0, #0
  400cd6:	4770      	bx	lr

00400cd8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400cd8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400cdc:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400ce0:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400ce2:	6081      	str	r1, [r0, #8]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400ce4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400ce6:	6103      	str	r3, [r0, #16]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400ce8:	e880 000c 	stmia.w	r0, {r2, r3}
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400cec:	4770      	bx	lr
  400cee:	bf00      	nop

00400cf0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400cf0:	2300      	movs	r3, #0
  400cf2:	6103      	str	r3, [r0, #16]
  400cf4:	4770      	bx	lr
  400cf6:	bf00      	nop

00400cf8 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400cf8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400cfa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400cfc:	689a      	ldr	r2, [r3, #8]
  400cfe:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400d00:	689a      	ldr	r2, [r3, #8]
  400d02:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400d04:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400d06:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400d08:	6803      	ldr	r3, [r0, #0]
  400d0a:	3301      	adds	r3, #1
  400d0c:	6003      	str	r3, [r0, #0]
  400d0e:	4770      	bx	lr

00400d10 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400d10:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400d12:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400d14:	1c6b      	adds	r3, r5, #1
  400d16:	d011      	beq.n	400d3c <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400d18:	f100 0208 	add.w	r2, r0, #8
  400d1c:	e000      	b.n	400d20 <vListInsert+0x10>
  400d1e:	461a      	mov	r2, r3
  400d20:	6853      	ldr	r3, [r2, #4]
  400d22:	681c      	ldr	r4, [r3, #0]
  400d24:	42a5      	cmp	r5, r4
  400d26:	d2fa      	bcs.n	400d1e <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400d28:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  400d2a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400d2c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  400d2e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400d30:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400d32:	6803      	ldr	r3, [r0, #0]
  400d34:	3301      	adds	r3, #1
}
  400d36:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
  400d38:	6003      	str	r3, [r0, #0]
}
  400d3a:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
  400d3c:	6902      	ldr	r2, [r0, #16]
  400d3e:	6853      	ldr	r3, [r2, #4]
  400d40:	e7f2      	b.n	400d28 <vListInsert+0x18>
  400d42:	bf00      	nop

00400d44 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400d44:	6842      	ldr	r2, [r0, #4]
  400d46:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  400d48:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400d4a:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400d4c:	6882      	ldr	r2, [r0, #8]
  400d4e:	6841      	ldr	r1, [r0, #4]
  400d50:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400d52:	685a      	ldr	r2, [r3, #4]
  400d54:	4290      	cmp	r0, r2
  400d56:	d005      	beq.n	400d64 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400d58:	2200      	movs	r2, #0
  400d5a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400d5c:	6818      	ldr	r0, [r3, #0]
  400d5e:	3801      	subs	r0, #1
  400d60:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  400d62:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400d64:	6882      	ldr	r2, [r0, #8]
  400d66:	605a      	str	r2, [r3, #4]
  400d68:	e7f6      	b.n	400d58 <uxListRemove+0x14>
  400d6a:	bf00      	nop

00400d6c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  400d6c:	4b0c      	ldr	r3, [pc, #48]	; (400da0 <prvTaskExitError+0x34>)
  400d6e:	681b      	ldr	r3, [r3, #0]
  400d70:	3301      	adds	r3, #1
  400d72:	d00a      	beq.n	400d8a <prvTaskExitError+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400d74:	f04f 0380 	mov.w	r3, #128	; 0x80
  400d78:	b672      	cpsid	i
  400d7a:	f383 8811 	msr	BASEPRI, r3
  400d7e:	f3bf 8f6f 	isb	sy
  400d82:	f3bf 8f4f 	dsb	sy
  400d86:	b662      	cpsie	i
  400d88:	e7fe      	b.n	400d88 <prvTaskExitError+0x1c>
  400d8a:	f04f 0380 	mov.w	r3, #128	; 0x80
  400d8e:	b672      	cpsid	i
  400d90:	f383 8811 	msr	BASEPRI, r3
  400d94:	f3bf 8f6f 	isb	sy
  400d98:	f3bf 8f4f 	dsb	sy
  400d9c:	b662      	cpsie	i
  400d9e:	e7fe      	b.n	400d9e <prvTaskExitError+0x32>
  400da0:	20400008 	.word	0x20400008

00400da4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  400da4:	4806      	ldr	r0, [pc, #24]	; (400dc0 <prvPortStartFirstTask+0x1c>)
  400da6:	6800      	ldr	r0, [r0, #0]
  400da8:	6800      	ldr	r0, [r0, #0]
  400daa:	f380 8808 	msr	MSP, r0
  400dae:	b662      	cpsie	i
  400db0:	b661      	cpsie	f
  400db2:	f3bf 8f4f 	dsb	sy
  400db6:	f3bf 8f6f 	isb	sy
  400dba:	df00      	svc	0
  400dbc:	bf00      	nop
  400dbe:	0000      	.short	0x0000
  400dc0:	e000ed08 	.word	0xe000ed08

00400dc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400dc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400dd4 <vPortEnableVFP+0x10>
  400dc8:	6801      	ldr	r1, [r0, #0]
  400dca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400dce:	6001      	str	r1, [r0, #0]
  400dd0:	4770      	bx	lr
  400dd2:	0000      	.short	0x0000
  400dd4:	e000ed88 	.word	0xe000ed88

00400dd8 <pxPortInitialiseStack>:
{
  400dd8:	b470      	push	{r4, r5, r6}
  400dda:	4603      	mov	r3, r0
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400ddc:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400de0:	4d07      	ldr	r5, [pc, #28]	; (400e00 <pxPortInitialiseStack+0x28>)
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  400de2:	f06f 0402 	mvn.w	r4, #2
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  400de6:	f840 1c08 	str.w	r1, [r0, #-8]
}
  400dea:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  400dec:	f843 2c20 	str.w	r2, [r3, #-32]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400df0:	f843 6c04 	str.w	r6, [r3, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400df4:	f843 5c0c 	str.w	r5, [r3, #-12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  400df8:	f843 4c24 	str.w	r4, [r3, #-36]
}
  400dfc:	bc70      	pop	{r4, r5, r6}
  400dfe:	4770      	bx	lr
  400e00:	00400d6d 	.word	0x00400d6d

00400e04 <SVC_Handler>:
	__asm volatile (
  400e04:	4b06      	ldr	r3, [pc, #24]	; (400e20 <pxCurrentTCBConst2>)
  400e06:	6819      	ldr	r1, [r3, #0]
  400e08:	6808      	ldr	r0, [r1, #0]
  400e0a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400e0e:	f380 8809 	msr	PSP, r0
  400e12:	f3bf 8f6f 	isb	sy
  400e16:	f04f 0000 	mov.w	r0, #0
  400e1a:	f380 8811 	msr	BASEPRI, r0
  400e1e:	4770      	bx	lr

00400e20 <pxCurrentTCBConst2>:
  400e20:	20400a5c 	.word	0x20400a5c
  400e24:	4770      	bx	lr
  400e26:	bf00      	nop

00400e28 <vPortEnterCritical>:
  400e28:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e2c:	b672      	cpsid	i
  400e2e:	f383 8811 	msr	BASEPRI, r3
  400e32:	f3bf 8f6f 	isb	sy
  400e36:	f3bf 8f4f 	dsb	sy
  400e3a:	b662      	cpsie	i
	uxCriticalNesting++;
  400e3c:	4a0b      	ldr	r2, [pc, #44]	; (400e6c <vPortEnterCritical+0x44>)
  400e3e:	6813      	ldr	r3, [r2, #0]
  400e40:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
  400e42:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
  400e44:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  400e46:	d000      	beq.n	400e4a <vPortEnterCritical+0x22>
  400e48:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  400e4a:	4b09      	ldr	r3, [pc, #36]	; (400e70 <vPortEnterCritical+0x48>)
  400e4c:	681b      	ldr	r3, [r3, #0]
  400e4e:	f013 0fff 	tst.w	r3, #255	; 0xff
  400e52:	d0f9      	beq.n	400e48 <vPortEnterCritical+0x20>
  400e54:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e58:	b672      	cpsid	i
  400e5a:	f383 8811 	msr	BASEPRI, r3
  400e5e:	f3bf 8f6f 	isb	sy
  400e62:	f3bf 8f4f 	dsb	sy
  400e66:	b662      	cpsie	i
  400e68:	e7fe      	b.n	400e68 <vPortEnterCritical+0x40>
  400e6a:	bf00      	nop
  400e6c:	20400008 	.word	0x20400008
  400e70:	e000ed04 	.word	0xe000ed04

00400e74 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  400e74:	4a09      	ldr	r2, [pc, #36]	; (400e9c <vPortExitCritical+0x28>)
  400e76:	6813      	ldr	r3, [r2, #0]
  400e78:	b953      	cbnz	r3, 400e90 <vPortExitCritical+0x1c>
  400e7a:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e7e:	b672      	cpsid	i
  400e80:	f383 8811 	msr	BASEPRI, r3
  400e84:	f3bf 8f6f 	isb	sy
  400e88:	f3bf 8f4f 	dsb	sy
  400e8c:	b662      	cpsie	i
  400e8e:	e7fe      	b.n	400e8e <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  400e90:	3b01      	subs	r3, #1
  400e92:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  400e94:	b90b      	cbnz	r3, 400e9a <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400e96:	f383 8811 	msr	BASEPRI, r3
  400e9a:	4770      	bx	lr
  400e9c:	20400008 	.word	0x20400008

00400ea0 <PendSV_Handler>:
	__asm volatile
  400ea0:	f3ef 8009 	mrs	r0, PSP
  400ea4:	f3bf 8f6f 	isb	sy
  400ea8:	4b15      	ldr	r3, [pc, #84]	; (400f00 <pxCurrentTCBConst>)
  400eaa:	681a      	ldr	r2, [r3, #0]
  400eac:	f01e 0f10 	tst.w	lr, #16
  400eb0:	bf08      	it	eq
  400eb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400eb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400eba:	6010      	str	r0, [r2, #0]
  400ebc:	f84d 3d04 	str.w	r3, [sp, #-4]!
  400ec0:	f04f 0080 	mov.w	r0, #128	; 0x80
  400ec4:	b672      	cpsid	i
  400ec6:	f380 8811 	msr	BASEPRI, r0
  400eca:	f3bf 8f4f 	dsb	sy
  400ece:	f3bf 8f6f 	isb	sy
  400ed2:	b662      	cpsie	i
  400ed4:	f001 f86e 	bl	401fb4 <vTaskSwitchContext>
  400ed8:	f04f 0000 	mov.w	r0, #0
  400edc:	f380 8811 	msr	BASEPRI, r0
  400ee0:	bc08      	pop	{r3}
  400ee2:	6819      	ldr	r1, [r3, #0]
  400ee4:	6808      	ldr	r0, [r1, #0]
  400ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400eea:	f01e 0f10 	tst.w	lr, #16
  400eee:	bf08      	it	eq
  400ef0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  400ef4:	f380 8809 	msr	PSP, r0
  400ef8:	f3bf 8f6f 	isb	sy
  400efc:	4770      	bx	lr
  400efe:	bf00      	nop

00400f00 <pxCurrentTCBConst>:
  400f00:	20400a5c 	.word	0x20400a5c
  400f04:	4770      	bx	lr
  400f06:	bf00      	nop

00400f08 <SysTick_Handler>:
{
  400f08:	b508      	push	{r3, lr}
	__asm volatile
  400f0a:	f3ef 8311 	mrs	r3, BASEPRI
  400f0e:	f04f 0280 	mov.w	r2, #128	; 0x80
  400f12:	b672      	cpsid	i
  400f14:	f382 8811 	msr	BASEPRI, r2
  400f18:	f3bf 8f6f 	isb	sy
  400f1c:	f3bf 8f4f 	dsb	sy
  400f20:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  400f22:	4b05      	ldr	r3, [pc, #20]	; (400f38 <SysTick_Handler+0x30>)
  400f24:	4798      	blx	r3
  400f26:	b118      	cbz	r0, 400f30 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400f28:	4b04      	ldr	r3, [pc, #16]	; (400f3c <SysTick_Handler+0x34>)
  400f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400f2e:	601a      	str	r2, [r3, #0]
	__asm volatile
  400f30:	2300      	movs	r3, #0
  400f32:	f383 8811 	msr	BASEPRI, r3
  400f36:	bd08      	pop	{r3, pc}
  400f38:	00401c75 	.word	0x00401c75
  400f3c:	e000ed04 	.word	0xe000ed04

00400f40 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400f40:	4903      	ldr	r1, [pc, #12]	; (400f50 <vPortSetupTimerInterrupt+0x10>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400f42:	2207      	movs	r2, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400f44:	4803      	ldr	r0, [pc, #12]	; (400f54 <vPortSetupTimerInterrupt+0x14>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400f46:	4b04      	ldr	r3, [pc, #16]	; (400f58 <vPortSetupTimerInterrupt+0x18>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400f48:	6008      	str	r0, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400f4a:	601a      	str	r2, [r3, #0]
  400f4c:	4770      	bx	lr
  400f4e:	bf00      	nop
  400f50:	e000e014 	.word	0xe000e014
  400f54:	000927bf 	.word	0x000927bf
  400f58:	e000e010 	.word	0xe000e010

00400f5c <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400f5c:	4b23      	ldr	r3, [pc, #140]	; (400fec <xPortStartScheduler+0x90>)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400f5e:	2207      	movs	r2, #7
  400f60:	4823      	ldr	r0, [pc, #140]	; (400ff0 <xPortStartScheduler+0x94>)
{
  400f62:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400f64:	7819      	ldrb	r1, [r3, #0]
{
  400f66:	b083      	sub	sp, #12
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  400f68:	25ff      	movs	r5, #255	; 0xff
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400f6a:	4c22      	ldr	r4, [pc, #136]	; (400ff4 <xPortStartScheduler+0x98>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400f6c:	b2c9      	uxtb	r1, r1
  400f6e:	9101      	str	r1, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  400f70:	701d      	strb	r5, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400f72:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400f74:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400f76:	b2db      	uxtb	r3, r3
  400f78:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400f7c:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400f80:	f89d 1003 	ldrb.w	r1, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400f88:	0609      	lsls	r1, r1, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400f8a:	7023      	strb	r3, [r4, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400f8c:	d50d      	bpl.n	400faa <xPortStartScheduler+0x4e>
  400f8e:	2206      	movs	r2, #6
  400f90:	e000      	b.n	400f94 <xPortStartScheduler+0x38>
  400f92:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  400f94:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400f98:	1e51      	subs	r1, r2, #1
  400f9a:	005b      	lsls	r3, r3, #1
  400f9c:	b2db      	uxtb	r3, r3
  400f9e:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400fa2:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400fa6:	061b      	lsls	r3, r3, #24
  400fa8:	d4f3      	bmi.n	400f92 <xPortStartScheduler+0x36>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  400faa:	9901      	ldr	r1, [sp, #4]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  400fac:	0212      	lsls	r2, r2, #8
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  400fae:	4b12      	ldr	r3, [pc, #72]	; (400ff8 <xPortStartScheduler+0x9c>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400fb0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  400fb4:	b2c9      	uxtb	r1, r1
  400fb6:	4c0d      	ldr	r4, [pc, #52]	; (400fec <xPortStartScheduler+0x90>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400fb8:	6002      	str	r2, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  400fba:	7021      	strb	r1, [r4, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  400fbc:	681a      	ldr	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  400fbe:	490f      	ldr	r1, [pc, #60]	; (400ffc <xPortStartScheduler+0xa0>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  400fc0:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  400fc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  400fc6:	681a      	ldr	r2, [r3, #0]
  400fc8:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  400fcc:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  400fce:	4788      	blx	r1
	uxCriticalNesting = 0;
  400fd0:	4a0b      	ldr	r2, [pc, #44]	; (401000 <xPortStartScheduler+0xa4>)
  400fd2:	2100      	movs	r1, #0
	vPortEnableVFP();
  400fd4:	4b0b      	ldr	r3, [pc, #44]	; (401004 <xPortStartScheduler+0xa8>)
	uxCriticalNesting = 0;
  400fd6:	6011      	str	r1, [r2, #0]
	vPortEnableVFP();
  400fd8:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  400fda:	4a0b      	ldr	r2, [pc, #44]	; (401008 <xPortStartScheduler+0xac>)
	prvPortStartFirstTask();
  400fdc:	490b      	ldr	r1, [pc, #44]	; (40100c <xPortStartScheduler+0xb0>)
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  400fde:	6813      	ldr	r3, [r2, #0]
  400fe0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400fe4:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  400fe6:	4788      	blx	r1
	prvTaskExitError();
  400fe8:	4b09      	ldr	r3, [pc, #36]	; (401010 <xPortStartScheduler+0xb4>)
  400fea:	4798      	blx	r3
  400fec:	e000e400 	.word	0xe000e400
  400ff0:	20400a58 	.word	0x20400a58
  400ff4:	20400a54 	.word	0x20400a54
  400ff8:	e000ed20 	.word	0xe000ed20
  400ffc:	00400f41 	.word	0x00400f41
  401000:	20400008 	.word	0x20400008
  401004:	00400dc5 	.word	0x00400dc5
  401008:	e000ef34 	.word	0xe000ef34
  40100c:	00400da5 	.word	0x00400da5
  401010:	00400d6d 	.word	0x00400d6d

00401014 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  401014:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  401018:	2b0f      	cmp	r3, #15
  40101a:	d910      	bls.n	40103e <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  40101c:	4912      	ldr	r1, [pc, #72]	; (401068 <vPortValidateInterruptPriority+0x54>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  40101e:	4a13      	ldr	r2, [pc, #76]	; (40106c <vPortValidateInterruptPriority+0x58>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  401020:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  401022:	7812      	ldrb	r2, [r2, #0]
  401024:	429a      	cmp	r2, r3
  401026:	d90a      	bls.n	40103e <vPortValidateInterruptPriority+0x2a>
	__asm volatile
  401028:	f04f 0380 	mov.w	r3, #128	; 0x80
  40102c:	b672      	cpsid	i
  40102e:	f383 8811 	msr	BASEPRI, r3
  401032:	f3bf 8f6f 	isb	sy
  401036:	f3bf 8f4f 	dsb	sy
  40103a:	b662      	cpsie	i
  40103c:	e7fe      	b.n	40103c <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  40103e:	4b0c      	ldr	r3, [pc, #48]	; (401070 <vPortValidateInterruptPriority+0x5c>)
  401040:	4a0c      	ldr	r2, [pc, #48]	; (401074 <vPortValidateInterruptPriority+0x60>)
  401042:	681b      	ldr	r3, [r3, #0]
  401044:	6812      	ldr	r2, [r2, #0]
  401046:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40104a:	4293      	cmp	r3, r2
  40104c:	d90a      	bls.n	401064 <vPortValidateInterruptPriority+0x50>
  40104e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401052:	b672      	cpsid	i
  401054:	f383 8811 	msr	BASEPRI, r3
  401058:	f3bf 8f6f 	isb	sy
  40105c:	f3bf 8f4f 	dsb	sy
  401060:	b662      	cpsie	i
  401062:	e7fe      	b.n	401062 <vPortValidateInterruptPriority+0x4e>
  401064:	4770      	bx	lr
  401066:	bf00      	nop
  401068:	e000e3f0 	.word	0xe000e3f0
  40106c:	20400a54 	.word	0x20400a54
  401070:	e000ed0c 	.word	0xe000ed0c
  401074:	20400a58 	.word	0x20400a58

00401078 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401078:	b510      	push	{r4, lr}
  40107a:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  40107c:	4b07      	ldr	r3, [pc, #28]	; (40109c <pvPortMalloc+0x24>)
  40107e:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  401080:	4b07      	ldr	r3, [pc, #28]	; (4010a0 <pvPortMalloc+0x28>)
  401082:	4620      	mov	r0, r4
  401084:	4798      	blx	r3
  401086:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  401088:	4b06      	ldr	r3, [pc, #24]	; (4010a4 <pvPortMalloc+0x2c>)
  40108a:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  40108c:	b10c      	cbz	r4, 401092 <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  40108e:	4620      	mov	r0, r4
  401090:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  401092:	4b05      	ldr	r3, [pc, #20]	; (4010a8 <pvPortMalloc+0x30>)
  401094:	4798      	blx	r3
}
  401096:	4620      	mov	r0, r4
  401098:	bd10      	pop	{r4, pc}
  40109a:	bf00      	nop
  40109c:	00401c59 	.word	0x00401c59
  4010a0:	00403ce5 	.word	0x00403ce5
  4010a4:	00401de9 	.word	0x00401de9
  4010a8:	00402cdd 	.word	0x00402cdd

004010ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  4010ac:	b150      	cbz	r0, 4010c4 <vPortFree+0x18>
	{
		vTaskSuspendAll();
  4010ae:	4b06      	ldr	r3, [pc, #24]	; (4010c8 <vPortFree+0x1c>)
{
  4010b0:	b510      	push	{r4, lr}
  4010b2:	4604      	mov	r4, r0
		vTaskSuspendAll();
  4010b4:	4798      	blx	r3
		{
			free( pv );
  4010b6:	4b05      	ldr	r3, [pc, #20]	; (4010cc <vPortFree+0x20>)
  4010b8:	4620      	mov	r0, r4
  4010ba:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  4010bc:	4b04      	ldr	r3, [pc, #16]	; (4010d0 <vPortFree+0x24>)
	}
}
  4010be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		( void ) xTaskResumeAll();
  4010c2:	4718      	bx	r3
  4010c4:	4770      	bx	lr
  4010c6:	bf00      	nop
  4010c8:	00401c59 	.word	0x00401c59
  4010cc:	00403cf5 	.word	0x00403cf5
  4010d0:	00401de9 	.word	0x00401de9

004010d4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  4010d4:	b538      	push	{r3, r4, r5, lr}
  4010d6:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  4010d8:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
  4010da:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  4010dc:	b942      	cbnz	r2, 4010f0 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4010de:	6805      	ldr	r5, [r0, #0]
  4010e0:	b10d      	cbz	r5, 4010e6 <prvCopyDataToQueue+0x12>
BaseType_t xReturn = pdFALSE;
  4010e2:	2000      	movs	r0, #0
  4010e4:	e029      	b.n	40113a <prvCopyDataToQueue+0x66>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  4010e6:	6840      	ldr	r0, [r0, #4]
  4010e8:	4b16      	ldr	r3, [pc, #88]	; (401144 <prvCopyDataToQueue+0x70>)
  4010ea:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4010ec:	6065      	str	r5, [r4, #4]
  4010ee:	e024      	b.n	40113a <prvCopyDataToQueue+0x66>
  4010f0:	4b15      	ldr	r3, [pc, #84]	; (401148 <prvCopyDataToQueue+0x74>)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
  4010f2:	b965      	cbnz	r5, 40110e <prvCopyDataToQueue+0x3a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  4010f4:	6880      	ldr	r0, [r0, #8]
  4010f6:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4010f8:	68a3      	ldr	r3, [r4, #8]
  4010fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4010fc:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4010fe:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401100:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  401102:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401104:	d3ed      	bcc.n	4010e2 <prvCopyDataToQueue+0xe>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  401106:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
  401108:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
  40110a:	60a3      	str	r3, [r4, #8]
  40110c:	e015      	b.n	40113a <prvCopyDataToQueue+0x66>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40110e:	68c0      	ldr	r0, [r0, #12]
  401110:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  401112:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401114:	68e2      	ldr	r2, [r4, #12]
  401116:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401118:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  40111a:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  40111c:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  40111e:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401120:	d202      	bcs.n	401128 <prvCopyDataToQueue+0x54>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  401122:	6862      	ldr	r2, [r4, #4]
  401124:	4413      	add	r3, r2
  401126:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
  401128:	2d02      	cmp	r5, #2
  40112a:	d1da      	bne.n	4010e2 <prvCopyDataToQueue+0xe>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  40112c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40112e:	2b00      	cmp	r3, #0
  401130:	d0d7      	beq.n	4010e2 <prvCopyDataToQueue+0xe>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
  401132:	6ba3      	ldr	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  401134:	2000      	movs	r0, #0
				--( pxQueue->uxMessagesWaiting );
  401136:	3b01      	subs	r3, #1
  401138:	63a3      	str	r3, [r4, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  40113a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40113c:	3301      	adds	r3, #1
  40113e:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  401140:	bd38      	pop	{r3, r4, r5, pc}
  401142:	bf00      	nop
  401144:	00402391 	.word	0x00402391
  401148:	00404265 	.word	0x00404265

0040114c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  40114c:	b530      	push	{r4, r5, lr}
  40114e:	b083      	sub	sp, #12
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  401150:	6d44      	ldr	r4, [r0, #84]	; 0x54
	{
  401152:	9001      	str	r0, [sp, #4]
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  401154:	b1ac      	cbz	r4, 401182 <prvNotifyQueueSetContainer+0x36>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  401156:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401158:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40115a:	429a      	cmp	r2, r3
  40115c:	d30a      	bcc.n	401174 <prvNotifyQueueSetContainer+0x28>
  40115e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401162:	b672      	cpsid	i
  401164:	f383 8811 	msr	BASEPRI, r3
  401168:	f3bf 8f6f 	isb	sy
  40116c:	f3bf 8f4f 	dsb	sy
  401170:	b662      	cpsie	i
  401172:	e7fe      	b.n	401172 <prvNotifyQueueSetContainer+0x26>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  401174:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401176:	4293      	cmp	r3, r2
  401178:	d80e      	bhi.n	401198 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  40117a:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  40117c:	4628      	mov	r0, r5
  40117e:	b003      	add	sp, #12
  401180:	bd30      	pop	{r4, r5, pc}
  401182:	f04f 0380 	mov.w	r3, #128	; 0x80
  401186:	b672      	cpsid	i
  401188:	f383 8811 	msr	BASEPRI, r3
  40118c:	f3bf 8f6f 	isb	sy
  401190:	f3bf 8f4f 	dsb	sy
  401194:	b662      	cpsie	i
  401196:	e7fe      	b.n	401196 <prvNotifyQueueSetContainer+0x4a>
  401198:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  40119a:	4b0d      	ldr	r3, [pc, #52]	; (4011d0 <prvNotifyQueueSetContainer+0x84>)
  40119c:	a901      	add	r1, sp, #4
  40119e:	4620      	mov	r0, r4
  4011a0:	4798      	blx	r3
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  4011a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  4011a4:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  4011a6:	3301      	adds	r3, #1
  4011a8:	d005      	beq.n	4011b6 <prvNotifyQueueSetContainer+0x6a>
				( pxQueueSetContainer->xTxLock )++;
  4011aa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	}
  4011ac:	4628      	mov	r0, r5
				( pxQueueSetContainer->xTxLock )++;
  4011ae:	3301      	adds	r3, #1
  4011b0:	64a3      	str	r3, [r4, #72]	; 0x48
	}
  4011b2:	b003      	add	sp, #12
  4011b4:	bd30      	pop	{r4, r5, pc}
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  4011b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4011b8:	2b00      	cmp	r3, #0
  4011ba:	d0df      	beq.n	40117c <prvNotifyQueueSetContainer+0x30>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  4011bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4011c0:	4b04      	ldr	r3, [pc, #16]	; (4011d4 <prvNotifyQueueSetContainer+0x88>)
  4011c2:	4798      	blx	r3
						xReturn = pdTRUE;
  4011c4:	2800      	cmp	r0, #0
  4011c6:	bf18      	it	ne
  4011c8:	2501      	movne	r5, #1
	}
  4011ca:	4628      	mov	r0, r5
  4011cc:	b003      	add	sp, #12
  4011ce:	bd30      	pop	{r4, r5, pc}
  4011d0:	004010d5 	.word	0x004010d5
  4011d4:	0040216d 	.word	0x0040216d

004011d8 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  4011d8:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
  4011da:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  4011dc:	b172      	cbz	r2, 4011fc <prvCopyDataFromQueue+0x24>
  4011de:	4608      	mov	r0, r1
{
  4011e0:	b410      	push	{r4}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  4011e2:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  4011e4:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  4011e6:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  4011e8:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  4011ea:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  4011ec:	d301      	bcc.n	4011f2 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  4011ee:	6819      	ldr	r1, [r3, #0]
  4011f0:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  4011f2:	68d9      	ldr	r1, [r3, #12]
}
  4011f4:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  4011f8:	4b01      	ldr	r3, [pc, #4]	; (401200 <prvCopyDataFromQueue+0x28>)
  4011fa:	4718      	bx	r3
  4011fc:	4770      	bx	lr
  4011fe:	bf00      	nop
  401200:	00404265 	.word	0x00404265

00401204 <prvUnlockQueue>:
{
  401204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401208:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  40120a:	f8df 809c 	ldr.w	r8, [pc, #156]	; 4012a8 <prvUnlockQueue+0xa4>
  40120e:	47c0      	blx	r8
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401210:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401212:	2b00      	cmp	r3, #0
  401214:	dd1a      	ble.n	40124c <prvUnlockQueue+0x48>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401216:	4d20      	ldr	r5, [pc, #128]	; (401298 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  401218:	4f20      	ldr	r7, [pc, #128]	; (40129c <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40121a:	4e21      	ldr	r6, [pc, #132]	; (4012a0 <prvUnlockQueue+0x9c>)
  40121c:	e008      	b.n	401230 <prvUnlockQueue+0x2c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  40121e:	47a8      	blx	r5
  401220:	2801      	cmp	r0, #1
  401222:	d011      	beq.n	401248 <prvUnlockQueue+0x44>
			--( pxQueue->xTxLock );
  401224:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401226:	3b01      	subs	r3, #1
  401228:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  40122a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40122c:	2b00      	cmp	r3, #0
  40122e:	dd0d      	ble.n	40124c <prvUnlockQueue+0x48>
				if( pxQueue->pxQueueSetContainer != NULL )
  401230:	6d63      	ldr	r3, [r4, #84]	; 0x54
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401232:	2100      	movs	r1, #0
  401234:	4620      	mov	r0, r4
				if( pxQueue->pxQueueSetContainer != NULL )
  401236:	2b00      	cmp	r3, #0
  401238:	d1f1      	bne.n	40121e <prvUnlockQueue+0x1a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40123a:	6a63      	ldr	r3, [r4, #36]	; 0x24
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40123c:	f104 0024 	add.w	r0, r4, #36	; 0x24
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401240:	b123      	cbz	r3, 40124c <prvUnlockQueue+0x48>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401242:	47b0      	blx	r6
  401244:	2800      	cmp	r0, #0
  401246:	d0ed      	beq.n	401224 <prvUnlockQueue+0x20>
						vTaskMissedYield();
  401248:	47b8      	blx	r7
  40124a:	e7eb      	b.n	401224 <prvUnlockQueue+0x20>
		pxQueue->xTxLock = queueUNLOCKED;
  40124c:	f04f 33ff 	mov.w	r3, #4294967295
	taskEXIT_CRITICAL();
  401250:	4f14      	ldr	r7, [pc, #80]	; (4012a4 <prvUnlockQueue+0xa0>)
		pxQueue->xTxLock = queueUNLOCKED;
  401252:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  401254:	47b8      	blx	r7
	taskENTER_CRITICAL();
  401256:	47c0      	blx	r8
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401258:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40125a:	2b00      	cmp	r3, #0
  40125c:	dd15      	ble.n	40128a <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40125e:	6923      	ldr	r3, [r4, #16]
  401260:	b19b      	cbz	r3, 40128a <prvUnlockQueue+0x86>
  401262:	f104 0610 	add.w	r6, r4, #16
  401266:	4d0e      	ldr	r5, [pc, #56]	; (4012a0 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  401268:	f8df 8030 	ldr.w	r8, [pc, #48]	; 40129c <prvUnlockQueue+0x98>
  40126c:	e007      	b.n	40127e <prvUnlockQueue+0x7a>
				--( pxQueue->xRxLock );
  40126e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401270:	3b01      	subs	r3, #1
  401272:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401274:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401276:	2b00      	cmp	r3, #0
  401278:	dd07      	ble.n	40128a <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40127a:	6923      	ldr	r3, [r4, #16]
  40127c:	b12b      	cbz	r3, 40128a <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40127e:	4630      	mov	r0, r6
  401280:	47a8      	blx	r5
  401282:	2800      	cmp	r0, #0
  401284:	d0f3      	beq.n	40126e <prvUnlockQueue+0x6a>
					vTaskMissedYield();
  401286:	47c0      	blx	r8
  401288:	e7f1      	b.n	40126e <prvUnlockQueue+0x6a>
		pxQueue->xRxLock = queueUNLOCKED;
  40128a:	f04f 33ff 	mov.w	r3, #4294967295
  40128e:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  401290:	463b      	mov	r3, r7
}
  401292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	taskEXIT_CRITICAL();
  401296:	4718      	bx	r3
  401298:	0040114d 	.word	0x0040114d
  40129c:	004022bd 	.word	0x004022bd
  4012a0:	0040216d 	.word	0x0040216d
  4012a4:	00400e75 	.word	0x00400e75
  4012a8:	00400e29 	.word	0x00400e29

004012ac <xQueueGenericCreate.part.1>:
  4012ac:	f04f 0380 	mov.w	r3, #128	; 0x80
  4012b0:	b672      	cpsid	i
  4012b2:	f383 8811 	msr	BASEPRI, r3
  4012b6:	f3bf 8f6f 	isb	sy
  4012ba:	f3bf 8f4f 	dsb	sy
  4012be:	b662      	cpsie	i
  4012c0:	e7fe      	b.n	4012c0 <xQueueGenericCreate.part.1+0x14>
	...

004012c4 <xQueueGenericReset>:
{
  4012c4:	b570      	push	{r4, r5, r6, lr}
	configASSERT( pxQueue );
  4012c6:	b1d8      	cbz	r0, 401300 <xQueueGenericReset+0x3c>
  4012c8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  4012ca:	4b1d      	ldr	r3, [pc, #116]	; (401340 <xQueueGenericReset+0x7c>)
  4012cc:	460e      	mov	r6, r1
  4012ce:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4012d0:	6c20      	ldr	r0, [r4, #64]	; 0x40
		pxQueue->xRxLock = queueUNLOCKED;
  4012d2:	f04f 35ff 	mov.w	r5, #4294967295
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4012d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  4012d8:	2100      	movs	r1, #0
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4012da:	6822      	ldr	r2, [r4, #0]
  4012dc:	fb03 f300 	mul.w	r3, r3, r0
		pxQueue->pcWriteTo = pxQueue->pcHead;
  4012e0:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  4012e2:	1a18      	subs	r0, r3, r0
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4012e4:	4413      	add	r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  4012e6:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  4012e8:	4402      	add	r2, r0
		pxQueue->xRxLock = queueUNLOCKED;
  4012ea:	6465      	str	r5, [r4, #68]	; 0x44
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4012ec:	6063      	str	r3, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  4012ee:	60e2      	str	r2, [r4, #12]
		pxQueue->xTxLock = queueUNLOCKED;
  4012f0:	64a5      	str	r5, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  4012f2:	b9ce      	cbnz	r6, 401328 <xQueueGenericReset+0x64>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4012f4:	6923      	ldr	r3, [r4, #16]
  4012f6:	b92b      	cbnz	r3, 401304 <xQueueGenericReset+0x40>
	taskEXIT_CRITICAL();
  4012f8:	4b12      	ldr	r3, [pc, #72]	; (401344 <xQueueGenericReset+0x80>)
  4012fa:	4798      	blx	r3
}
  4012fc:	2001      	movs	r0, #1
  4012fe:	bd70      	pop	{r4, r5, r6, pc}
  401300:	4b11      	ldr	r3, [pc, #68]	; (401348 <xQueueGenericReset+0x84>)
  401302:	4798      	blx	r3
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401304:	f104 0010 	add.w	r0, r4, #16
  401308:	4b10      	ldr	r3, [pc, #64]	; (40134c <xQueueGenericReset+0x88>)
  40130a:	4798      	blx	r3
  40130c:	2801      	cmp	r0, #1
  40130e:	d1f3      	bne.n	4012f8 <xQueueGenericReset+0x34>
					queueYIELD_IF_USING_PREEMPTION();
  401310:	4b0f      	ldr	r3, [pc, #60]	; (401350 <xQueueGenericReset+0x8c>)
  401312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401316:	601a      	str	r2, [r3, #0]
  401318:	f3bf 8f4f 	dsb	sy
  40131c:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
  401320:	4b08      	ldr	r3, [pc, #32]	; (401344 <xQueueGenericReset+0x80>)
  401322:	4798      	blx	r3
}
  401324:	2001      	movs	r0, #1
  401326:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401328:	f104 0010 	add.w	r0, r4, #16
  40132c:	4d09      	ldr	r5, [pc, #36]	; (401354 <xQueueGenericReset+0x90>)
  40132e:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401330:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401334:	47a8      	blx	r5
	taskEXIT_CRITICAL();
  401336:	4b03      	ldr	r3, [pc, #12]	; (401344 <xQueueGenericReset+0x80>)
  401338:	4798      	blx	r3
}
  40133a:	2001      	movs	r0, #1
  40133c:	bd70      	pop	{r4, r5, r6, pc}
  40133e:	bf00      	nop
  401340:	00400e29 	.word	0x00400e29
  401344:	00400e75 	.word	0x00400e75
  401348:	004012ad 	.word	0x004012ad
  40134c:	0040216d 	.word	0x0040216d
  401350:	e000ed04 	.word	0xe000ed04
  401354:	00400cd9 	.word	0x00400cd9

00401358 <xQueueGenericCreate>:
{
  401358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  40135a:	b950      	cbnz	r0, 401372 <xQueueGenericCreate+0x1a>
  40135c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401360:	b672      	cpsid	i
  401362:	f383 8811 	msr	BASEPRI, r3
  401366:	f3bf 8f6f 	isb	sy
  40136a:	f3bf 8f4f 	dsb	sy
  40136e:	b662      	cpsie	i
  401370:	e7fe      	b.n	401370 <xQueueGenericCreate+0x18>
  401372:	4606      	mov	r6, r0
  401374:	4617      	mov	r7, r2
  401376:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  401378:	b1a9      	cbz	r1, 4013a6 <xQueueGenericCreate+0x4e>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40137a:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  40137e:	4b0e      	ldr	r3, [pc, #56]	; (4013b8 <xQueueGenericCreate+0x60>)
  401380:	3059      	adds	r0, #89	; 0x59
  401382:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401384:	4604      	mov	r4, r0
  401386:	b1a8      	cbz	r0, 4013b4 <xQueueGenericCreate+0x5c>
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401388:	f100 0358 	add.w	r3, r0, #88	; 0x58
  40138c:	6003      	str	r3, [r0, #0]
		pxNewQueue->uxLength = uxQueueLength;
  40138e:	63e6      	str	r6, [r4, #60]	; 0x3c
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  401390:	2101      	movs	r1, #1
		pxNewQueue->uxItemSize = uxItemSize;
  401392:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  401394:	4620      	mov	r0, r4
  401396:	4b09      	ldr	r3, [pc, #36]	; (4013bc <xQueueGenericCreate+0x64>)
  401398:	4798      	blx	r3
			pxNewQueue->pxQueueSetContainer = NULL;
  40139a:	2300      	movs	r3, #0
			pxNewQueue->ucQueueType = ucQueueType;
  40139c:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
}
  4013a0:	4620      	mov	r0, r4
			pxNewQueue->pxQueueSetContainer = NULL;
  4013a2:	6563      	str	r3, [r4, #84]	; 0x54
}
  4013a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  4013a6:	2058      	movs	r0, #88	; 0x58
  4013a8:	4b03      	ldr	r3, [pc, #12]	; (4013b8 <xQueueGenericCreate+0x60>)
  4013aa:	4798      	blx	r3
	if( pxNewQueue != NULL )
  4013ac:	4604      	mov	r4, r0
  4013ae:	b108      	cbz	r0, 4013b4 <xQueueGenericCreate+0x5c>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  4013b0:	6024      	str	r4, [r4, #0]
  4013b2:	e7ec      	b.n	40138e <xQueueGenericCreate+0x36>
  4013b4:	4b02      	ldr	r3, [pc, #8]	; (4013c0 <xQueueGenericCreate+0x68>)
  4013b6:	4798      	blx	r3
  4013b8:	00401079 	.word	0x00401079
  4013bc:	004012c5 	.word	0x004012c5
  4013c0:	004012ad 	.word	0x004012ad

004013c4 <xQueueGenericSend>:
{
  4013c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4013c8:	b085      	sub	sp, #20
  4013ca:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  4013cc:	2800      	cmp	r0, #0
  4013ce:	f000 80b7 	beq.w	401540 <xQueueGenericSend+0x17c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4013d2:	2900      	cmp	r1, #0
  4013d4:	f000 809e 	beq.w	401514 <xQueueGenericSend+0x150>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4013d8:	2b02      	cmp	r3, #2
  4013da:	f000 808c 	beq.w	4014f6 <xQueueGenericSend+0x132>
  4013de:	461e      	mov	r6, r3
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4013e0:	4b63      	ldr	r3, [pc, #396]	; (401570 <xQueueGenericSend+0x1ac>)
  4013e2:	4604      	mov	r4, r0
  4013e4:	4688      	mov	r8, r1
  4013e6:	4798      	blx	r3
  4013e8:	b910      	cbnz	r0, 4013f0 <xQueueGenericSend+0x2c>
  4013ea:	9b01      	ldr	r3, [sp, #4]
  4013ec:	2b00      	cmp	r3, #0
  4013ee:	d16a      	bne.n	4014c6 <xQueueGenericSend+0x102>
  4013f0:	f1a6 0502 	sub.w	r5, r6, #2
{
  4013f4:	f04f 0a00 	mov.w	sl, #0
  4013f8:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 40159c <xQueueGenericSend+0x1d8>
  4013fc:	fab5 f585 	clz	r5, r5
  401400:	4f5c      	ldr	r7, [pc, #368]	; (401574 <xQueueGenericSend+0x1b0>)
					vTaskSetTimeOutState( &xTimeOut );
  401402:	f8df b19c 	ldr.w	fp, [pc, #412]	; 4015a0 <xQueueGenericSend+0x1dc>
  401406:	096d      	lsrs	r5, r5, #5
  401408:	e022      	b.n	401450 <xQueueGenericSend+0x8c>
  40140a:	f10d 0a08 	add.w	sl, sp, #8
		taskEXIT_CRITICAL();
  40140e:	47b8      	blx	r7
		vTaskSuspendAll();
  401410:	4b59      	ldr	r3, [pc, #356]	; (401578 <xQueueGenericSend+0x1b4>)
  401412:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401414:	47c8      	blx	r9
  401416:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401418:	3301      	adds	r3, #1
  40141a:	f000 80a6 	beq.w	40156a <xQueueGenericSend+0x1a6>
  40141e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401420:	3301      	adds	r3, #1
  401422:	f000 809f 	beq.w	401564 <xQueueGenericSend+0x1a0>
  401426:	47b8      	blx	r7
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401428:	4650      	mov	r0, sl
  40142a:	a901      	add	r1, sp, #4
  40142c:	4b53      	ldr	r3, [pc, #332]	; (40157c <xQueueGenericSend+0x1b8>)
  40142e:	4798      	blx	r3
  401430:	2800      	cmp	r0, #0
  401432:	f040 8090 	bne.w	401556 <xQueueGenericSend+0x192>
	taskENTER_CRITICAL();
  401436:	47c8      	blx	r9
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401438:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40143a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40143c:	429a      	cmp	r2, r3
  40143e:	d017      	beq.n	401470 <xQueueGenericSend+0xac>
	taskEXIT_CRITICAL();
  401440:	47b8      	blx	r7
				prvUnlockQueue( pxQueue );
  401442:	4b4f      	ldr	r3, [pc, #316]	; (401580 <xQueueGenericSend+0x1bc>)
  401444:	4620      	mov	r0, r4
  401446:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401448:	4b4e      	ldr	r3, [pc, #312]	; (401584 <xQueueGenericSend+0x1c0>)
  40144a:	4798      	blx	r3
  40144c:	f04f 0a01 	mov.w	sl, #1
		taskENTER_CRITICAL();
  401450:	47c8      	blx	r9
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401452:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401454:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401456:	429a      	cmp	r2, r3
  401458:	d325      	bcc.n	4014a6 <xQueueGenericSend+0xe2>
  40145a:	bb25      	cbnz	r5, 4014a6 <xQueueGenericSend+0xe2>
				if( xTicksToWait == ( TickType_t ) 0 )
  40145c:	9b01      	ldr	r3, [sp, #4]
  40145e:	b1eb      	cbz	r3, 40149c <xQueueGenericSend+0xd8>
				else if( xEntryTimeSet == pdFALSE )
  401460:	f1ba 0f00 	cmp.w	sl, #0
  401464:	d1d1      	bne.n	40140a <xQueueGenericSend+0x46>
					vTaskSetTimeOutState( &xTimeOut );
  401466:	f10d 0a08 	add.w	sl, sp, #8
  40146a:	4650      	mov	r0, sl
  40146c:	47d8      	blx	fp
  40146e:	e7ce      	b.n	40140e <xQueueGenericSend+0x4a>
	taskEXIT_CRITICAL();
  401470:	47b8      	blx	r7
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  401472:	9901      	ldr	r1, [sp, #4]
  401474:	f104 0010 	add.w	r0, r4, #16
  401478:	4b43      	ldr	r3, [pc, #268]	; (401588 <xQueueGenericSend+0x1c4>)
  40147a:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40147c:	4b40      	ldr	r3, [pc, #256]	; (401580 <xQueueGenericSend+0x1bc>)
  40147e:	4620      	mov	r0, r4
  401480:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401482:	4b40      	ldr	r3, [pc, #256]	; (401584 <xQueueGenericSend+0x1c0>)
  401484:	4798      	blx	r3
  401486:	2800      	cmp	r0, #0
  401488:	d1e0      	bne.n	40144c <xQueueGenericSend+0x88>
					portYIELD_WITHIN_API();
  40148a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40148e:	4a3f      	ldr	r2, [pc, #252]	; (40158c <xQueueGenericSend+0x1c8>)
  401490:	6013      	str	r3, [r2, #0]
  401492:	f3bf 8f4f 	dsb	sy
  401496:	f3bf 8f6f 	isb	sy
  40149a:	e7d7      	b.n	40144c <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
  40149c:	47b8      	blx	r7
					return errQUEUE_FULL;
  40149e:	4628      	mov	r0, r5
}
  4014a0:	b005      	add	sp, #20
  4014a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4014a6:	4b3a      	ldr	r3, [pc, #232]	; (401590 <xQueueGenericSend+0x1cc>)
  4014a8:	4641      	mov	r1, r8
  4014aa:	4632      	mov	r2, r6
  4014ac:	4620      	mov	r0, r4
  4014ae:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  4014b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4014b2:	b19b      	cbz	r3, 4014dc <xQueueGenericSend+0x118>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  4014b4:	4631      	mov	r1, r6
  4014b6:	4620      	mov	r0, r4
  4014b8:	4b36      	ldr	r3, [pc, #216]	; (401594 <xQueueGenericSend+0x1d0>)
  4014ba:	4798      	blx	r3
  4014bc:	2801      	cmp	r0, #1
  4014be:	d011      	beq.n	4014e4 <xQueueGenericSend+0x120>
				taskEXIT_CRITICAL();
  4014c0:	47b8      	blx	r7
				return pdPASS;
  4014c2:	2001      	movs	r0, #1
  4014c4:	e7ec      	b.n	4014a0 <xQueueGenericSend+0xdc>
  4014c6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014ca:	b672      	cpsid	i
  4014cc:	f383 8811 	msr	BASEPRI, r3
  4014d0:	f3bf 8f6f 	isb	sy
  4014d4:	f3bf 8f4f 	dsb	sy
  4014d8:	b662      	cpsie	i
  4014da:	e7fe      	b.n	4014da <xQueueGenericSend+0x116>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4014dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4014de:	bb43      	cbnz	r3, 401532 <xQueueGenericSend+0x16e>
						else if( xYieldRequired != pdFALSE )
  4014e0:	2800      	cmp	r0, #0
  4014e2:	d0ed      	beq.n	4014c0 <xQueueGenericSend+0xfc>
							queueYIELD_IF_USING_PREEMPTION();
  4014e4:	4b29      	ldr	r3, [pc, #164]	; (40158c <xQueueGenericSend+0x1c8>)
  4014e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4014ea:	601a      	str	r2, [r3, #0]
  4014ec:	f3bf 8f4f 	dsb	sy
  4014f0:	f3bf 8f6f 	isb	sy
  4014f4:	e7e4      	b.n	4014c0 <xQueueGenericSend+0xfc>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4014f6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  4014f8:	2a01      	cmp	r2, #1
  4014fa:	f43f af70 	beq.w	4013de <xQueueGenericSend+0x1a>
  4014fe:	f04f 0380 	mov.w	r3, #128	; 0x80
  401502:	b672      	cpsid	i
  401504:	f383 8811 	msr	BASEPRI, r3
  401508:	f3bf 8f6f 	isb	sy
  40150c:	f3bf 8f4f 	dsb	sy
  401510:	b662      	cpsie	i
  401512:	e7fe      	b.n	401512 <xQueueGenericSend+0x14e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401514:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401516:	2a00      	cmp	r2, #0
  401518:	f43f af5e 	beq.w	4013d8 <xQueueGenericSend+0x14>
  40151c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401520:	b672      	cpsid	i
  401522:	f383 8811 	msr	BASEPRI, r3
  401526:	f3bf 8f6f 	isb	sy
  40152a:	f3bf 8f4f 	dsb	sy
  40152e:	b662      	cpsie	i
  401530:	e7fe      	b.n	401530 <xQueueGenericSend+0x16c>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  401532:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401536:	4b18      	ldr	r3, [pc, #96]	; (401598 <xQueueGenericSend+0x1d4>)
  401538:	4798      	blx	r3
  40153a:	2801      	cmp	r0, #1
  40153c:	d1c0      	bne.n	4014c0 <xQueueGenericSend+0xfc>
  40153e:	e7d1      	b.n	4014e4 <xQueueGenericSend+0x120>
  401540:	f04f 0380 	mov.w	r3, #128	; 0x80
  401544:	b672      	cpsid	i
  401546:	f383 8811 	msr	BASEPRI, r3
  40154a:	f3bf 8f6f 	isb	sy
  40154e:	f3bf 8f4f 	dsb	sy
  401552:	b662      	cpsie	i
  401554:	e7fe      	b.n	401554 <xQueueGenericSend+0x190>
			prvUnlockQueue( pxQueue );
  401556:	4620      	mov	r0, r4
  401558:	4b09      	ldr	r3, [pc, #36]	; (401580 <xQueueGenericSend+0x1bc>)
  40155a:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40155c:	4b09      	ldr	r3, [pc, #36]	; (401584 <xQueueGenericSend+0x1c0>)
  40155e:	4798      	blx	r3
			return errQUEUE_FULL;
  401560:	2000      	movs	r0, #0
  401562:	e79d      	b.n	4014a0 <xQueueGenericSend+0xdc>
		prvLockQueue( pxQueue );
  401564:	2300      	movs	r3, #0
  401566:	64a3      	str	r3, [r4, #72]	; 0x48
  401568:	e75d      	b.n	401426 <xQueueGenericSend+0x62>
  40156a:	2300      	movs	r3, #0
  40156c:	6463      	str	r3, [r4, #68]	; 0x44
  40156e:	e756      	b.n	40141e <xQueueGenericSend+0x5a>
  401570:	004022c9 	.word	0x004022c9
  401574:	00400e75 	.word	0x00400e75
  401578:	00401c59 	.word	0x00401c59
  40157c:	00402225 	.word	0x00402225
  401580:	00401205 	.word	0x00401205
  401584:	00401de9 	.word	0x00401de9
  401588:	00402065 	.word	0x00402065
  40158c:	e000ed04 	.word	0xe000ed04
  401590:	004010d5 	.word	0x004010d5
  401594:	0040114d 	.word	0x0040114d
  401598:	0040216d 	.word	0x0040216d
  40159c:	00400e29 	.word	0x00400e29
  4015a0:	00402201 	.word	0x00402201

004015a4 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  4015a4:	b328      	cbz	r0, 4015f2 <xQueueGenericSendFromISR+0x4e>
{
  4015a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4015aa:	2900      	cmp	r1, #0
  4015ac:	d047      	beq.n	40163e <xQueueGenericSendFromISR+0x9a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4015ae:	2b02      	cmp	r3, #2
  4015b0:	d037      	beq.n	401622 <xQueueGenericSendFromISR+0x7e>
  4015b2:	461d      	mov	r5, r3
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4015b4:	4b37      	ldr	r3, [pc, #220]	; (401694 <xQueueGenericSendFromISR+0xf0>)
  4015b6:	4604      	mov	r4, r0
  4015b8:	4690      	mov	r8, r2
  4015ba:	460e      	mov	r6, r1
  4015bc:	4798      	blx	r3
	__asm volatile
  4015be:	f3ef 8711 	mrs	r7, BASEPRI
  4015c2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015c6:	b672      	cpsid	i
  4015c8:	f383 8811 	msr	BASEPRI, r3
  4015cc:	f3bf 8f6f 	isb	sy
  4015d0:	f3bf 8f4f 	dsb	sy
  4015d4:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4015d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4015d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4015da:	429a      	cmp	r2, r3
  4015dc:	d314      	bcc.n	401608 <xQueueGenericSendFromISR+0x64>
  4015de:	f1a5 0002 	sub.w	r0, r5, #2
  4015e2:	fab0 f080 	clz	r0, r0
  4015e6:	0940      	lsrs	r0, r0, #5
  4015e8:	b970      	cbnz	r0, 401608 <xQueueGenericSendFromISR+0x64>
	__asm volatile
  4015ea:	f387 8811 	msr	BASEPRI, r7
}
  4015ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  4015f2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015f6:	b672      	cpsid	i
  4015f8:	f383 8811 	msr	BASEPRI, r3
  4015fc:	f3bf 8f6f 	isb	sy
  401600:	f3bf 8f4f 	dsb	sy
  401604:	b662      	cpsie	i
  401606:	e7fe      	b.n	401606 <xQueueGenericSendFromISR+0x62>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401608:	4b23      	ldr	r3, [pc, #140]	; (401698 <xQueueGenericSendFromISR+0xf4>)
  40160a:	4631      	mov	r1, r6
  40160c:	462a      	mov	r2, r5
  40160e:	4620      	mov	r0, r4
  401610:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  401612:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401614:	3301      	adds	r3, #1
  401616:	d020      	beq.n	40165a <xQueueGenericSendFromISR+0xb6>
				++( pxQueue->xTxLock );
  401618:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  40161a:	2001      	movs	r0, #1
				++( pxQueue->xTxLock );
  40161c:	4403      	add	r3, r0
  40161e:	64a3      	str	r3, [r4, #72]	; 0x48
  401620:	e7e3      	b.n	4015ea <xQueueGenericSendFromISR+0x46>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401622:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  401624:	2c01      	cmp	r4, #1
  401626:	d0c4      	beq.n	4015b2 <xQueueGenericSendFromISR+0xe>
  401628:	f04f 0380 	mov.w	r3, #128	; 0x80
  40162c:	b672      	cpsid	i
  40162e:	f383 8811 	msr	BASEPRI, r3
  401632:	f3bf 8f6f 	isb	sy
  401636:	f3bf 8f4f 	dsb	sy
  40163a:	b662      	cpsie	i
  40163c:	e7fe      	b.n	40163c <xQueueGenericSendFromISR+0x98>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40163e:	6c04      	ldr	r4, [r0, #64]	; 0x40
  401640:	2c00      	cmp	r4, #0
  401642:	d0b4      	beq.n	4015ae <xQueueGenericSendFromISR+0xa>
  401644:	f04f 0380 	mov.w	r3, #128	; 0x80
  401648:	b672      	cpsid	i
  40164a:	f383 8811 	msr	BASEPRI, r3
  40164e:	f3bf 8f6f 	isb	sy
  401652:	f3bf 8f4f 	dsb	sy
  401656:	b662      	cpsie	i
  401658:	e7fe      	b.n	401658 <xQueueGenericSendFromISR+0xb4>
					if( pxQueue->pxQueueSetContainer != NULL )
  40165a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  40165c:	b163      	cbz	r3, 401678 <xQueueGenericSendFromISR+0xd4>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  40165e:	4629      	mov	r1, r5
  401660:	4620      	mov	r0, r4
  401662:	4b0e      	ldr	r3, [pc, #56]	; (40169c <xQueueGenericSendFromISR+0xf8>)
  401664:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  401666:	2801      	cmp	r0, #1
  401668:	d108      	bne.n	40167c <xQueueGenericSendFromISR+0xd8>
  40166a:	f1b8 0f00 	cmp.w	r8, #0
  40166e:	d005      	beq.n	40167c <xQueueGenericSendFromISR+0xd8>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401670:	2001      	movs	r0, #1
  401672:	f8c8 0000 	str.w	r0, [r8]
  401676:	e7b8      	b.n	4015ea <xQueueGenericSendFromISR+0x46>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401678:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40167a:	b90b      	cbnz	r3, 401680 <xQueueGenericSendFromISR+0xdc>
			xReturn = pdPASS;
  40167c:	2001      	movs	r0, #1
  40167e:	e7b4      	b.n	4015ea <xQueueGenericSendFromISR+0x46>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401680:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401684:	4b06      	ldr	r3, [pc, #24]	; (4016a0 <xQueueGenericSendFromISR+0xfc>)
  401686:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401688:	f1b8 0f00 	cmp.w	r8, #0
  40168c:	d0f6      	beq.n	40167c <xQueueGenericSendFromISR+0xd8>
  40168e:	2800      	cmp	r0, #0
  401690:	d1ee      	bne.n	401670 <xQueueGenericSendFromISR+0xcc>
  401692:	e7f3      	b.n	40167c <xQueueGenericSendFromISR+0xd8>
  401694:	00401015 	.word	0x00401015
  401698:	004010d5 	.word	0x004010d5
  40169c:	0040114d 	.word	0x0040114d
  4016a0:	0040216d 	.word	0x0040216d

004016a4 <xQueueGenericReceive>:
{
  4016a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4016a8:	b087      	sub	sp, #28
  4016aa:	9203      	str	r2, [sp, #12]
	configASSERT( pxQueue );
  4016ac:	2800      	cmp	r0, #0
  4016ae:	d066      	beq.n	40177e <xQueueGenericReceive+0xda>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4016b0:	2900      	cmp	r1, #0
  4016b2:	f000 80af 	beq.w	401814 <xQueueGenericReceive+0x170>
  4016b6:	9301      	str	r3, [sp, #4]
  4016b8:	4604      	mov	r4, r0
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4016ba:	4b5e      	ldr	r3, [pc, #376]	; (401834 <xQueueGenericReceive+0x190>)
  4016bc:	460f      	mov	r7, r1
  4016be:	4798      	blx	r3
  4016c0:	b960      	cbnz	r0, 4016dc <xQueueGenericReceive+0x38>
  4016c2:	9b03      	ldr	r3, [sp, #12]
  4016c4:	b15b      	cbz	r3, 4016de <xQueueGenericReceive+0x3a>
  4016c6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016ca:	b672      	cpsid	i
  4016cc:	f383 8811 	msr	BASEPRI, r3
  4016d0:	f3bf 8f6f 	isb	sy
  4016d4:	f3bf 8f4f 	dsb	sy
  4016d8:	b662      	cpsie	i
  4016da:	e7fe      	b.n	4016da <xQueueGenericReceive+0x36>
  4016dc:	2300      	movs	r3, #0
  4016de:	4e56      	ldr	r6, [pc, #344]	; (401838 <xQueueGenericReceive+0x194>)
  4016e0:	4d56      	ldr	r5, [pc, #344]	; (40183c <xQueueGenericReceive+0x198>)
					vTaskSetTimeOutState( &xTimeOut );
  4016e2:	f8df b180 	ldr.w	fp, [pc, #384]	; 401864 <xQueueGenericReceive+0x1c0>
		vTaskSuspendAll();
  4016e6:	f8df a180 	ldr.w	sl, [pc, #384]	; 401868 <xQueueGenericReceive+0x1c4>
					portYIELD_WITHIN_API();
  4016ea:	f8df 9174 	ldr.w	r9, [pc, #372]	; 401860 <xQueueGenericReceive+0x1bc>
  4016ee:	e006      	b.n	4016fe <xQueueGenericReceive+0x5a>
	taskEXIT_CRITICAL();
  4016f0:	47a8      	blx	r5
				prvUnlockQueue( pxQueue );
  4016f2:	4b53      	ldr	r3, [pc, #332]	; (401840 <xQueueGenericReceive+0x19c>)
  4016f4:	4620      	mov	r0, r4
  4016f6:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4016f8:	4b52      	ldr	r3, [pc, #328]	; (401844 <xQueueGenericReceive+0x1a0>)
  4016fa:	4798      	blx	r3
  4016fc:	2301      	movs	r3, #1
  4016fe:	9302      	str	r3, [sp, #8]
		taskENTER_CRITICAL();
  401700:	47b0      	blx	r6
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401702:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401704:	9b02      	ldr	r3, [sp, #8]
  401706:	2a00      	cmp	r2, #0
  401708:	d156      	bne.n	4017b8 <xQueueGenericReceive+0x114>
				if( xTicksToWait == ( TickType_t ) 0 )
  40170a:	f8dd 800c 	ldr.w	r8, [sp, #12]
  40170e:	f1b8 0f00 	cmp.w	r8, #0
  401712:	d04e      	beq.n	4017b2 <xQueueGenericReceive+0x10e>
					vTaskSetTimeOutState( &xTimeOut );
  401714:	f10d 0810 	add.w	r8, sp, #16
				else if( xEntryTimeSet == pdFALSE )
  401718:	b90b      	cbnz	r3, 40171e <xQueueGenericReceive+0x7a>
					vTaskSetTimeOutState( &xTimeOut );
  40171a:	4640      	mov	r0, r8
  40171c:	47d8      	blx	fp
		taskEXIT_CRITICAL();
  40171e:	47a8      	blx	r5
		vTaskSuspendAll();
  401720:	47d0      	blx	sl
		prvLockQueue( pxQueue );
  401722:	47b0      	blx	r6
  401724:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401726:	3301      	adds	r3, #1
  401728:	d101      	bne.n	40172e <xQueueGenericReceive+0x8a>
  40172a:	2300      	movs	r3, #0
  40172c:	6463      	str	r3, [r4, #68]	; 0x44
  40172e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401730:	3301      	adds	r3, #1
  401732:	d101      	bne.n	401738 <xQueueGenericReceive+0x94>
  401734:	2300      	movs	r3, #0
  401736:	64a3      	str	r3, [r4, #72]	; 0x48
  401738:	47a8      	blx	r5
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  40173a:	4640      	mov	r0, r8
  40173c:	a903      	add	r1, sp, #12
  40173e:	4b42      	ldr	r3, [pc, #264]	; (401848 <xQueueGenericReceive+0x1a4>)
  401740:	4798      	blx	r3
  401742:	2800      	cmp	r0, #0
  401744:	d12c      	bne.n	4017a0 <xQueueGenericReceive+0xfc>
	taskENTER_CRITICAL();
  401746:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  401748:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40174a:	2b00      	cmp	r3, #0
  40174c:	d1d0      	bne.n	4016f0 <xQueueGenericReceive+0x4c>
	taskEXIT_CRITICAL();
  40174e:	47a8      	blx	r5
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401750:	6823      	ldr	r3, [r4, #0]
  401752:	b1fb      	cbz	r3, 401794 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401754:	9903      	ldr	r1, [sp, #12]
  401756:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40175a:	4b3c      	ldr	r3, [pc, #240]	; (40184c <xQueueGenericReceive+0x1a8>)
  40175c:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40175e:	4b38      	ldr	r3, [pc, #224]	; (401840 <xQueueGenericReceive+0x19c>)
  401760:	4620      	mov	r0, r4
  401762:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401764:	4b37      	ldr	r3, [pc, #220]	; (401844 <xQueueGenericReceive+0x1a0>)
  401766:	4798      	blx	r3
  401768:	2800      	cmp	r0, #0
  40176a:	d1c7      	bne.n	4016fc <xQueueGenericReceive+0x58>
					portYIELD_WITHIN_API();
  40176c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401770:	f8c9 3000 	str.w	r3, [r9]
  401774:	f3bf 8f4f 	dsb	sy
  401778:	f3bf 8f6f 	isb	sy
  40177c:	e7be      	b.n	4016fc <xQueueGenericReceive+0x58>
  40177e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401782:	b672      	cpsid	i
  401784:	f383 8811 	msr	BASEPRI, r3
  401788:	f3bf 8f6f 	isb	sy
  40178c:	f3bf 8f4f 	dsb	sy
  401790:	b662      	cpsie	i
  401792:	e7fe      	b.n	401792 <xQueueGenericReceive+0xee>
						taskENTER_CRITICAL();
  401794:	47b0      	blx	r6
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401796:	6860      	ldr	r0, [r4, #4]
  401798:	4b2d      	ldr	r3, [pc, #180]	; (401850 <xQueueGenericReceive+0x1ac>)
  40179a:	4798      	blx	r3
						taskEXIT_CRITICAL();
  40179c:	47a8      	blx	r5
  40179e:	e7d9      	b.n	401754 <xQueueGenericReceive+0xb0>
			prvUnlockQueue( pxQueue );
  4017a0:	4620      	mov	r0, r4
  4017a2:	4b27      	ldr	r3, [pc, #156]	; (401840 <xQueueGenericReceive+0x19c>)
  4017a4:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4017a6:	4b27      	ldr	r3, [pc, #156]	; (401844 <xQueueGenericReceive+0x1a0>)
  4017a8:	4798      	blx	r3
			return errQUEUE_EMPTY;
  4017aa:	2000      	movs	r0, #0
}
  4017ac:	b007      	add	sp, #28
  4017ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					taskEXIT_CRITICAL();
  4017b2:	47a8      	blx	r5
					return errQUEUE_EMPTY;
  4017b4:	4640      	mov	r0, r8
  4017b6:	e7f9      	b.n	4017ac <xQueueGenericReceive+0x108>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  4017b8:	4b26      	ldr	r3, [pc, #152]	; (401854 <xQueueGenericReceive+0x1b0>)
  4017ba:	4639      	mov	r1, r7
  4017bc:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  4017be:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  4017c0:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  4017c2:	9b01      	ldr	r3, [sp, #4]
  4017c4:	b963      	cbnz	r3, 4017e0 <xQueueGenericReceive+0x13c>
					--( pxQueue->uxMessagesWaiting );
  4017c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4017c8:	6822      	ldr	r2, [r4, #0]
					--( pxQueue->uxMessagesWaiting );
  4017ca:	3b01      	subs	r3, #1
  4017cc:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4017ce:	b912      	cbnz	r2, 4017d6 <xQueueGenericReceive+0x132>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  4017d0:	4b21      	ldr	r3, [pc, #132]	; (401858 <xQueueGenericReceive+0x1b4>)
  4017d2:	4798      	blx	r3
  4017d4:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4017d6:	6923      	ldr	r3, [r4, #16]
  4017d8:	b9ab      	cbnz	r3, 401806 <xQueueGenericReceive+0x162>
				taskEXIT_CRITICAL();
  4017da:	47a8      	blx	r5
				return pdPASS;
  4017dc:	2001      	movs	r0, #1
  4017de:	e7e5      	b.n	4017ac <xQueueGenericReceive+0x108>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4017e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  4017e2:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4017e4:	2b00      	cmp	r3, #0
  4017e6:	d0f8      	beq.n	4017da <xQueueGenericReceive+0x136>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4017e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4017ec:	4b1b      	ldr	r3, [pc, #108]	; (40185c <xQueueGenericReceive+0x1b8>)
  4017ee:	4798      	blx	r3
  4017f0:	2800      	cmp	r0, #0
  4017f2:	d0f2      	beq.n	4017da <xQueueGenericReceive+0x136>
							queueYIELD_IF_USING_PREEMPTION();
  4017f4:	4b1a      	ldr	r3, [pc, #104]	; (401860 <xQueueGenericReceive+0x1bc>)
  4017f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4017fa:	601a      	str	r2, [r3, #0]
  4017fc:	f3bf 8f4f 	dsb	sy
  401800:	f3bf 8f6f 	isb	sy
  401804:	e7e9      	b.n	4017da <xQueueGenericReceive+0x136>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401806:	f104 0010 	add.w	r0, r4, #16
  40180a:	4b14      	ldr	r3, [pc, #80]	; (40185c <xQueueGenericReceive+0x1b8>)
  40180c:	4798      	blx	r3
  40180e:	2801      	cmp	r0, #1
  401810:	d1e3      	bne.n	4017da <xQueueGenericReceive+0x136>
  401812:	e7ef      	b.n	4017f4 <xQueueGenericReceive+0x150>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401814:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401816:	2a00      	cmp	r2, #0
  401818:	f43f af4d 	beq.w	4016b6 <xQueueGenericReceive+0x12>
  40181c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401820:	b672      	cpsid	i
  401822:	f383 8811 	msr	BASEPRI, r3
  401826:	f3bf 8f6f 	isb	sy
  40182a:	f3bf 8f4f 	dsb	sy
  40182e:	b662      	cpsie	i
  401830:	e7fe      	b.n	401830 <xQueueGenericReceive+0x18c>
  401832:	bf00      	nop
  401834:	004022c9 	.word	0x004022c9
  401838:	00400e29 	.word	0x00400e29
  40183c:	00400e75 	.word	0x00400e75
  401840:	00401205 	.word	0x00401205
  401844:	00401de9 	.word	0x00401de9
  401848:	00402225 	.word	0x00402225
  40184c:	00402065 	.word	0x00402065
  401850:	004022e9 	.word	0x004022e9
  401854:	004011d9 	.word	0x004011d9
  401858:	00402459 	.word	0x00402459
  40185c:	0040216d 	.word	0x0040216d
  401860:	e000ed04 	.word	0xe000ed04
  401864:	00402201 	.word	0x00402201
  401868:	00401c59 	.word	0x00401c59

0040186c <vQueueAddToRegistry>:
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  40186c:	2300      	movs	r3, #0
  40186e:	4a08      	ldr	r2, [pc, #32]	; (401890 <vQueueAddToRegistry+0x24>)
	{
  401870:	b430      	push	{r4, r5}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  401872:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
  401876:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
  40187a:	b124      	cbz	r4, 401886 <vQueueAddToRegistry+0x1a>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  40187c:	3301      	adds	r3, #1
  40187e:	2b08      	cmp	r3, #8
  401880:	d1f7      	bne.n	401872 <vQueueAddToRegistry+0x6>
	}
  401882:	bc30      	pop	{r4, r5}
  401884:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  401886:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  40188a:	6068      	str	r0, [r5, #4]
	}
  40188c:	bc30      	pop	{r4, r5}
  40188e:	4770      	bx	lr
  401890:	20400c5c 	.word	0x20400c5c

00401894 <vQueueWaitForMessageRestricted>:
	{
  401894:	b570      	push	{r4, r5, r6, lr}
  401896:	4604      	mov	r4, r0
		prvLockQueue( pxQueue );
  401898:	4b0f      	ldr	r3, [pc, #60]	; (4018d8 <vQueueWaitForMessageRestricted+0x44>)
	{
  40189a:	460d      	mov	r5, r1
  40189c:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  40189e:	4798      	blx	r3
  4018a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4018a2:	3301      	adds	r3, #1
  4018a4:	d014      	beq.n	4018d0 <vQueueWaitForMessageRestricted+0x3c>
  4018a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4018a8:	3301      	adds	r3, #1
  4018aa:	d00e      	beq.n	4018ca <vQueueWaitForMessageRestricted+0x36>
  4018ac:	4b0b      	ldr	r3, [pc, #44]	; (4018dc <vQueueWaitForMessageRestricted+0x48>)
  4018ae:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  4018b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4018b2:	b92b      	cbnz	r3, 4018c0 <vQueueWaitForMessageRestricted+0x2c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  4018b4:	4632      	mov	r2, r6
  4018b6:	4629      	mov	r1, r5
  4018b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4018bc:	4b08      	ldr	r3, [pc, #32]	; (4018e0 <vQueueWaitForMessageRestricted+0x4c>)
  4018be:	4798      	blx	r3
		prvUnlockQueue( pxQueue );
  4018c0:	4620      	mov	r0, r4
  4018c2:	4b08      	ldr	r3, [pc, #32]	; (4018e4 <vQueueWaitForMessageRestricted+0x50>)
	}
  4018c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
  4018c8:	4718      	bx	r3
		prvLockQueue( pxQueue );
  4018ca:	2300      	movs	r3, #0
  4018cc:	64a3      	str	r3, [r4, #72]	; 0x48
  4018ce:	e7ed      	b.n	4018ac <vQueueWaitForMessageRestricted+0x18>
  4018d0:	2300      	movs	r3, #0
  4018d2:	6463      	str	r3, [r4, #68]	; 0x44
  4018d4:	e7e7      	b.n	4018a6 <vQueueWaitForMessageRestricted+0x12>
  4018d6:	bf00      	nop
  4018d8:	00400e29 	.word	0x00400e29
  4018dc:	00400e75 	.word	0x00400e75
  4018e0:	004020e9 	.word	0x004020e9
  4018e4:	00401205 	.word	0x00401205

004018e8 <prvResetNextTaskUnblockTime.part.2>:
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4018e8:	4a03      	ldr	r2, [pc, #12]	; (4018f8 <prvResetNextTaskUnblockTime.part.2+0x10>)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  4018ea:	4b04      	ldr	r3, [pc, #16]	; (4018fc <prvResetNextTaskUnblockTime.part.2+0x14>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4018ec:	6812      	ldr	r2, [r2, #0]
  4018ee:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  4018f0:	68d2      	ldr	r2, [r2, #12]
  4018f2:	6852      	ldr	r2, [r2, #4]
  4018f4:	601a      	str	r2, [r3, #0]
  4018f6:	4770      	bx	lr
  4018f8:	20400a60 	.word	0x20400a60
  4018fc:	20400b0c 	.word	0x20400b0c

00401900 <prvAddCurrentTaskToDelayedList>:
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401900:	4b0d      	ldr	r3, [pc, #52]	; (401938 <prvAddCurrentTaskToDelayedList+0x38>)
	if( xTimeToWake < xTickCount )
  401902:	4a0e      	ldr	r2, [pc, #56]	; (40193c <prvAddCurrentTaskToDelayedList+0x3c>)
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401904:	6819      	ldr	r1, [r3, #0]
	if( xTimeToWake < xTickCount )
  401906:	6812      	ldr	r2, [r2, #0]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401908:	6048      	str	r0, [r1, #4]
	if( xTimeToWake < xTickCount )
  40190a:	4290      	cmp	r0, r2
  40190c:	d30d      	bcc.n	40192a <prvAddCurrentTaskToDelayedList+0x2a>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40190e:	490c      	ldr	r1, [pc, #48]	; (401940 <prvAddCurrentTaskToDelayedList+0x40>)
  401910:	4a0c      	ldr	r2, [pc, #48]	; (401944 <prvAddCurrentTaskToDelayedList+0x44>)
{
  401912:	b510      	push	{r4, lr}
  401914:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401916:	6808      	ldr	r0, [r1, #0]
  401918:	6819      	ldr	r1, [r3, #0]
  40191a:	3104      	adds	r1, #4
  40191c:	4790      	blx	r2
		if( xTimeToWake < xNextTaskUnblockTime )
  40191e:	4b0a      	ldr	r3, [pc, #40]	; (401948 <prvAddCurrentTaskToDelayedList+0x48>)
  401920:	681a      	ldr	r2, [r3, #0]
  401922:	4294      	cmp	r4, r2
  401924:	d200      	bcs.n	401928 <prvAddCurrentTaskToDelayedList+0x28>
			xNextTaskUnblockTime = xTimeToWake;
  401926:	601c      	str	r4, [r3, #0]
  401928:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40192a:	4908      	ldr	r1, [pc, #32]	; (40194c <prvAddCurrentTaskToDelayedList+0x4c>)
  40192c:	4a05      	ldr	r2, [pc, #20]	; (401944 <prvAddCurrentTaskToDelayedList+0x44>)
  40192e:	6808      	ldr	r0, [r1, #0]
  401930:	6819      	ldr	r1, [r3, #0]
  401932:	3104      	adds	r1, #4
  401934:	4710      	bx	r2
  401936:	bf00      	nop
  401938:	20400a5c 	.word	0x20400a5c
  40193c:	20400b54 	.word	0x20400b54
  401940:	20400a60 	.word	0x20400a60
  401944:	00400d11 	.word	0x00400d11
  401948:	20400b0c 	.word	0x20400b0c
  40194c:	20400a64 	.word	0x20400a64

00401950 <xTaskGenericCreate.part.5>:
BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
  401950:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401954:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  401956:	4680      	mov	r8, r0
  401958:	460d      	mov	r5, r1
  40195a:	4692      	mov	sl, r2
  40195c:	4699      	mov	r9, r3
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40195e:	2e00      	cmp	r6, #0
  401960:	f000 8096 	beq.w	401a90 <xTaskGenericCreate.part.5+0x140>
  401964:	4c64      	ldr	r4, [pc, #400]	; (401af8 <xTaskGenericCreate.part.5+0x1a8>)
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  401966:	2058      	movs	r0, #88	; 0x58
  401968:	47a0      	blx	r4
			if( pxNewTCB != NULL )
  40196a:	4604      	mov	r4, r0
  40196c:	2800      	cmp	r0, #0
  40196e:	f000 809a 	beq.w	401aa6 <xTaskGenericCreate.part.5+0x156>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  401972:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
				pxNewTCB->pxStack = pxStack;
  401976:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  401978:	21a5      	movs	r1, #165	; 0xa5
  40197a:	4b60      	ldr	r3, [pc, #384]	; (401afc <xTaskGenericCreate.part.5+0x1ac>)
  40197c:	4652      	mov	r2, sl
  40197e:	4630      	mov	r0, r6
  401980:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  401982:	f1aa 0a04 	sub.w	sl, sl, #4
  401986:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401988:	1e6b      	subs	r3, r5, #1
  40198a:	f105 0109 	add.w	r1, r5, #9
  40198e:	f104 0533 	add.w	r5, r4, #51	; 0x33
  401992:	4482      	add	sl, r0
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  401994:	f02a 0a07 	bic.w	sl, sl, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401998:	785a      	ldrb	r2, [r3, #1]
  40199a:	f805 2f01 	strb.w	r2, [r5, #1]!
		if( pcName[ x ] == 0x00 )
  40199e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  4019a2:	b10a      	cbz	r2, 4019a8 <xTaskGenericCreate.part.5+0x58>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4019a4:	4299      	cmp	r1, r3
  4019a6:	d1f7      	bne.n	401998 <xTaskGenericCreate.part.5+0x48>
  4019a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  4019aa:	2700      	movs	r7, #0
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  4019ac:	f104 0b04 	add.w	fp, r4, #4
  4019b0:	4e53      	ldr	r6, [pc, #332]	; (401b00 <xTaskGenericCreate.part.5+0x1b0>)
  4019b2:	2d04      	cmp	r5, #4
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  4019b4:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  4019b8:	4658      	mov	r0, fp
		pxTCB->uxMutexesHeld = 0;
  4019ba:	64e7      	str	r7, [r4, #76]	; 0x4c
  4019bc:	bf28      	it	cs
  4019be:	2504      	movcs	r5, #4
	pxTCB->uxPriority = uxPriority;
  4019c0:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  4019c2:	64a5      	str	r5, [r4, #72]	; 0x48
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4019c4:	f1c5 0505 	rsb	r5, r5, #5
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  4019c8:	47b0      	blx	r6
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  4019ca:	f104 0018 	add.w	r0, r4, #24
  4019ce:	47b0      	blx	r6
		pxTCB->ulNotifiedValue = 0;
  4019d0:	6527      	str	r7, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4019d2:	4b4c      	ldr	r3, [pc, #304]	; (401b04 <xTaskGenericCreate.part.5+0x1b4>)
  4019d4:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4019d6:	61a5      	str	r5, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4019d8:	4641      	mov	r1, r8
		pxTCB->eNotifyState = eNotWaitingNotification;
  4019da:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4019de:	4650      	mov	r0, sl
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  4019e0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  4019e2:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4019e4:	4798      	blx	r3
		if( ( void * ) pxCreatedTask != NULL )
  4019e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4019e8:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  4019ea:	b103      	cbz	r3, 4019ee <xTaskGenericCreate.part.5+0x9e>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  4019ec:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
  4019ee:	4b46      	ldr	r3, [pc, #280]	; (401b08 <xTaskGenericCreate.part.5+0x1b8>)
  4019f0:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  4019f2:	4a46      	ldr	r2, [pc, #280]	; (401b0c <xTaskGenericCreate.part.5+0x1bc>)
			if( pxCurrentTCB == NULL )
  4019f4:	4e46      	ldr	r6, [pc, #280]	; (401b10 <xTaskGenericCreate.part.5+0x1c0>)
			uxCurrentNumberOfTasks++;
  4019f6:	6813      	ldr	r3, [r2, #0]
  4019f8:	3301      	adds	r3, #1
  4019fa:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4019fc:	6833      	ldr	r3, [r6, #0]
  4019fe:	2b00      	cmp	r3, #0
  401a00:	d03f      	beq.n	401a82 <xTaskGenericCreate.part.5+0x132>
				if( xSchedulerRunning == pdFALSE )
  401a02:	f8df 814c 	ldr.w	r8, [pc, #332]	; 401b50 <xTaskGenericCreate.part.5+0x200>
  401a06:	f8d8 3000 	ldr.w	r3, [r8]
  401a0a:	b92b      	cbnz	r3, 401a18 <xTaskGenericCreate.part.5+0xc8>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401a0c:	6833      	ldr	r3, [r6, #0]
  401a0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  401a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401a12:	429a      	cmp	r2, r3
  401a14:	d300      	bcc.n	401a18 <xTaskGenericCreate.part.5+0xc8>
						pxCurrentTCB = pxNewTCB;
  401a16:	6034      	str	r4, [r6, #0]
			uxTaskNumber++;
  401a18:	f8df e138 	ldr.w	lr, [pc, #312]	; 401b54 <xTaskGenericCreate.part.5+0x204>
			prvAddTaskToReadyList( pxNewTCB );
  401a1c:	2501      	movs	r5, #1
  401a1e:	f8df c138 	ldr.w	ip, [pc, #312]	; 401b58 <xTaskGenericCreate.part.5+0x208>
  401a22:	4659      	mov	r1, fp
  401a24:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401a26:	f8dc 9000 	ldr.w	r9, [ip]
			uxTaskNumber++;
  401a2a:	f8de 2000 	ldr.w	r2, [lr]
			prvAddTaskToReadyList( pxNewTCB );
  401a2e:	fa05 f300 	lsl.w	r3, r5, r0
  401a32:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401a36:	ea43 0309 	orr.w	r3, r3, r9
			uxTaskNumber++;
  401a3a:	442a      	add	r2, r5
			prvAddTaskToReadyList( pxNewTCB );
  401a3c:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 401b28 <xTaskGenericCreate.part.5+0x1d8>
			uxTaskNumber++;
  401a40:	f8ce 2000 	str.w	r2, [lr]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  401a44:	6422      	str	r2, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  401a46:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  401a4a:	4a32      	ldr	r2, [pc, #200]	; (401b14 <xTaskGenericCreate.part.5+0x1c4>)
  401a4c:	f8cc 3000 	str.w	r3, [ip]
  401a50:	4790      	blx	r2
		taskEXIT_CRITICAL();
  401a52:	4b31      	ldr	r3, [pc, #196]	; (401b18 <xTaskGenericCreate.part.5+0x1c8>)
  401a54:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  401a56:	f8d8 3000 	ldr.w	r3, [r8]
  401a5a:	b17b      	cbz	r3, 401a7c <xTaskGenericCreate.part.5+0x12c>
			if( pxCurrentTCB->uxPriority < uxPriority )
  401a5c:	6833      	ldr	r3, [r6, #0]
  401a5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  401a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401a62:	429a      	cmp	r2, r3
  401a64:	d90a      	bls.n	401a7c <xTaskGenericCreate.part.5+0x12c>
				taskYIELD_IF_USING_PREEMPTION();
  401a66:	4b2d      	ldr	r3, [pc, #180]	; (401b1c <xTaskGenericCreate.part.5+0x1cc>)
  401a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401a6c:	601a      	str	r2, [r3, #0]
  401a6e:	f3bf 8f4f 	dsb	sy
  401a72:	f3bf 8f6f 	isb	sy
  401a76:	4628      	mov	r0, r5
  401a78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( pxCurrentTCB->uxPriority < uxPriority )
  401a7c:	4628      	mov	r0, r5
}
  401a7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				pxCurrentTCB =  pxNewTCB;
  401a82:	6034      	str	r4, [r6, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401a84:	6813      	ldr	r3, [r2, #0]
  401a86:	2b01      	cmp	r3, #1
  401a88:	d014      	beq.n	401ab4 <xTaskGenericCreate.part.5+0x164>
  401a8a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 401b50 <xTaskGenericCreate.part.5+0x200>
  401a8e:	e7c3      	b.n	401a18 <xTaskGenericCreate.part.5+0xc8>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401a90:	0090      	lsls	r0, r2, #2
  401a92:	4c19      	ldr	r4, [pc, #100]	; (401af8 <xTaskGenericCreate.part.5+0x1a8>)
  401a94:	47a0      	blx	r4
		if( pxStack != NULL )
  401a96:	4606      	mov	r6, r0
  401a98:	2800      	cmp	r0, #0
  401a9a:	f47f af64 	bne.w	401966 <xTaskGenericCreate.part.5+0x16>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401a9e:	f04f 30ff 	mov.w	r0, #4294967295
  401aa2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  401aa6:	4630      	mov	r0, r6
  401aa8:	4b1d      	ldr	r3, [pc, #116]	; (401b20 <xTaskGenericCreate.part.5+0x1d0>)
  401aaa:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401aac:	f04f 30ff 	mov.w	r0, #4294967295
  401ab0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401ab4:	4d1b      	ldr	r5, [pc, #108]	; (401b24 <xTaskGenericCreate.part.5+0x1d4>)
  401ab6:	481c      	ldr	r0, [pc, #112]	; (401b28 <xTaskGenericCreate.part.5+0x1d8>)
  401ab8:	47a8      	blx	r5
  401aba:	481c      	ldr	r0, [pc, #112]	; (401b2c <xTaskGenericCreate.part.5+0x1dc>)
  401abc:	47a8      	blx	r5
  401abe:	481c      	ldr	r0, [pc, #112]	; (401b30 <xTaskGenericCreate.part.5+0x1e0>)
  401ac0:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
  401ac2:	f8df 8098 	ldr.w	r8, [pc, #152]	; 401b5c <xTaskGenericCreate.part.5+0x20c>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401ac6:	481b      	ldr	r0, [pc, #108]	; (401b34 <xTaskGenericCreate.part.5+0x1e4>)
  401ac8:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  401aca:	f8df 9094 	ldr.w	r9, [pc, #148]	; 401b60 <xTaskGenericCreate.part.5+0x210>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401ace:	481a      	ldr	r0, [pc, #104]	; (401b38 <xTaskGenericCreate.part.5+0x1e8>)
  401ad0:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
  401ad2:	4640      	mov	r0, r8
  401ad4:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  401ad6:	4648      	mov	r0, r9
  401ad8:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  401ada:	4818      	ldr	r0, [pc, #96]	; (401b3c <xTaskGenericCreate.part.5+0x1ec>)
  401adc:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
  401ade:	4818      	ldr	r0, [pc, #96]	; (401b40 <xTaskGenericCreate.part.5+0x1f0>)
  401ae0:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
  401ae2:	4818      	ldr	r0, [pc, #96]	; (401b44 <xTaskGenericCreate.part.5+0x1f4>)
  401ae4:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
  401ae6:	4a18      	ldr	r2, [pc, #96]	; (401b48 <xTaskGenericCreate.part.5+0x1f8>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401ae8:	4b18      	ldr	r3, [pc, #96]	; (401b4c <xTaskGenericCreate.part.5+0x1fc>)
	pxDelayedTaskList = &xDelayedTaskList1;
  401aea:	f8c2 8000 	str.w	r8, [r2]
  401aee:	f8df 8060 	ldr.w	r8, [pc, #96]	; 401b50 <xTaskGenericCreate.part.5+0x200>
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401af2:	f8c3 9000 	str.w	r9, [r3]
  401af6:	e78f      	b.n	401a18 <xTaskGenericCreate.part.5+0xc8>
  401af8:	00401079 	.word	0x00401079
  401afc:	00404399 	.word	0x00404399
  401b00:	00400cf1 	.word	0x00400cf1
  401b04:	00400dd9 	.word	0x00400dd9
  401b08:	00400e29 	.word	0x00400e29
  401b0c:	20400acc 	.word	0x20400acc
  401b10:	20400a5c 	.word	0x20400a5c
  401b14:	00400cf9 	.word	0x00400cf9
  401b18:	00400e75 	.word	0x00400e75
  401b1c:	e000ed04 	.word	0xe000ed04
  401b20:	004010ad 	.word	0x004010ad
  401b24:	00400cd9 	.word	0x00400cd9
  401b28:	20400a68 	.word	0x20400a68
  401b2c:	20400a7c 	.word	0x20400a7c
  401b30:	20400a90 	.word	0x20400a90
  401b34:	20400aa4 	.word	0x20400aa4
  401b38:	20400ab8 	.word	0x20400ab8
  401b3c:	20400b14 	.word	0x20400b14
  401b40:	20400b40 	.word	0x20400b40
  401b44:	20400b2c 	.word	0x20400b2c
  401b48:	20400a60 	.word	0x20400a60
  401b4c:	20400a64 	.word	0x20400a64
  401b50:	20400b28 	.word	0x20400b28
  401b54:	20400ad8 	.word	0x20400ad8
  401b58:	20400ae0 	.word	0x20400ae0
  401b5c:	20400ae4 	.word	0x20400ae4
  401b60:	20400af8 	.word	0x20400af8

00401b64 <prvTaskIsTaskSuspended.part.0>:
  401b64:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b68:	b672      	cpsid	i
  401b6a:	f383 8811 	msr	BASEPRI, r3
  401b6e:	f3bf 8f6f 	isb	sy
  401b72:	f3bf 8f4f 	dsb	sy
  401b76:	b662      	cpsie	i
  401b78:	e7fe      	b.n	401b78 <prvTaskIsTaskSuspended.part.0+0x14>
  401b7a:	bf00      	nop

00401b7c <xTaskGenericCreate>:
{
  401b7c:	b470      	push	{r4, r5, r6}
  401b7e:	ac03      	add	r4, sp, #12
  401b80:	cc70      	ldmia	r4, {r4, r5, r6}
	configASSERT( pxTaskCode );
  401b82:	b160      	cbz	r0, 401b9e <xTaskGenericCreate+0x22>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  401b84:	2c04      	cmp	r4, #4
  401b86:	d915      	bls.n	401bb4 <xTaskGenericCreate+0x38>
  401b88:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b8c:	b672      	cpsid	i
  401b8e:	f383 8811 	msr	BASEPRI, r3
  401b92:	f3bf 8f6f 	isb	sy
  401b96:	f3bf 8f4f 	dsb	sy
  401b9a:	b662      	cpsie	i
  401b9c:	e7fe      	b.n	401b9c <xTaskGenericCreate+0x20>
  401b9e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ba2:	b672      	cpsid	i
  401ba4:	f383 8811 	msr	BASEPRI, r3
  401ba8:	f3bf 8f6f 	isb	sy
  401bac:	f3bf 8f4f 	dsb	sy
  401bb0:	b662      	cpsie	i
  401bb2:	e7fe      	b.n	401bb2 <xTaskGenericCreate+0x36>
  401bb4:	9403      	str	r4, [sp, #12]
  401bb6:	4c03      	ldr	r4, [pc, #12]	; (401bc4 <xTaskGenericCreate+0x48>)
  401bb8:	9605      	str	r6, [sp, #20]
  401bba:	9504      	str	r5, [sp, #16]
  401bbc:	46a4      	mov	ip, r4
}
  401bbe:	bc70      	pop	{r4, r5, r6}
  401bc0:	4760      	bx	ip
  401bc2:	bf00      	nop
  401bc4:	00401951 	.word	0x00401951

00401bc8 <vTaskStartScheduler>:
{
  401bc8:	b570      	push	{r4, r5, r6, lr}
  401bca:	2400      	movs	r4, #0
  401bcc:	b084      	sub	sp, #16
  401bce:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401bd2:	4919      	ldr	r1, [pc, #100]	; (401c38 <vTaskStartScheduler+0x70>)
  401bd4:	9402      	str	r4, [sp, #8]
  401bd6:	4623      	mov	r3, r4
  401bd8:	9401      	str	r4, [sp, #4]
  401bda:	9400      	str	r4, [sp, #0]
  401bdc:	4817      	ldr	r0, [pc, #92]	; (401c3c <vTaskStartScheduler+0x74>)
  401bde:	4d18      	ldr	r5, [pc, #96]	; (401c40 <vTaskStartScheduler+0x78>)
  401be0:	47a8      	blx	r5
		if( xReturn == pdPASS )
  401be2:	2801      	cmp	r0, #1
  401be4:	d00d      	beq.n	401c02 <vTaskStartScheduler+0x3a>
		configASSERT( xReturn );
  401be6:	b950      	cbnz	r0, 401bfe <vTaskStartScheduler+0x36>
  401be8:	f04f 0380 	mov.w	r3, #128	; 0x80
  401bec:	b672      	cpsid	i
  401bee:	f383 8811 	msr	BASEPRI, r3
  401bf2:	f3bf 8f6f 	isb	sy
  401bf6:	f3bf 8f4f 	dsb	sy
  401bfa:	b662      	cpsie	i
  401bfc:	e7fe      	b.n	401bfc <vTaskStartScheduler+0x34>
}
  401bfe:	b004      	add	sp, #16
  401c00:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xTimerCreateTimerTask();
  401c02:	4b10      	ldr	r3, [pc, #64]	; (401c44 <vTaskStartScheduler+0x7c>)
  401c04:	4798      	blx	r3
	if( xReturn == pdPASS )
  401c06:	2801      	cmp	r0, #1
  401c08:	d1ed      	bne.n	401be6 <vTaskStartScheduler+0x1e>
  401c0a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c0e:	b672      	cpsid	i
  401c10:	f383 8811 	msr	BASEPRI, r3
  401c14:	f3bf 8f6f 	isb	sy
  401c18:	f3bf 8f4f 	dsb	sy
  401c1c:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  401c1e:	4d0a      	ldr	r5, [pc, #40]	; (401c48 <vTaskStartScheduler+0x80>)
  401c20:	f04f 36ff 	mov.w	r6, #4294967295
		xSchedulerRunning = pdTRUE;
  401c24:	4909      	ldr	r1, [pc, #36]	; (401c4c <vTaskStartScheduler+0x84>)
		xTickCount = ( TickType_t ) 0U;
  401c26:	4a0a      	ldr	r2, [pc, #40]	; (401c50 <vTaskStartScheduler+0x88>)
		if( xPortStartScheduler() != pdFALSE )
  401c28:	4b0a      	ldr	r3, [pc, #40]	; (401c54 <vTaskStartScheduler+0x8c>)
		xNextTaskUnblockTime = portMAX_DELAY;
  401c2a:	602e      	str	r6, [r5, #0]
		xSchedulerRunning = pdTRUE;
  401c2c:	6008      	str	r0, [r1, #0]
		xTickCount = ( TickType_t ) 0U;
  401c2e:	6014      	str	r4, [r2, #0]
}
  401c30:	b004      	add	sp, #16
  401c32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
  401c36:	4718      	bx	r3
  401c38:	00406c24 	.word	0x00406c24
  401c3c:	00401f09 	.word	0x00401f09
  401c40:	00401951 	.word	0x00401951
  401c44:	00402549 	.word	0x00402549
  401c48:	20400b0c 	.word	0x20400b0c
  401c4c:	20400b28 	.word	0x20400b28
  401c50:	20400b54 	.word	0x20400b54
  401c54:	00400f5d 	.word	0x00400f5d

00401c58 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  401c58:	4a02      	ldr	r2, [pc, #8]	; (401c64 <vTaskSuspendAll+0xc>)
  401c5a:	6813      	ldr	r3, [r2, #0]
  401c5c:	3301      	adds	r3, #1
  401c5e:	6013      	str	r3, [r2, #0]
  401c60:	4770      	bx	lr
  401c62:	bf00      	nop
  401c64:	20400ad4 	.word	0x20400ad4

00401c68 <xTaskGetTickCount>:
		xTicks = xTickCount;
  401c68:	4b01      	ldr	r3, [pc, #4]	; (401c70 <xTaskGetTickCount+0x8>)
  401c6a:	6818      	ldr	r0, [r3, #0]
}
  401c6c:	4770      	bx	lr
  401c6e:	bf00      	nop
  401c70:	20400b54 	.word	0x20400b54

00401c74 <xTaskIncrementTick>:
{
  401c74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401c78:	4b4c      	ldr	r3, [pc, #304]	; (401dac <xTaskIncrementTick+0x138>)
  401c7a:	681b      	ldr	r3, [r3, #0]
  401c7c:	2b00      	cmp	r3, #0
  401c7e:	d170      	bne.n	401d62 <xTaskIncrementTick+0xee>
		++xTickCount;
  401c80:	4b4b      	ldr	r3, [pc, #300]	; (401db0 <xTaskIncrementTick+0x13c>)
  401c82:	681a      	ldr	r2, [r3, #0]
  401c84:	3201      	adds	r2, #1
  401c86:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  401c88:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  401c8a:	2e00      	cmp	r6, #0
  401c8c:	d05a      	beq.n	401d44 <xTaskIncrementTick+0xd0>
  401c8e:	f8df a150 	ldr.w	sl, [pc, #336]	; 401de0 <xTaskIncrementTick+0x16c>
			if( xConstTickCount >= xNextTaskUnblockTime )
  401c92:	f8da 2000 	ldr.w	r2, [sl]
  401c96:	2400      	movs	r4, #0
  401c98:	4296      	cmp	r6, r2
  401c9a:	d36a      	bcc.n	401d72 <xTaskIncrementTick+0xfe>
  401c9c:	4d45      	ldr	r5, [pc, #276]	; (401db4 <xTaskIncrementTick+0x140>)
  401c9e:	4f46      	ldr	r7, [pc, #280]	; (401db8 <xTaskIncrementTick+0x144>)
  401ca0:	f8df 8140 	ldr.w	r8, [pc, #320]	; 401de4 <xTaskIncrementTick+0x170>
  401ca4:	e02f      	b.n	401d06 <xTaskIncrementTick+0x92>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401ca6:	682a      	ldr	r2, [r5, #0]
  401ca8:	68d2      	ldr	r2, [r2, #12]
  401caa:	f8d2 900c 	ldr.w	r9, [r2, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401cae:	f8d9 1004 	ldr.w	r1, [r9, #4]
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401cb2:	f109 0b04 	add.w	fp, r9, #4
						if( xConstTickCount < xItemValue )
  401cb6:	428e      	cmp	r6, r1
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401cb8:	4658      	mov	r0, fp
						if( xConstTickCount < xItemValue )
  401cba:	d36d      	bcc.n	401d98 <xTaskIncrementTick+0x124>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401cbc:	4b3f      	ldr	r3, [pc, #252]	; (401dbc <xTaskIncrementTick+0x148>)
  401cbe:	4798      	blx	r3
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401cc0:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401cc4:	f109 0018 	add.w	r0, r9, #24
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401cc8:	b109      	cbz	r1, 401cce <xTaskIncrementTick+0x5a>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401cca:	4b3c      	ldr	r3, [pc, #240]	; (401dbc <xTaskIncrementTick+0x148>)
  401ccc:	4798      	blx	r3
						prvAddTaskToReadyList( pxTCB );
  401cce:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
  401cd2:	f04f 0e01 	mov.w	lr, #1
  401cd6:	4b3a      	ldr	r3, [pc, #232]	; (401dc0 <xTaskIncrementTick+0x14c>)
  401cd8:	4659      	mov	r1, fp
  401cda:	fa0e fe00 	lsl.w	lr, lr, r0
  401cde:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401ce2:	681b      	ldr	r3, [r3, #0]
  401ce4:	eb07 0080 	add.w	r0, r7, r0, lsl #2
  401ce8:	ea4e 0e03 	orr.w	lr, lr, r3
  401cec:	4b34      	ldr	r3, [pc, #208]	; (401dc0 <xTaskIncrementTick+0x14c>)
  401cee:	f8c3 e000 	str.w	lr, [r3]
  401cf2:	4b34      	ldr	r3, [pc, #208]	; (401dc4 <xTaskIncrementTick+0x150>)
  401cf4:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401cf6:	f8d8 0000 	ldr.w	r0, [r8]
  401cfa:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
  401cfe:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  401d00:	4291      	cmp	r1, r2
  401d02:	bf28      	it	cs
  401d04:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401d06:	682a      	ldr	r2, [r5, #0]
  401d08:	6812      	ldr	r2, [r2, #0]
  401d0a:	2a00      	cmp	r2, #0
  401d0c:	d1cb      	bne.n	401ca6 <xTaskIncrementTick+0x32>
						xNextTaskUnblockTime = portMAX_DELAY;
  401d0e:	f04f 32ff 	mov.w	r2, #4294967295
  401d12:	f8ca 2000 	str.w	r2, [sl]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401d16:	f8d8 3000 	ldr.w	r3, [r8]
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  401d1a:	4a2b      	ldr	r2, [pc, #172]	; (401dc8 <xTaskIncrementTick+0x154>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  401d1e:	6812      	ldr	r2, [r2, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401d20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401d24:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  401d28:	2b02      	cmp	r3, #2
  401d2a:	bf28      	it	cs
  401d2c:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  401d2e:	b90a      	cbnz	r2, 401d34 <xTaskIncrementTick+0xc0>
				vApplicationTickHook();
  401d30:	4b26      	ldr	r3, [pc, #152]	; (401dcc <xTaskIncrementTick+0x158>)
  401d32:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  401d34:	4b26      	ldr	r3, [pc, #152]	; (401dd0 <xTaskIncrementTick+0x15c>)
  401d36:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  401d38:	2b00      	cmp	r3, #0
  401d3a:	bf18      	it	ne
  401d3c:	2401      	movne	r4, #1
}
  401d3e:	4620      	mov	r0, r4
  401d40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				taskSWITCH_DELAYED_LISTS();
  401d44:	4d1b      	ldr	r5, [pc, #108]	; (401db4 <xTaskIncrementTick+0x140>)
  401d46:	682b      	ldr	r3, [r5, #0]
  401d48:	681b      	ldr	r3, [r3, #0]
  401d4a:	b1b3      	cbz	r3, 401d7a <xTaskIncrementTick+0x106>
  401d4c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d50:	b672      	cpsid	i
  401d52:	f383 8811 	msr	BASEPRI, r3
  401d56:	f3bf 8f6f 	isb	sy
  401d5a:	f3bf 8f4f 	dsb	sy
  401d5e:	b662      	cpsie	i
  401d60:	e7fe      	b.n	401d60 <xTaskIncrementTick+0xec>
		++uxPendedTicks;
  401d62:	4a19      	ldr	r2, [pc, #100]	; (401dc8 <xTaskIncrementTick+0x154>)
BaseType_t xSwitchRequired = pdFALSE;
  401d64:	2400      	movs	r4, #0
			vApplicationTickHook();
  401d66:	4919      	ldr	r1, [pc, #100]	; (401dcc <xTaskIncrementTick+0x158>)
		++uxPendedTicks;
  401d68:	6813      	ldr	r3, [r2, #0]
  401d6a:	3301      	adds	r3, #1
  401d6c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  401d6e:	4788      	blx	r1
  401d70:	e7e0      	b.n	401d34 <xTaskIncrementTick+0xc0>
  401d72:	4f11      	ldr	r7, [pc, #68]	; (401db8 <xTaskIncrementTick+0x144>)
  401d74:	f8df 806c 	ldr.w	r8, [pc, #108]	; 401de4 <xTaskIncrementTick+0x170>
  401d78:	e7cd      	b.n	401d16 <xTaskIncrementTick+0xa2>
				taskSWITCH_DELAYED_LISTS();
  401d7a:	4b16      	ldr	r3, [pc, #88]	; (401dd4 <xTaskIncrementTick+0x160>)
  401d7c:	6829      	ldr	r1, [r5, #0]
  401d7e:	4a16      	ldr	r2, [pc, #88]	; (401dd8 <xTaskIncrementTick+0x164>)
  401d80:	6818      	ldr	r0, [r3, #0]
  401d82:	6028      	str	r0, [r5, #0]
  401d84:	6019      	str	r1, [r3, #0]
  401d86:	6813      	ldr	r3, [r2, #0]
  401d88:	3301      	adds	r3, #1
  401d8a:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401d8c:	682b      	ldr	r3, [r5, #0]
  401d8e:	681b      	ldr	r3, [r3, #0]
  401d90:	b12b      	cbz	r3, 401d9e <xTaskIncrementTick+0x12a>
  401d92:	4b12      	ldr	r3, [pc, #72]	; (401ddc <xTaskIncrementTick+0x168>)
  401d94:	4798      	blx	r3
  401d96:	e77a      	b.n	401c8e <xTaskIncrementTick+0x1a>
							xNextTaskUnblockTime = xItemValue;
  401d98:	f8ca 1000 	str.w	r1, [sl]
							break;
  401d9c:	e7bb      	b.n	401d16 <xTaskIncrementTick+0xa2>
		xNextTaskUnblockTime = portMAX_DELAY;
  401d9e:	f8df a040 	ldr.w	sl, [pc, #64]	; 401de0 <xTaskIncrementTick+0x16c>
  401da2:	f04f 32ff 	mov.w	r2, #4294967295
  401da6:	f8ca 2000 	str.w	r2, [sl]
  401daa:	e772      	b.n	401c92 <xTaskIncrementTick+0x1e>
  401dac:	20400ad4 	.word	0x20400ad4
  401db0:	20400b54 	.word	0x20400b54
  401db4:	20400a60 	.word	0x20400a60
  401db8:	20400a68 	.word	0x20400a68
  401dbc:	00400d45 	.word	0x00400d45
  401dc0:	20400ae0 	.word	0x20400ae0
  401dc4:	00400cf9 	.word	0x00400cf9
  401dc8:	20400ad0 	.word	0x20400ad0
  401dcc:	00402cd9 	.word	0x00402cd9
  401dd0:	20400b58 	.word	0x20400b58
  401dd4:	20400a64 	.word	0x20400a64
  401dd8:	20400b10 	.word	0x20400b10
  401ddc:	004018e9 	.word	0x004018e9
  401de0:	20400b0c 	.word	0x20400b0c
  401de4:	20400a5c 	.word	0x20400a5c

00401de8 <xTaskResumeAll>:
{
  401de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
  401dec:	4c38      	ldr	r4, [pc, #224]	; (401ed0 <xTaskResumeAll+0xe8>)
{
  401dee:	b083      	sub	sp, #12
	configASSERT( uxSchedulerSuspended );
  401df0:	6823      	ldr	r3, [r4, #0]
  401df2:	b953      	cbnz	r3, 401e0a <xTaskResumeAll+0x22>
  401df4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401df8:	b672      	cpsid	i
  401dfa:	f383 8811 	msr	BASEPRI, r3
  401dfe:	f3bf 8f6f 	isb	sy
  401e02:	f3bf 8f4f 	dsb	sy
  401e06:	b662      	cpsie	i
  401e08:	e7fe      	b.n	401e08 <xTaskResumeAll+0x20>
	taskENTER_CRITICAL();
  401e0a:	4b32      	ldr	r3, [pc, #200]	; (401ed4 <xTaskResumeAll+0xec>)
  401e0c:	4798      	blx	r3
		--uxSchedulerSuspended;
  401e0e:	6823      	ldr	r3, [r4, #0]
  401e10:	3b01      	subs	r3, #1
  401e12:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401e14:	6823      	ldr	r3, [r4, #0]
  401e16:	2b00      	cmp	r3, #0
  401e18:	d137      	bne.n	401e8a <xTaskResumeAll+0xa2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401e1a:	4b2f      	ldr	r3, [pc, #188]	; (401ed8 <xTaskResumeAll+0xf0>)
  401e1c:	681b      	ldr	r3, [r3, #0]
  401e1e:	2b00      	cmp	r3, #0
  401e20:	d033      	beq.n	401e8a <xTaskResumeAll+0xa2>
  401e22:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 401efc <xTaskResumeAll+0x114>
  401e26:	4b2d      	ldr	r3, [pc, #180]	; (401edc <xTaskResumeAll+0xf4>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401e28:	4e2d      	ldr	r6, [pc, #180]	; (401ee0 <xTaskResumeAll+0xf8>)
					prvAddTaskToReadyList( pxTCB );
  401e2a:	4d2e      	ldr	r5, [pc, #184]	; (401ee4 <xTaskResumeAll+0xfc>)
  401e2c:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 401f00 <xTaskResumeAll+0x118>
  401e30:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 401f04 <xTaskResumeAll+0x11c>
  401e34:	e01e      	b.n	401e74 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  401e36:	68da      	ldr	r2, [r3, #12]
  401e38:	9301      	str	r3, [sp, #4]
  401e3a:	68d4      	ldr	r4, [r2, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401e3c:	f104 0804 	add.w	r8, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401e40:	f104 0018 	add.w	r0, r4, #24
  401e44:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401e46:	4640      	mov	r0, r8
  401e48:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  401e4a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401e4c:	f8d5 e000 	ldr.w	lr, [r5]
  401e50:	4641      	mov	r1, r8
  401e52:	fa07 f200 	lsl.w	r2, r7, r0
  401e56:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401e5a:	ea42 020e 	orr.w	r2, r2, lr
  401e5e:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
  401e62:	602a      	str	r2, [r5, #0]
  401e64:	47c8      	blx	r9
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401e66:	4a20      	ldr	r2, [pc, #128]	; (401ee8 <xTaskResumeAll+0x100>)
  401e68:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  401e6a:	6812      	ldr	r2, [r2, #0]
  401e6c:	9b01      	ldr	r3, [sp, #4]
  401e6e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  401e70:	4291      	cmp	r1, r2
  401e72:	d211      	bcs.n	401e98 <xTaskResumeAll+0xb0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401e74:	681a      	ldr	r2, [r3, #0]
					prvAddTaskToReadyList( pxTCB );
  401e76:	2701      	movs	r7, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401e78:	2a00      	cmp	r2, #0
  401e7a:	d1dc      	bne.n	401e36 <xTaskResumeAll+0x4e>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  401e7c:	4c1b      	ldr	r4, [pc, #108]	; (401eec <xTaskResumeAll+0x104>)
  401e7e:	6823      	ldr	r3, [r4, #0]
  401e80:	b96b      	cbnz	r3, 401e9e <xTaskResumeAll+0xb6>
				if( xYieldPending == pdTRUE )
  401e82:	f8db 4000 	ldr.w	r4, [fp]
  401e86:	2c01      	cmp	r4, #1
  401e88:	d019      	beq.n	401ebe <xTaskResumeAll+0xd6>
BaseType_t xAlreadyYielded = pdFALSE;
  401e8a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  401e8c:	4b18      	ldr	r3, [pc, #96]	; (401ef0 <xTaskResumeAll+0x108>)
  401e8e:	4798      	blx	r3
}
  401e90:	4620      	mov	r0, r4
  401e92:	b003      	add	sp, #12
  401e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						xYieldPending = pdTRUE;
  401e98:	f8cb 7000 	str.w	r7, [fp]
  401e9c:	e7ea      	b.n	401e74 <xTaskResumeAll+0x8c>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401e9e:	6823      	ldr	r3, [r4, #0]
  401ea0:	2b00      	cmp	r3, #0
  401ea2:	d0ee      	beq.n	401e82 <xTaskResumeAll+0x9a>
  401ea4:	4e13      	ldr	r6, [pc, #76]	; (401ef4 <xTaskResumeAll+0x10c>)
							xYieldPending = pdTRUE;
  401ea6:	2501      	movs	r5, #1
						if( xTaskIncrementTick() != pdFALSE )
  401ea8:	47b0      	blx	r6
  401eaa:	b108      	cbz	r0, 401eb0 <xTaskResumeAll+0xc8>
							xYieldPending = pdTRUE;
  401eac:	f8cb 5000 	str.w	r5, [fp]
						--uxPendedTicks;
  401eb0:	6823      	ldr	r3, [r4, #0]
  401eb2:	3b01      	subs	r3, #1
  401eb4:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401eb6:	6823      	ldr	r3, [r4, #0]
  401eb8:	2b00      	cmp	r3, #0
  401eba:	d1f5      	bne.n	401ea8 <xTaskResumeAll+0xc0>
  401ebc:	e7e1      	b.n	401e82 <xTaskResumeAll+0x9a>
					taskYIELD_IF_USING_PREEMPTION();
  401ebe:	4b0e      	ldr	r3, [pc, #56]	; (401ef8 <xTaskResumeAll+0x110>)
  401ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401ec4:	601a      	str	r2, [r3, #0]
  401ec6:	f3bf 8f4f 	dsb	sy
  401eca:	f3bf 8f6f 	isb	sy
  401ece:	e7dd      	b.n	401e8c <xTaskResumeAll+0xa4>
  401ed0:	20400ad4 	.word	0x20400ad4
  401ed4:	00400e29 	.word	0x00400e29
  401ed8:	20400acc 	.word	0x20400acc
  401edc:	20400b14 	.word	0x20400b14
  401ee0:	00400d45 	.word	0x00400d45
  401ee4:	20400ae0 	.word	0x20400ae0
  401ee8:	20400a5c 	.word	0x20400a5c
  401eec:	20400ad0 	.word	0x20400ad0
  401ef0:	00400e75 	.word	0x00400e75
  401ef4:	00401c75 	.word	0x00401c75
  401ef8:	e000ed04 	.word	0xe000ed04
  401efc:	20400b58 	.word	0x20400b58
  401f00:	20400a68 	.word	0x20400a68
  401f04:	00400cf9 	.word	0x00400cf9

00401f08 <prvIdleTask>:
{
  401f08:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
  401f0c:	4c1e      	ldr	r4, [pc, #120]	; (401f88 <prvIdleTask+0x80>)
  401f0e:	4e1f      	ldr	r6, [pc, #124]	; (401f8c <prvIdleTask+0x84>)
  401f10:	4f1f      	ldr	r7, [pc, #124]	; (401f90 <prvIdleTask+0x88>)
  401f12:	f8df 9094 	ldr.w	r9, [pc, #148]	; 401fa8 <prvIdleTask+0xa0>
  401f16:	f8df 8094 	ldr.w	r8, [pc, #148]	; 401fac <prvIdleTask+0xa4>
  401f1a:	4d1e      	ldr	r5, [pc, #120]	; (401f94 <prvIdleTask+0x8c>)
  401f1c:	f8df a090 	ldr.w	sl, [pc, #144]	; 401fb0 <prvIdleTask+0xa8>
  401f20:	e008      	b.n	401f34 <prvIdleTask+0x2c>
	++uxSchedulerSuspended;
  401f22:	6823      	ldr	r3, [r4, #0]
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401f24:	f8d6 b000 	ldr.w	fp, [r6]
	++uxSchedulerSuspended;
  401f28:	3301      	adds	r3, #1
  401f2a:	6023      	str	r3, [r4, #0]
			( void ) xTaskResumeAll();
  401f2c:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  401f2e:	f1bb 0f00 	cmp.w	fp, #0
  401f32:	d10f      	bne.n	401f54 <prvIdleTask+0x4c>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401f34:	682b      	ldr	r3, [r5, #0]
  401f36:	2b00      	cmp	r3, #0
  401f38:	d1f3      	bne.n	401f22 <prvIdleTask+0x1a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  401f3a:	f8da 3000 	ldr.w	r3, [sl]
  401f3e:	2b01      	cmp	r3, #1
  401f40:	d9f8      	bls.n	401f34 <prvIdleTask+0x2c>
				taskYIELD();
  401f42:	4b15      	ldr	r3, [pc, #84]	; (401f98 <prvIdleTask+0x90>)
  401f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401f48:	601a      	str	r2, [r3, #0]
  401f4a:	f3bf 8f4f 	dsb	sy
  401f4e:	f3bf 8f6f 	isb	sy
  401f52:	e7ef      	b.n	401f34 <prvIdleTask+0x2c>
				taskENTER_CRITICAL();
  401f54:	4b11      	ldr	r3, [pc, #68]	; (401f9c <prvIdleTask+0x94>)
  401f56:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401f58:	68f3      	ldr	r3, [r6, #12]
  401f5a:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401f5e:	4b10      	ldr	r3, [pc, #64]	; (401fa0 <prvIdleTask+0x98>)
  401f60:	f10b 0004 	add.w	r0, fp, #4
  401f64:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  401f66:	f8d9 3000 	ldr.w	r3, [r9]
  401f6a:	3b01      	subs	r3, #1
  401f6c:	f8c9 3000 	str.w	r3, [r9]
					--uxTasksDeleted;
  401f70:	682b      	ldr	r3, [r5, #0]
  401f72:	3b01      	subs	r3, #1
  401f74:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  401f76:	4b0b      	ldr	r3, [pc, #44]	; (401fa4 <prvIdleTask+0x9c>)
  401f78:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  401f7a:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
  401f7e:	47c0      	blx	r8
		vPortFree( pxTCB );
  401f80:	4658      	mov	r0, fp
  401f82:	47c0      	blx	r8
  401f84:	e7d6      	b.n	401f34 <prvIdleTask+0x2c>
  401f86:	bf00      	nop
  401f88:	20400ad4 	.word	0x20400ad4
  401f8c:	20400b40 	.word	0x20400b40
  401f90:	00401de9 	.word	0x00401de9
  401f94:	20400adc 	.word	0x20400adc
  401f98:	e000ed04 	.word	0xe000ed04
  401f9c:	00400e29 	.word	0x00400e29
  401fa0:	00400d45 	.word	0x00400d45
  401fa4:	00400e75 	.word	0x00400e75
  401fa8:	20400acc 	.word	0x20400acc
  401fac:	004010ad 	.word	0x004010ad
  401fb0:	20400a68 	.word	0x20400a68

00401fb4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  401fb4:	4b25      	ldr	r3, [pc, #148]	; (40204c <vTaskSwitchContext+0x98>)
  401fb6:	681b      	ldr	r3, [r3, #0]
  401fb8:	2b00      	cmp	r3, #0
  401fba:	d135      	bne.n	402028 <vTaskSwitchContext+0x74>
		xYieldPending = pdFALSE;
  401fbc:	4a24      	ldr	r2, [pc, #144]	; (402050 <vTaskSwitchContext+0x9c>)
{
  401fbe:	b510      	push	{r4, lr}
		taskCHECK_FOR_STACK_OVERFLOW();
  401fc0:	4c24      	ldr	r4, [pc, #144]	; (402054 <vTaskSwitchContext+0xa0>)
		xYieldPending = pdFALSE;
  401fc2:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  401fc4:	6823      	ldr	r3, [r4, #0]
  401fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401fc8:	681a      	ldr	r2, [r3, #0]
  401fca:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401fce:	d103      	bne.n	401fd8 <vTaskSwitchContext+0x24>
  401fd0:	685a      	ldr	r2, [r3, #4]
  401fd2:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401fd6:	d02b      	beq.n	402030 <vTaskSwitchContext+0x7c>
  401fd8:	6820      	ldr	r0, [r4, #0]
  401fda:	6821      	ldr	r1, [r4, #0]
  401fdc:	4b1e      	ldr	r3, [pc, #120]	; (402058 <vTaskSwitchContext+0xa4>)
  401fde:	3134      	adds	r1, #52	; 0x34
  401fe0:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401fe2:	4b1e      	ldr	r3, [pc, #120]	; (40205c <vTaskSwitchContext+0xa8>)
  401fe4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  401fe6:	fab3 f383 	clz	r3, r3
  401fea:	b2db      	uxtb	r3, r3
  401fec:	4a1c      	ldr	r2, [pc, #112]	; (402060 <vTaskSwitchContext+0xac>)
  401fee:	f1c3 031f 	rsb	r3, r3, #31
  401ff2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401ff6:	009b      	lsls	r3, r3, #2
  401ff8:	58d0      	ldr	r0, [r2, r3]
  401ffa:	18d1      	adds	r1, r2, r3
  401ffc:	b950      	cbnz	r0, 402014 <vTaskSwitchContext+0x60>
	__asm volatile
  401ffe:	f04f 0380 	mov.w	r3, #128	; 0x80
  402002:	b672      	cpsid	i
  402004:	f383 8811 	msr	BASEPRI, r3
  402008:	f3bf 8f6f 	isb	sy
  40200c:	f3bf 8f4f 	dsb	sy
  402010:	b662      	cpsie	i
  402012:	e7fe      	b.n	402012 <vTaskSwitchContext+0x5e>
  402014:	3308      	adds	r3, #8
  402016:	6848      	ldr	r0, [r1, #4]
  402018:	441a      	add	r2, r3
  40201a:	6843      	ldr	r3, [r0, #4]
  40201c:	4293      	cmp	r3, r2
  40201e:	604b      	str	r3, [r1, #4]
  402020:	d00f      	beq.n	402042 <vTaskSwitchContext+0x8e>
  402022:	68db      	ldr	r3, [r3, #12]
  402024:	6023      	str	r3, [r4, #0]
  402026:	bd10      	pop	{r4, pc}
		xYieldPending = pdTRUE;
  402028:	4b09      	ldr	r3, [pc, #36]	; (402050 <vTaskSwitchContext+0x9c>)
  40202a:	2201      	movs	r2, #1
  40202c:	601a      	str	r2, [r3, #0]
  40202e:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  402030:	689a      	ldr	r2, [r3, #8]
  402032:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402036:	d1cf      	bne.n	401fd8 <vTaskSwitchContext+0x24>
  402038:	68db      	ldr	r3, [r3, #12]
  40203a:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  40203e:	d1cb      	bne.n	401fd8 <vTaskSwitchContext+0x24>
  402040:	e7cf      	b.n	401fe2 <vTaskSwitchContext+0x2e>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402042:	685b      	ldr	r3, [r3, #4]
  402044:	604b      	str	r3, [r1, #4]
  402046:	68db      	ldr	r3, [r3, #12]
  402048:	6023      	str	r3, [r4, #0]
  40204a:	bd10      	pop	{r4, pc}
  40204c:	20400ad4 	.word	0x20400ad4
  402050:	20400b58 	.word	0x20400b58
  402054:	20400a5c 	.word	0x20400a5c
  402058:	00402cc1 	.word	0x00402cc1
  40205c:	20400ae0 	.word	0x20400ae0
  402060:	20400a68 	.word	0x20400a68

00402064 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
  402064:	b1e8      	cbz	r0, 4020a2 <vTaskPlaceOnEventList+0x3e>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402066:	4b18      	ldr	r3, [pc, #96]	; (4020c8 <vTaskPlaceOnEventList+0x64>)
{
  402068:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40206a:	4d18      	ldr	r5, [pc, #96]	; (4020cc <vTaskPlaceOnEventList+0x68>)
  40206c:	460c      	mov	r4, r1
  40206e:	6829      	ldr	r1, [r5, #0]
  402070:	3118      	adds	r1, #24
  402072:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402074:	6828      	ldr	r0, [r5, #0]
  402076:	4b16      	ldr	r3, [pc, #88]	; (4020d0 <vTaskPlaceOnEventList+0x6c>)
  402078:	3004      	adds	r0, #4
  40207a:	4798      	blx	r3
  40207c:	b940      	cbnz	r0, 402090 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40207e:	682b      	ldr	r3, [r5, #0]
  402080:	2201      	movs	r2, #1
  402082:	4914      	ldr	r1, [pc, #80]	; (4020d4 <vTaskPlaceOnEventList+0x70>)
  402084:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402086:	680b      	ldr	r3, [r1, #0]
  402088:	4082      	lsls	r2, r0
  40208a:	ea23 0302 	bic.w	r3, r3, r2
  40208e:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  402090:	1c63      	adds	r3, r4, #1
  402092:	d011      	beq.n	4020b8 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  402094:	4a10      	ldr	r2, [pc, #64]	; (4020d8 <vTaskPlaceOnEventList+0x74>)
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  402096:	4b11      	ldr	r3, [pc, #68]	; (4020dc <vTaskPlaceOnEventList+0x78>)
			xTimeToWake = xTickCount + xTicksToWait;
  402098:	6810      	ldr	r0, [r2, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  40209a:	4420      	add	r0, r4
}
  40209c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  4020a0:	4718      	bx	r3
  4020a2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020a6:	b672      	cpsid	i
  4020a8:	f383 8811 	msr	BASEPRI, r3
  4020ac:	f3bf 8f6f 	isb	sy
  4020b0:	f3bf 8f4f 	dsb	sy
  4020b4:	b662      	cpsie	i
  4020b6:	e7fe      	b.n	4020b6 <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4020b8:	6829      	ldr	r1, [r5, #0]
  4020ba:	4809      	ldr	r0, [pc, #36]	; (4020e0 <vTaskPlaceOnEventList+0x7c>)
  4020bc:	3104      	adds	r1, #4
  4020be:	4b09      	ldr	r3, [pc, #36]	; (4020e4 <vTaskPlaceOnEventList+0x80>)
}
  4020c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4020c4:	4718      	bx	r3
  4020c6:	bf00      	nop
  4020c8:	00400d11 	.word	0x00400d11
  4020cc:	20400a5c 	.word	0x20400a5c
  4020d0:	00400d45 	.word	0x00400d45
  4020d4:	20400ae0 	.word	0x20400ae0
  4020d8:	20400b54 	.word	0x20400b54
  4020dc:	00401901 	.word	0x00401901
  4020e0:	20400b2c 	.word	0x20400b2c
  4020e4:	00400cf9 	.word	0x00400cf9

004020e8 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  4020e8:	b1f8      	cbz	r0, 40212a <vTaskPlaceOnEventListRestricted+0x42>
	{
  4020ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4020ee:	4c18      	ldr	r4, [pc, #96]	; (402150 <vTaskPlaceOnEventListRestricted+0x68>)
  4020f0:	460d      	mov	r5, r1
  4020f2:	4f18      	ldr	r7, [pc, #96]	; (402154 <vTaskPlaceOnEventListRestricted+0x6c>)
  4020f4:	4616      	mov	r6, r2
  4020f6:	6821      	ldr	r1, [r4, #0]
  4020f8:	3118      	adds	r1, #24
  4020fa:	47b8      	blx	r7
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4020fc:	6820      	ldr	r0, [r4, #0]
  4020fe:	4b16      	ldr	r3, [pc, #88]	; (402158 <vTaskPlaceOnEventListRestricted+0x70>)
  402100:	3004      	adds	r0, #4
  402102:	4798      	blx	r3
  402104:	b940      	cbnz	r0, 402118 <vTaskPlaceOnEventListRestricted+0x30>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402106:	6823      	ldr	r3, [r4, #0]
  402108:	2201      	movs	r2, #1
  40210a:	4914      	ldr	r1, [pc, #80]	; (40215c <vTaskPlaceOnEventListRestricted+0x74>)
  40210c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  40210e:	680b      	ldr	r3, [r1, #0]
  402110:	4082      	lsls	r2, r0
  402112:	ea23 0302 	bic.w	r3, r3, r2
  402116:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  402118:	2e01      	cmp	r6, #1
  40211a:	d011      	beq.n	402140 <vTaskPlaceOnEventListRestricted+0x58>
				xTimeToWake = xTickCount + xTicksToWait;
  40211c:	4a10      	ldr	r2, [pc, #64]	; (402160 <vTaskPlaceOnEventListRestricted+0x78>)
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40211e:	4b11      	ldr	r3, [pc, #68]	; (402164 <vTaskPlaceOnEventListRestricted+0x7c>)
				xTimeToWake = xTickCount + xTicksToWait;
  402120:	6810      	ldr	r0, [r2, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402122:	4428      	add	r0, r5
	}
  402124:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402128:	4718      	bx	r3
  40212a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40212e:	b672      	cpsid	i
  402130:	f383 8811 	msr	BASEPRI, r3
  402134:	f3bf 8f6f 	isb	sy
  402138:	f3bf 8f4f 	dsb	sy
  40213c:	b662      	cpsie	i
  40213e:	e7fe      	b.n	40213e <vTaskPlaceOnEventListRestricted+0x56>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402140:	6821      	ldr	r1, [r4, #0]
  402142:	463b      	mov	r3, r7
  402144:	4808      	ldr	r0, [pc, #32]	; (402168 <vTaskPlaceOnEventListRestricted+0x80>)
  402146:	3104      	adds	r1, #4
	}
  402148:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40214c:	4718      	bx	r3
  40214e:	bf00      	nop
  402150:	20400a5c 	.word	0x20400a5c
  402154:	00400cf9 	.word	0x00400cf9
  402158:	00400d45 	.word	0x00400d45
  40215c:	20400ae0 	.word	0x20400ae0
  402160:	20400b54 	.word	0x20400b54
  402164:	00401901 	.word	0x00401901
  402168:	20400b2c 	.word	0x20400b2c

0040216c <xTaskRemoveFromEventList>:
{
  40216c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  40216e:	68c3      	ldr	r3, [r0, #12]
  402170:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  402172:	b31c      	cbz	r4, 4021bc <xTaskRemoveFromEventList+0x50>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402174:	f104 0518 	add.w	r5, r4, #24
  402178:	4f19      	ldr	r7, [pc, #100]	; (4021e0 <xTaskRemoveFromEventList+0x74>)
  40217a:	4628      	mov	r0, r5
  40217c:	47b8      	blx	r7
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40217e:	4b19      	ldr	r3, [pc, #100]	; (4021e4 <xTaskRemoveFromEventList+0x78>)
  402180:	681b      	ldr	r3, [r3, #0]
  402182:	bb43      	cbnz	r3, 4021d6 <xTaskRemoveFromEventList+0x6a>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402184:	1d26      	adds	r6, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
  402186:	4d18      	ldr	r5, [pc, #96]	; (4021e8 <xTaskRemoveFromEventList+0x7c>)
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402188:	4630      	mov	r0, r6
  40218a:	47b8      	blx	r7
		prvAddTaskToReadyList( pxUnblockedTCB );
  40218c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40218e:	2301      	movs	r3, #1
  402190:	4816      	ldr	r0, [pc, #88]	; (4021ec <xTaskRemoveFromEventList+0x80>)
  402192:	eb02 0782 	add.w	r7, r2, r2, lsl #2
  402196:	4631      	mov	r1, r6
  402198:	4093      	lsls	r3, r2
  40219a:	682a      	ldr	r2, [r5, #0]
  40219c:	eb00 0087 	add.w	r0, r0, r7, lsl #2
  4021a0:	4313      	orrs	r3, r2
  4021a2:	4a13      	ldr	r2, [pc, #76]	; (4021f0 <xTaskRemoveFromEventList+0x84>)
  4021a4:	602b      	str	r3, [r5, #0]
  4021a6:	4790      	blx	r2
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  4021a8:	4b12      	ldr	r3, [pc, #72]	; (4021f4 <xTaskRemoveFromEventList+0x88>)
  4021aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4021ac:	681b      	ldr	r3, [r3, #0]
  4021ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4021b0:	429a      	cmp	r2, r3
  4021b2:	d90e      	bls.n	4021d2 <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
  4021b4:	4b10      	ldr	r3, [pc, #64]	; (4021f8 <xTaskRemoveFromEventList+0x8c>)
  4021b6:	2001      	movs	r0, #1
  4021b8:	6018      	str	r0, [r3, #0]
  4021ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4021bc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021c0:	b672      	cpsid	i
  4021c2:	f383 8811 	msr	BASEPRI, r3
  4021c6:	f3bf 8f6f 	isb	sy
  4021ca:	f3bf 8f4f 	dsb	sy
  4021ce:	b662      	cpsie	i
  4021d0:	e7fe      	b.n	4021d0 <xTaskRemoveFromEventList+0x64>
		xReturn = pdFALSE;
  4021d2:	2000      	movs	r0, #0
}
  4021d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4021d6:	4629      	mov	r1, r5
  4021d8:	4808      	ldr	r0, [pc, #32]	; (4021fc <xTaskRemoveFromEventList+0x90>)
  4021da:	4b05      	ldr	r3, [pc, #20]	; (4021f0 <xTaskRemoveFromEventList+0x84>)
  4021dc:	4798      	blx	r3
  4021de:	e7e3      	b.n	4021a8 <xTaskRemoveFromEventList+0x3c>
  4021e0:	00400d45 	.word	0x00400d45
  4021e4:	20400ad4 	.word	0x20400ad4
  4021e8:	20400ae0 	.word	0x20400ae0
  4021ec:	20400a68 	.word	0x20400a68
  4021f0:	00400cf9 	.word	0x00400cf9
  4021f4:	20400a5c 	.word	0x20400a5c
  4021f8:	20400b58 	.word	0x20400b58
  4021fc:	20400b14 	.word	0x20400b14

00402200 <vTaskSetTimeOutState>:
{
  402200:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
  402202:	b130      	cbz	r0, 402212 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402204:	4a04      	ldr	r2, [pc, #16]	; (402218 <vTaskSetTimeOutState+0x18>)
	pxTimeOut->xTimeOnEntering = xTickCount;
  402206:	4b05      	ldr	r3, [pc, #20]	; (40221c <vTaskSetTimeOutState+0x1c>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402208:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  40220a:	681b      	ldr	r3, [r3, #0]
  40220c:	e880 000c 	stmia.w	r0, {r2, r3}
  402210:	bd08      	pop	{r3, pc}
  402212:	4b03      	ldr	r3, [pc, #12]	; (402220 <vTaskSetTimeOutState+0x20>)
  402214:	4798      	blx	r3
  402216:	bf00      	nop
  402218:	20400b10 	.word	0x20400b10
  40221c:	20400b54 	.word	0x20400b54
  402220:	00401b65 	.word	0x00401b65

00402224 <xTaskCheckForTimeOut>:
{
  402224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
  402226:	2800      	cmp	r0, #0
  402228:	d030      	beq.n	40228c <xTaskCheckForTimeOut+0x68>
	configASSERT( pxTicksToWait );
  40222a:	b321      	cbz	r1, 402276 <xTaskCheckForTimeOut+0x52>
  40222c:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  40222e:	4b1f      	ldr	r3, [pc, #124]	; (4022ac <xTaskCheckForTimeOut+0x88>)
  402230:	4604      	mov	r4, r0
  402232:	4798      	blx	r3
			if( *pxTicksToWait == portMAX_DELAY )
  402234:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
  402236:	481e      	ldr	r0, [pc, #120]	; (4022b0 <xTaskCheckForTimeOut+0x8c>)
			if( *pxTicksToWait == portMAX_DELAY )
  402238:	1c5a      	adds	r2, r3, #1
		const TickType_t xConstTickCount = xTickCount;
  40223a:	6801      	ldr	r1, [r0, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  40223c:	d031      	beq.n	4022a2 <xTaskCheckForTimeOut+0x7e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  40223e:	4e1d      	ldr	r6, [pc, #116]	; (4022b4 <xTaskCheckForTimeOut+0x90>)
  402240:	6827      	ldr	r7, [r4, #0]
  402242:	6832      	ldr	r2, [r6, #0]
  402244:	4297      	cmp	r7, r2
  402246:	6862      	ldr	r2, [r4, #4]
  402248:	d006      	beq.n	402258 <xTaskCheckForTimeOut+0x34>
  40224a:	4291      	cmp	r1, r2
  40224c:	d304      	bcc.n	402258 <xTaskCheckForTimeOut+0x34>
			xReturn = pdTRUE;
  40224e:	2601      	movs	r6, #1
	taskEXIT_CRITICAL();
  402250:	4b19      	ldr	r3, [pc, #100]	; (4022b8 <xTaskCheckForTimeOut+0x94>)
  402252:	4798      	blx	r3
}
  402254:	4630      	mov	r0, r6
  402256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  402258:	1a8f      	subs	r7, r1, r2
  40225a:	42bb      	cmp	r3, r7
  40225c:	d9f7      	bls.n	40224e <xTaskCheckForTimeOut+0x2a>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  40225e:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402260:	6837      	ldr	r7, [r6, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402262:	6801      	ldr	r1, [r0, #0]
			xReturn = pdFALSE;
  402264:	2600      	movs	r6, #0
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  402266:	4413      	add	r3, r2
  402268:	602b      	str	r3, [r5, #0]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  40226a:	6027      	str	r7, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  40226c:	6061      	str	r1, [r4, #4]
	taskEXIT_CRITICAL();
  40226e:	4b12      	ldr	r3, [pc, #72]	; (4022b8 <xTaskCheckForTimeOut+0x94>)
  402270:	4798      	blx	r3
}
  402272:	4630      	mov	r0, r6
  402274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402276:	f04f 0380 	mov.w	r3, #128	; 0x80
  40227a:	b672      	cpsid	i
  40227c:	f383 8811 	msr	BASEPRI, r3
  402280:	f3bf 8f6f 	isb	sy
  402284:	f3bf 8f4f 	dsb	sy
  402288:	b662      	cpsie	i
  40228a:	e7fe      	b.n	40228a <xTaskCheckForTimeOut+0x66>
  40228c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402290:	b672      	cpsid	i
  402292:	f383 8811 	msr	BASEPRI, r3
  402296:	f3bf 8f6f 	isb	sy
  40229a:	f3bf 8f4f 	dsb	sy
  40229e:	b662      	cpsie	i
  4022a0:	e7fe      	b.n	4022a0 <xTaskCheckForTimeOut+0x7c>
				xReturn = pdFALSE;
  4022a2:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
  4022a4:	4b04      	ldr	r3, [pc, #16]	; (4022b8 <xTaskCheckForTimeOut+0x94>)
  4022a6:	4798      	blx	r3
}
  4022a8:	4630      	mov	r0, r6
  4022aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4022ac:	00400e29 	.word	0x00400e29
  4022b0:	20400b54 	.word	0x20400b54
  4022b4:	20400b10 	.word	0x20400b10
  4022b8:	00400e75 	.word	0x00400e75

004022bc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  4022bc:	4b01      	ldr	r3, [pc, #4]	; (4022c4 <vTaskMissedYield+0x8>)
  4022be:	2201      	movs	r2, #1
  4022c0:	601a      	str	r2, [r3, #0]
  4022c2:	4770      	bx	lr
  4022c4:	20400b58 	.word	0x20400b58

004022c8 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  4022c8:	4b05      	ldr	r3, [pc, #20]	; (4022e0 <xTaskGetSchedulerState+0x18>)
  4022ca:	681b      	ldr	r3, [r3, #0]
  4022cc:	b133      	cbz	r3, 4022dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4022ce:	4b05      	ldr	r3, [pc, #20]	; (4022e4 <xTaskGetSchedulerState+0x1c>)
  4022d0:	681b      	ldr	r3, [r3, #0]
  4022d2:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  4022d4:	bf0c      	ite	eq
  4022d6:	2002      	moveq	r0, #2
  4022d8:	2000      	movne	r0, #0
  4022da:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  4022dc:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  4022de:	4770      	bx	lr
  4022e0:	20400b28 	.word	0x20400b28
  4022e4:	20400ad4 	.word	0x20400ad4

004022e8 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  4022e8:	2800      	cmp	r0, #0
  4022ea:	d046      	beq.n	40237a <vTaskPriorityInherit+0x92>
	{
  4022ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  4022f0:	4c22      	ldr	r4, [pc, #136]	; (40237c <vTaskPriorityInherit+0x94>)
  4022f2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  4022f4:	6822      	ldr	r2, [r4, #0]
  4022f6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  4022f8:	4293      	cmp	r3, r2
  4022fa:	d212      	bcs.n	402322 <vTaskPriorityInherit+0x3a>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  4022fc:	6982      	ldr	r2, [r0, #24]
  4022fe:	2a00      	cmp	r2, #0
  402300:	db04      	blt.n	40230c <vTaskPriorityInherit+0x24>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402302:	6822      	ldr	r2, [r4, #0]
  402304:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  402306:	f1c2 0205 	rsb	r2, r2, #5
  40230a:	6182      	str	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  40230c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402310:	4d1b      	ldr	r5, [pc, #108]	; (402380 <vTaskPriorityInherit+0x98>)
  402312:	6942      	ldr	r2, [r0, #20]
  402314:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  402318:	429a      	cmp	r2, r3
  40231a:	d004      	beq.n	402326 <vTaskPriorityInherit+0x3e>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  40231c:	6823      	ldr	r3, [r4, #0]
  40231e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402320:	62c3      	str	r3, [r0, #44]	; 0x2c
  402322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402326:	1d07      	adds	r7, r0, #4
  402328:	4606      	mov	r6, r0
  40232a:	4b16      	ldr	r3, [pc, #88]	; (402384 <vTaskPriorityInherit+0x9c>)
  40232c:	4638      	mov	r0, r7
  40232e:	4798      	blx	r3
  402330:	bb08      	cbnz	r0, 402376 <vTaskPriorityInherit+0x8e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402332:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  402334:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  402338:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40233c:	b9da      	cbnz	r2, 402376 <vTaskPriorityInherit+0x8e>
  40233e:	4a12      	ldr	r2, [pc, #72]	; (402388 <vTaskPriorityInherit+0xa0>)
  402340:	2001      	movs	r0, #1
  402342:	6811      	ldr	r1, [r2, #0]
  402344:	fa00 f303 	lsl.w	r3, r0, r3
  402348:	ea21 0303 	bic.w	r3, r1, r3
  40234c:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  40234e:	6820      	ldr	r0, [r4, #0]
					prvAddTaskToReadyList( pxTCB );
  402350:	2301      	movs	r3, #1
  402352:	f8d2 e000 	ldr.w	lr, [r2]
  402356:	4639      	mov	r1, r7
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402358:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  40235a:	4c0c      	ldr	r4, [pc, #48]	; (40238c <vTaskPriorityInherit+0xa4>)
  40235c:	4083      	lsls	r3, r0
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  40235e:	62f0      	str	r0, [r6, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  402360:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402364:	ea43 030e 	orr.w	r3, r3, lr
  402368:	eb05 0080 	add.w	r0, r5, r0, lsl #2
  40236c:	6013      	str	r3, [r2, #0]
  40236e:	4623      	mov	r3, r4
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
  402370:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
  402374:	4718      	bx	r3
  402376:	4a04      	ldr	r2, [pc, #16]	; (402388 <vTaskPriorityInherit+0xa0>)
  402378:	e7e9      	b.n	40234e <vTaskPriorityInherit+0x66>
  40237a:	4770      	bx	lr
  40237c:	20400a5c 	.word	0x20400a5c
  402380:	20400a68 	.word	0x20400a68
  402384:	00400d45 	.word	0x00400d45
  402388:	20400ae0 	.word	0x20400ae0
  40238c:	00400cf9 	.word	0x00400cf9

00402390 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  402390:	2800      	cmp	r0, #0
  402392:	d042      	beq.n	40241a <xTaskPriorityDisinherit+0x8a>
	{
  402394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  402396:	4b2b      	ldr	r3, [pc, #172]	; (402444 <xTaskPriorityDisinherit+0xb4>)
  402398:	681b      	ldr	r3, [r3, #0]
  40239a:	4298      	cmp	r0, r3
  40239c:	d00a      	beq.n	4023b4 <xTaskPriorityDisinherit+0x24>
  40239e:	f04f 0380 	mov.w	r3, #128	; 0x80
  4023a2:	b672      	cpsid	i
  4023a4:	f383 8811 	msr	BASEPRI, r3
  4023a8:	f3bf 8f6f 	isb	sy
  4023ac:	f3bf 8f4f 	dsb	sy
  4023b0:	b662      	cpsie	i
  4023b2:	e7fe      	b.n	4023b2 <xTaskPriorityDisinherit+0x22>

			configASSERT( pxTCB->uxMutexesHeld );
  4023b4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4023b6:	b953      	cbnz	r3, 4023ce <xTaskPriorityDisinherit+0x3e>
  4023b8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4023bc:	b672      	cpsid	i
  4023be:	f383 8811 	msr	BASEPRI, r3
  4023c2:	f3bf 8f6f 	isb	sy
  4023c6:	f3bf 8f4f 	dsb	sy
  4023ca:	b662      	cpsie	i
  4023cc:	e7fe      	b.n	4023cc <xTaskPriorityDisinherit+0x3c>
			( pxTCB->uxMutexesHeld )--;

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4023ce:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
  4023d0:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4023d2:	6c82      	ldr	r2, [r0, #72]	; 0x48
			( pxTCB->uxMutexesHeld )--;
  4023d4:	64c3      	str	r3, [r0, #76]	; 0x4c
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  4023d6:	4291      	cmp	r1, r2
  4023d8:	d031      	beq.n	40243e <xTaskPriorityDisinherit+0xae>
  4023da:	2b00      	cmp	r3, #0
  4023dc:	d12f      	bne.n	40243e <xTaskPriorityDisinherit+0xae>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4023de:	1d07      	adds	r7, r0, #4
  4023e0:	4604      	mov	r4, r0
  4023e2:	4b19      	ldr	r3, [pc, #100]	; (402448 <xTaskPriorityDisinherit+0xb8>)
  4023e4:	4638      	mov	r0, r7
  4023e6:	4798      	blx	r3
  4023e8:	b1c8      	cbz	r0, 40241e <xTaskPriorityDisinherit+0x8e>
  4023ea:	4818      	ldr	r0, [pc, #96]	; (40244c <xTaskPriorityDisinherit+0xbc>)
  4023ec:	4a18      	ldr	r2, [pc, #96]	; (402450 <xTaskPriorityDisinherit+0xc0>)
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  4023ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
					prvAddTaskToReadyList( pxTCB );
  4023f0:	2501      	movs	r5, #1
  4023f2:	f8d2 e000 	ldr.w	lr, [r2]
  4023f6:	4639      	mov	r1, r7
  4023f8:	fa05 f603 	lsl.w	r6, r5, r3
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4023fc:	f1c3 0705 	rsb	r7, r3, #5
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  402400:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  402402:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402406:	ea46 060e 	orr.w	r6, r6, lr
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40240a:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  40240c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  402410:	4b10      	ldr	r3, [pc, #64]	; (402454 <xTaskPriorityDisinherit+0xc4>)
  402412:	6016      	str	r6, [r2, #0]
  402414:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  402416:	4628      	mov	r0, r5
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  402418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BaseType_t xReturn = pdFALSE;
  40241a:	2000      	movs	r0, #0
	}
  40241c:	4770      	bx	lr
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  40241e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  402420:	480a      	ldr	r0, [pc, #40]	; (40244c <xTaskPriorityDisinherit+0xbc>)
  402422:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  402426:	4a0a      	ldr	r2, [pc, #40]	; (402450 <xTaskPriorityDisinherit+0xc0>)
  402428:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  40242c:	2b00      	cmp	r3, #0
  40242e:	d1de      	bne.n	4023ee <xTaskPriorityDisinherit+0x5e>
  402430:	2501      	movs	r5, #1
  402432:	6813      	ldr	r3, [r2, #0]
  402434:	40b5      	lsls	r5, r6
  402436:	ea23 0305 	bic.w	r3, r3, r5
  40243a:	6013      	str	r3, [r2, #0]
  40243c:	e7d7      	b.n	4023ee <xTaskPriorityDisinherit+0x5e>
	BaseType_t xReturn = pdFALSE;
  40243e:	2000      	movs	r0, #0
  402440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402442:	bf00      	nop
  402444:	20400a5c 	.word	0x20400a5c
  402448:	00400d45 	.word	0x00400d45
  40244c:	20400a68 	.word	0x20400a68
  402450:	20400ae0 	.word	0x20400ae0
  402454:	00400cf9 	.word	0x00400cf9

00402458 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  402458:	4b04      	ldr	r3, [pc, #16]	; (40246c <pvTaskIncrementMutexHeldCount+0x14>)
  40245a:	681a      	ldr	r2, [r3, #0]
  40245c:	b11a      	cbz	r2, 402466 <pvTaskIncrementMutexHeldCount+0xe>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  40245e:	6819      	ldr	r1, [r3, #0]
  402460:	6cca      	ldr	r2, [r1, #76]	; 0x4c
  402462:	3201      	adds	r2, #1
  402464:	64ca      	str	r2, [r1, #76]	; 0x4c
		}

		return pxCurrentTCB;
  402466:	6818      	ldr	r0, [r3, #0]
	}
  402468:	4770      	bx	lr
  40246a:	bf00      	nop
  40246c:	20400a5c 	.word	0x20400a5c

00402470 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
  402470:	4291      	cmp	r1, r2
{
  402472:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402474:	6100      	str	r0, [r0, #16]
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402476:	6041      	str	r1, [r0, #4]
	if( xNextExpiryTime <= xTimeNow )
  402478:	d805      	bhi.n	402486 <prvInsertTimerInActiveList+0x16>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  40247a:	1ad2      	subs	r2, r2, r3
  40247c:	6983      	ldr	r3, [r0, #24]
  40247e:	429a      	cmp	r2, r3
  402480:	d307      	bcc.n	402492 <prvInsertTimerInActiveList+0x22>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  402482:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  402484:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402486:	429a      	cmp	r2, r3
  402488:	d201      	bcs.n	40248e <prvInsertTimerInActiveList+0x1e>
  40248a:	4299      	cmp	r1, r3
  40248c:	d2f9      	bcs.n	402482 <prvInsertTimerInActiveList+0x12>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40248e:	4a04      	ldr	r2, [pc, #16]	; (4024a0 <prvInsertTimerInActiveList+0x30>)
  402490:	e000      	b.n	402494 <prvInsertTimerInActiveList+0x24>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402492:	4a04      	ldr	r2, [pc, #16]	; (4024a4 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402494:	1d01      	adds	r1, r0, #4
  402496:	4b04      	ldr	r3, [pc, #16]	; (4024a8 <prvInsertTimerInActiveList+0x38>)
  402498:	6810      	ldr	r0, [r2, #0]
  40249a:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  40249c:	2000      	movs	r0, #0
  40249e:	bd08      	pop	{r3, pc}
  4024a0:	20400b5c 	.word	0x20400b5c
  4024a4:	20400b60 	.word	0x20400b60
  4024a8:	00400d11 	.word	0x00400d11

004024ac <prvCheckForValidListAndQueue.part.1>:
  4024ac:	f04f 0380 	mov.w	r3, #128	; 0x80
  4024b0:	b672      	cpsid	i
  4024b2:	f383 8811 	msr	BASEPRI, r3
  4024b6:	f3bf 8f6f 	isb	sy
  4024ba:	f3bf 8f4f 	dsb	sy
  4024be:	b662      	cpsie	i
  4024c0:	e7fe      	b.n	4024c0 <prvCheckForValidListAndQueue.part.1+0x14>
  4024c2:	bf00      	nop

004024c4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  4024c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
  4024c8:	4c13      	ldr	r4, [pc, #76]	; (402518 <prvCheckForValidListAndQueue+0x54>)
	taskENTER_CRITICAL();
  4024ca:	4b14      	ldr	r3, [pc, #80]	; (40251c <prvCheckForValidListAndQueue+0x58>)
  4024cc:	4798      	blx	r3
		if( xTimerQueue == NULL )
  4024ce:	6827      	ldr	r7, [r4, #0]
  4024d0:	b11f      	cbz	r7, 4024da <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4024d2:	4b13      	ldr	r3, [pc, #76]	; (402520 <prvCheckForValidListAndQueue+0x5c>)
}
  4024d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	taskEXIT_CRITICAL();
  4024d8:	4718      	bx	r3
			vListInitialise( &xActiveTimerList1 );
  4024da:	4e12      	ldr	r6, [pc, #72]	; (402524 <prvCheckForValidListAndQueue+0x60>)
			vListInitialise( &xActiveTimerList2 );
  4024dc:	4d12      	ldr	r5, [pc, #72]	; (402528 <prvCheckForValidListAndQueue+0x64>)
			vListInitialise( &xActiveTimerList1 );
  4024de:	4630      	mov	r0, r6
  4024e0:	f8df 805c 	ldr.w	r8, [pc, #92]	; 402540 <prvCheckForValidListAndQueue+0x7c>
  4024e4:	47c0      	blx	r8
			vListInitialise( &xActiveTimerList2 );
  4024e6:	4628      	mov	r0, r5
  4024e8:	47c0      	blx	r8
			pxCurrentTimerList = &xActiveTimerList1;
  4024ea:	4b10      	ldr	r3, [pc, #64]	; (40252c <prvCheckForValidListAndQueue+0x68>)
			pxOverflowTimerList = &xActiveTimerList2;
  4024ec:	f8df e054 	ldr.w	lr, [pc, #84]	; 402544 <prvCheckForValidListAndQueue+0x80>
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4024f0:	463a      	mov	r2, r7
			pxCurrentTimerList = &xActiveTimerList1;
  4024f2:	601e      	str	r6, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4024f4:	2110      	movs	r1, #16
  4024f6:	2005      	movs	r0, #5
  4024f8:	4b0d      	ldr	r3, [pc, #52]	; (402530 <prvCheckForValidListAndQueue+0x6c>)
			pxOverflowTimerList = &xActiveTimerList2;
  4024fa:	f8ce 5000 	str.w	r5, [lr]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4024fe:	4798      	blx	r3
  402500:	6020      	str	r0, [r4, #0]
			configASSERT( xTimerQueue );
  402502:	b130      	cbz	r0, 402512 <prvCheckForValidListAndQueue+0x4e>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  402504:	4b0b      	ldr	r3, [pc, #44]	; (402534 <prvCheckForValidListAndQueue+0x70>)
  402506:	490c      	ldr	r1, [pc, #48]	; (402538 <prvCheckForValidListAndQueue+0x74>)
  402508:	4798      	blx	r3
	taskEXIT_CRITICAL();
  40250a:	4b05      	ldr	r3, [pc, #20]	; (402520 <prvCheckForValidListAndQueue+0x5c>)
}
  40250c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	taskEXIT_CRITICAL();
  402510:	4718      	bx	r3
  402512:	4b0a      	ldr	r3, [pc, #40]	; (40253c <prvCheckForValidListAndQueue+0x78>)
  402514:	4798      	blx	r3
  402516:	bf00      	nop
  402518:	20400b90 	.word	0x20400b90
  40251c:	00400e29 	.word	0x00400e29
  402520:	00400e75 	.word	0x00400e75
  402524:	20400b64 	.word	0x20400b64
  402528:	20400b78 	.word	0x20400b78
  40252c:	20400b5c 	.word	0x20400b5c
  402530:	00401359 	.word	0x00401359
  402534:	0040186d 	.word	0x0040186d
  402538:	00406c2c 	.word	0x00406c2c
  40253c:	004024ad 	.word	0x004024ad
  402540:	00400cd9 	.word	0x00400cd9
  402544:	20400b60 	.word	0x20400b60

00402548 <xTimerCreateTimerTask>:
{
  402548:	b510      	push	{r4, lr}
	prvCheckForValidListAndQueue();
  40254a:	4b10      	ldr	r3, [pc, #64]	; (40258c <xTimerCreateTimerTask+0x44>)
{
  40254c:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  40254e:	4798      	blx	r3
	if( xTimerQueue != NULL )
  402550:	4b0f      	ldr	r3, [pc, #60]	; (402590 <xTimerCreateTimerTask+0x48>)
  402552:	681b      	ldr	r3, [r3, #0]
  402554:	b17b      	cbz	r3, 402576 <xTimerCreateTimerTask+0x2e>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  402556:	2000      	movs	r0, #0
  402558:	2404      	movs	r4, #4
  40255a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40255e:	490d      	ldr	r1, [pc, #52]	; (402594 <xTimerCreateTimerTask+0x4c>)
  402560:	9003      	str	r0, [sp, #12]
  402562:	4603      	mov	r3, r0
  402564:	9002      	str	r0, [sp, #8]
  402566:	9001      	str	r0, [sp, #4]
  402568:	9400      	str	r4, [sp, #0]
  40256a:	480b      	ldr	r0, [pc, #44]	; (402598 <xTimerCreateTimerTask+0x50>)
  40256c:	4c0b      	ldr	r4, [pc, #44]	; (40259c <xTimerCreateTimerTask+0x54>)
  40256e:	47a0      	blx	r4
	configASSERT( xReturn );
  402570:	b108      	cbz	r0, 402576 <xTimerCreateTimerTask+0x2e>
}
  402572:	b004      	add	sp, #16
  402574:	bd10      	pop	{r4, pc}
  402576:	f04f 0380 	mov.w	r3, #128	; 0x80
  40257a:	b672      	cpsid	i
  40257c:	f383 8811 	msr	BASEPRI, r3
  402580:	f3bf 8f6f 	isb	sy
  402584:	f3bf 8f4f 	dsb	sy
  402588:	b662      	cpsie	i
  40258a:	e7fe      	b.n	40258a <xTimerCreateTimerTask+0x42>
  40258c:	004024c5 	.word	0x004024c5
  402590:	20400b90 	.word	0x20400b90
  402594:	00406c34 	.word	0x00406c34
  402598:	004026fd 	.word	0x004026fd
  40259c:	00401b7d 	.word	0x00401b7d

004025a0 <xTimerCreate>:
{
  4025a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4025a4:	9f08      	ldr	r7, [sp, #32]
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
  4025a6:	b1b9      	cbz	r1, 4025d8 <xTimerCreate+0x38>
  4025a8:	461d      	mov	r5, r3
  4025aa:	4680      	mov	r8, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
  4025ac:	4b10      	ldr	r3, [pc, #64]	; (4025f0 <xTimerCreate+0x50>)
  4025ae:	202c      	movs	r0, #44	; 0x2c
  4025b0:	4689      	mov	r9, r1
  4025b2:	4616      	mov	r6, r2
  4025b4:	4798      	blx	r3
		if( pxNewTimer != NULL )
  4025b6:	4604      	mov	r4, r0
  4025b8:	b158      	cbz	r0, 4025d2 <xTimerCreate+0x32>
			prvCheckForValidListAndQueue();
  4025ba:	4b0e      	ldr	r3, [pc, #56]	; (4025f4 <xTimerCreate+0x54>)
  4025bc:	4798      	blx	r3
			pxNewTimer->pcTimerName = pcTimerName;
  4025be:	f8c4 8000 	str.w	r8, [r4]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
  4025c2:	f8c4 9018 	str.w	r9, [r4, #24]
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
  4025c6:	1d20      	adds	r0, r4, #4
			pxNewTimer->uxAutoReload = uxAutoReload;
  4025c8:	61e6      	str	r6, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
  4025ca:	6225      	str	r5, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
  4025cc:	6267      	str	r7, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
  4025ce:	4b0a      	ldr	r3, [pc, #40]	; (4025f8 <xTimerCreate+0x58>)
  4025d0:	4798      	blx	r3
}
  4025d2:	4620      	mov	r0, r4
  4025d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4025d8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025dc:	b672      	cpsid	i
  4025de:	f383 8811 	msr	BASEPRI, r3
  4025e2:	f3bf 8f6f 	isb	sy
  4025e6:	f3bf 8f4f 	dsb	sy
  4025ea:	b662      	cpsie	i
  4025ec:	e7fe      	b.n	4025ec <xTimerCreate+0x4c>
  4025ee:	bf00      	nop
  4025f0:	00401079 	.word	0x00401079
  4025f4:	004024c5 	.word	0x004024c5
  4025f8:	00400cf1 	.word	0x00400cf1

004025fc <xTimerGenericCommand>:
{
  4025fc:	b530      	push	{r4, r5, lr}
  4025fe:	b085      	sub	sp, #20
	configASSERT( xTimer );
  402600:	b310      	cbz	r0, 402648 <xTimerGenericCommand+0x4c>
	if( xTimerQueue != NULL )
  402602:	4c12      	ldr	r4, [pc, #72]	; (40264c <xTimerGenericCommand+0x50>)
  402604:	4605      	mov	r5, r0
  402606:	6820      	ldr	r0, [r4, #0]
  402608:	b168      	cbz	r0, 402626 <xTimerGenericCommand+0x2a>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  40260a:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  40260c:	e88d 0026 	stmia.w	sp, {r1, r2, r5}
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402610:	dc0b      	bgt.n	40262a <xTimerGenericCommand+0x2e>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  402612:	4b0f      	ldr	r3, [pc, #60]	; (402650 <xTimerGenericCommand+0x54>)
  402614:	4798      	blx	r3
  402616:	2802      	cmp	r0, #2
  402618:	d00e      	beq.n	402638 <xTimerGenericCommand+0x3c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  40261a:	2300      	movs	r3, #0
  40261c:	6820      	ldr	r0, [r4, #0]
  40261e:	4669      	mov	r1, sp
  402620:	4c0c      	ldr	r4, [pc, #48]	; (402654 <xTimerGenericCommand+0x58>)
  402622:	461a      	mov	r2, r3
  402624:	47a0      	blx	r4
}
  402626:	b005      	add	sp, #20
  402628:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  40262a:	461a      	mov	r2, r3
  40262c:	4669      	mov	r1, sp
  40262e:	2300      	movs	r3, #0
  402630:	4c09      	ldr	r4, [pc, #36]	; (402658 <xTimerGenericCommand+0x5c>)
  402632:	47a0      	blx	r4
}
  402634:	b005      	add	sp, #20
  402636:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  402638:	6820      	ldr	r0, [r4, #0]
  40263a:	2300      	movs	r3, #0
  40263c:	9a08      	ldr	r2, [sp, #32]
  40263e:	4669      	mov	r1, sp
  402640:	4c04      	ldr	r4, [pc, #16]	; (402654 <xTimerGenericCommand+0x58>)
  402642:	47a0      	blx	r4
}
  402644:	b005      	add	sp, #20
  402646:	bd30      	pop	{r4, r5, pc}
  402648:	4b04      	ldr	r3, [pc, #16]	; (40265c <xTimerGenericCommand+0x60>)
  40264a:	4798      	blx	r3
  40264c:	20400b90 	.word	0x20400b90
  402650:	004022c9 	.word	0x004022c9
  402654:	004013c5 	.word	0x004013c5
  402658:	004015a5 	.word	0x004015a5
  40265c:	004024ad 	.word	0x004024ad

00402660 <prvSwitchTimerLists>:
{
  402660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402664:	4e20      	ldr	r6, [pc, #128]	; (4026e8 <prvSwitchTimerLists+0x88>)
  402666:	b082      	sub	sp, #8
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402668:	4f20      	ldr	r7, [pc, #128]	; (4026ec <prvSwitchTimerLists+0x8c>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  40266a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 4026f4 <prvSwitchTimerLists+0x94>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40266e:	e00c      	b.n	40268a <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402670:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402672:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402674:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402678:	1d25      	adds	r5, r4, #4
  40267a:	4628      	mov	r0, r5
  40267c:	47b8      	blx	r7
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40267e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402680:	4620      	mov	r0, r4
  402682:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402684:	69e3      	ldr	r3, [r4, #28]
  402686:	2b01      	cmp	r3, #1
  402688:	d00a      	beq.n	4026a0 <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40268a:	6833      	ldr	r3, [r6, #0]
  40268c:	681a      	ldr	r2, [r3, #0]
  40268e:	2a00      	cmp	r2, #0
  402690:	d1ee      	bne.n	402670 <prvSwitchTimerLists+0x10>
	pxCurrentTimerList = pxOverflowTimerList;
  402692:	4a17      	ldr	r2, [pc, #92]	; (4026f0 <prvSwitchTimerLists+0x90>)
  402694:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
  402696:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
  402698:	6031      	str	r1, [r6, #0]
}
  40269a:	b002      	add	sp, #8
  40269c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  4026a0:	69a3      	ldr	r3, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4026a2:	4629      	mov	r1, r5
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4026a4:	f04f 0e00 	mov.w	lr, #0
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4026a8:	f8df a04c 	ldr.w	sl, [pc, #76]	; 4026f8 <prvSwitchTimerLists+0x98>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  4026ac:	eb09 0503 	add.w	r5, r9, r3
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4026b0:	464a      	mov	r2, r9
  4026b2:	4673      	mov	r3, lr
  4026b4:	4620      	mov	r0, r4
			if( xReloadTime > xNextExpireTime )
  4026b6:	45a9      	cmp	r9, r5
  4026b8:	d204      	bcs.n	4026c4 <prvSwitchTimerLists+0x64>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  4026ba:	6065      	str	r5, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4026bc:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4026be:	6830      	ldr	r0, [r6, #0]
  4026c0:	47d0      	blx	sl
  4026c2:	e7e2      	b.n	40268a <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4026c4:	f8cd e000 	str.w	lr, [sp]
  4026c8:	4671      	mov	r1, lr
  4026ca:	47c0      	blx	r8
				configASSERT( xResult );
  4026cc:	2800      	cmp	r0, #0
  4026ce:	d1dc      	bne.n	40268a <prvSwitchTimerLists+0x2a>
  4026d0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026d4:	b672      	cpsid	i
  4026d6:	f383 8811 	msr	BASEPRI, r3
  4026da:	f3bf 8f6f 	isb	sy
  4026de:	f3bf 8f4f 	dsb	sy
  4026e2:	b662      	cpsie	i
  4026e4:	e7fe      	b.n	4026e4 <prvSwitchTimerLists+0x84>
  4026e6:	bf00      	nop
  4026e8:	20400b5c 	.word	0x20400b5c
  4026ec:	00400d45 	.word	0x00400d45
  4026f0:	20400b60 	.word	0x20400b60
  4026f4:	004025fd 	.word	0x004025fd
  4026f8:	00400d11 	.word	0x00400d11

004026fc <prvTimerTask>:
{
  4026fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402700:	f8df 9204 	ldr.w	r9, [pc, #516]	; 402908 <prvTimerTask+0x20c>
  402704:	b089      	sub	sp, #36	; 0x24
  402706:	f8df a204 	ldr.w	sl, [pc, #516]	; 40290c <prvTimerTask+0x210>
  40270a:	f8df 8204 	ldr.w	r8, [pc, #516]	; 402910 <prvTimerTask+0x214>
  40270e:	4d72      	ldr	r5, [pc, #456]	; (4028d8 <prvTimerTask+0x1dc>)
  402710:	4e72      	ldr	r6, [pc, #456]	; (4028dc <prvTimerTask+0x1e0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402712:	f8d9 3000 	ldr.w	r3, [r9]
	if( *pxListWasEmpty == pdFALSE )
  402716:	681c      	ldr	r4, [r3, #0]
  402718:	2c00      	cmp	r4, #0
  40271a:	d04e      	beq.n	4027ba <prvTimerTask+0xbe>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  40271c:	68db      	ldr	r3, [r3, #12]
  40271e:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
  402720:	47d0      	blx	sl
	xTimeNow = xTaskGetTickCount();
  402722:	47c0      	blx	r8
	if( xTimeNow < xLastTime )
  402724:	4a6e      	ldr	r2, [pc, #440]	; (4028e0 <prvTimerTask+0x1e4>)
	xTimeNow = xTaskGetTickCount();
  402726:	4603      	mov	r3, r0
	if( xTimeNow < xLastTime )
  402728:	6812      	ldr	r2, [r2, #0]
  40272a:	4290      	cmp	r0, r2
  40272c:	d356      	bcc.n	4027dc <prvTimerTask+0xe0>
	xLastTime = xTimeNow;
  40272e:	4a6c      	ldr	r2, [pc, #432]	; (4028e0 <prvTimerTask+0x1e4>)
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402730:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
  402732:	6010      	str	r0, [r2, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402734:	d960      	bls.n	4027f8 <prvTimerTask+0xfc>
  402736:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402738:	1af9      	subs	r1, r7, r3
  40273a:	6828      	ldr	r0, [r5, #0]
  40273c:	4b69      	ldr	r3, [pc, #420]	; (4028e4 <prvTimerTask+0x1e8>)
  40273e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402740:	4b69      	ldr	r3, [pc, #420]	; (4028e8 <prvTimerTask+0x1ec>)
  402742:	4798      	blx	r3
  402744:	b938      	cbnz	r0, 402756 <prvTimerTask+0x5a>
					portYIELD_WITHIN_API();
  402746:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40274a:	4a68      	ldr	r2, [pc, #416]	; (4028ec <prvTimerTask+0x1f0>)
  40274c:	6013      	str	r3, [r2, #0]
  40274e:	f3bf 8f4f 	dsb	sy
  402752:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402756:	2300      	movs	r3, #0
  402758:	a904      	add	r1, sp, #16
  40275a:	6828      	ldr	r0, [r5, #0]
  40275c:	461a      	mov	r2, r3
  40275e:	47b0      	blx	r6
  402760:	2800      	cmp	r0, #0
  402762:	d0d6      	beq.n	402712 <prvTimerTask+0x16>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402764:	9b04      	ldr	r3, [sp, #16]
  402766:	2b00      	cmp	r3, #0
  402768:	db1f      	blt.n	4027aa <prvTimerTask+0xae>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  40276a:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  40276c:	6963      	ldr	r3, [r4, #20]
  40276e:	b113      	cbz	r3, 402776 <prvTimerTask+0x7a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402770:	1d20      	adds	r0, r4, #4
  402772:	4b5f      	ldr	r3, [pc, #380]	; (4028f0 <prvTimerTask+0x1f4>)
  402774:	4798      	blx	r3
	xTimeNow = xTaskGetTickCount();
  402776:	47c0      	blx	r8
	if( xTimeNow < xLastTime )
  402778:	4b59      	ldr	r3, [pc, #356]	; (4028e0 <prvTimerTask+0x1e4>)
	xTimeNow = xTaskGetTickCount();
  40277a:	4602      	mov	r2, r0
	if( xTimeNow < xLastTime )
  40277c:	681b      	ldr	r3, [r3, #0]
  40277e:	4298      	cmp	r0, r3
  402780:	d335      	bcc.n	4027ee <prvTimerTask+0xf2>
  402782:	9b04      	ldr	r3, [sp, #16]
	xLastTime = xTimeNow;
  402784:	4956      	ldr	r1, [pc, #344]	; (4028e0 <prvTimerTask+0x1e4>)
  402786:	2b09      	cmp	r3, #9
  402788:	600a      	str	r2, [r1, #0]
  40278a:	d8e4      	bhi.n	402756 <prvTimerTask+0x5a>
  40278c:	2101      	movs	r1, #1
  40278e:	fa01 f303 	lsl.w	r3, r1, r3
  402792:	f413 7b04 	ands.w	fp, r3, #528	; 0x210
  402796:	d163      	bne.n	402860 <prvTimerTask+0x164>
  402798:	f013 0fc7 	tst.w	r3, #199	; 0xc7
  40279c:	d169      	bne.n	402872 <prvTimerTask+0x176>
  40279e:	069b      	lsls	r3, r3, #26
  4027a0:	d5d9      	bpl.n	402756 <prvTimerTask+0x5a>
					vPortFree( pxTimer );
  4027a2:	4620      	mov	r0, r4
  4027a4:	4b53      	ldr	r3, [pc, #332]	; (4028f4 <prvTimerTask+0x1f8>)
  4027a6:	4798      	blx	r3
  4027a8:	e7d5      	b.n	402756 <prvTimerTask+0x5a>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  4027aa:	9b05      	ldr	r3, [sp, #20]
  4027ac:	9907      	ldr	r1, [sp, #28]
  4027ae:	9806      	ldr	r0, [sp, #24]
  4027b0:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  4027b2:	9b04      	ldr	r3, [sp, #16]
  4027b4:	2b00      	cmp	r3, #0
  4027b6:	dbce      	blt.n	402756 <prvTimerTask+0x5a>
  4027b8:	e7d7      	b.n	40276a <prvTimerTask+0x6e>
	vTaskSuspendAll();
  4027ba:	47d0      	blx	sl
	xTimeNow = xTaskGetTickCount();
  4027bc:	47c0      	blx	r8
	if( xTimeNow < xLastTime )
  4027be:	4a48      	ldr	r2, [pc, #288]	; (4028e0 <prvTimerTask+0x1e4>)
	xTimeNow = xTaskGetTickCount();
  4027c0:	4603      	mov	r3, r0
	if( xTimeNow < xLastTime )
  4027c2:	6812      	ldr	r2, [r2, #0]
  4027c4:	4282      	cmp	r2, r0
  4027c6:	d809      	bhi.n	4027dc <prvTimerTask+0xe0>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  4027c8:	4a4b      	ldr	r2, [pc, #300]	; (4028f8 <prvTimerTask+0x1fc>)
  4027ca:	4627      	mov	r7, r4
	xLastTime = xTimeNow;
  4027cc:	4944      	ldr	r1, [pc, #272]	; (4028e0 <prvTimerTask+0x1e4>)
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  4027ce:	6812      	ldr	r2, [r2, #0]
	xLastTime = xTimeNow;
  4027d0:	600b      	str	r3, [r1, #0]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  4027d2:	6812      	ldr	r2, [r2, #0]
  4027d4:	fab2 f282 	clz	r2, r2
  4027d8:	0952      	lsrs	r2, r2, #5
  4027da:	e7ad      	b.n	402738 <prvTimerTask+0x3c>
  4027dc:	9303      	str	r3, [sp, #12]
		prvSwitchTimerLists();
  4027de:	4b47      	ldr	r3, [pc, #284]	; (4028fc <prvTimerTask+0x200>)
  4027e0:	4798      	blx	r3
	xLastTime = xTimeNow;
  4027e2:	9b03      	ldr	r3, [sp, #12]
  4027e4:	4a3e      	ldr	r2, [pc, #248]	; (4028e0 <prvTimerTask+0x1e4>)
  4027e6:	6013      	str	r3, [r2, #0]
			( void ) xTaskResumeAll();
  4027e8:	4b3f      	ldr	r3, [pc, #252]	; (4028e8 <prvTimerTask+0x1ec>)
  4027ea:	4798      	blx	r3
  4027ec:	e7b3      	b.n	402756 <prvTimerTask+0x5a>
		prvSwitchTimerLists();
  4027ee:	4b43      	ldr	r3, [pc, #268]	; (4028fc <prvTimerTask+0x200>)
  4027f0:	9003      	str	r0, [sp, #12]
  4027f2:	4798      	blx	r3
  4027f4:	9a03      	ldr	r2, [sp, #12]
  4027f6:	e7c4      	b.n	402782 <prvTimerTask+0x86>
  4027f8:	9303      	str	r3, [sp, #12]
				( void ) xTaskResumeAll();
  4027fa:	4b3b      	ldr	r3, [pc, #236]	; (4028e8 <prvTimerTask+0x1ec>)
  4027fc:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4027fe:	f8d9 2000 	ldr.w	r2, [r9]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402802:	4b3b      	ldr	r3, [pc, #236]	; (4028f0 <prvTimerTask+0x1f4>)
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402804:	68d2      	ldr	r2, [r2, #12]
  402806:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40280a:	f10b 0004 	add.w	r0, fp, #4
  40280e:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402810:	f8db 201c 	ldr.w	r2, [fp, #28]
  402814:	9b03      	ldr	r3, [sp, #12]
  402816:	2a01      	cmp	r2, #1
  402818:	d004      	beq.n	402824 <prvTimerTask+0x128>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40281a:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
  40281e:	4658      	mov	r0, fp
  402820:	4798      	blx	r3
  402822:	e798      	b.n	402756 <prvTimerTask+0x5a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  402824:	f8db 1018 	ldr.w	r1, [fp, #24]
  402828:	461a      	mov	r2, r3
  40282a:	4658      	mov	r0, fp
  40282c:	463b      	mov	r3, r7
  40282e:	4439      	add	r1, r7
  402830:	4c33      	ldr	r4, [pc, #204]	; (402900 <prvTimerTask+0x204>)
  402832:	47a0      	blx	r4
  402834:	2801      	cmp	r0, #1
  402836:	d1f0      	bne.n	40281a <prvTimerTask+0x11e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402838:	2300      	movs	r3, #0
  40283a:	463a      	mov	r2, r7
  40283c:	4658      	mov	r0, fp
  40283e:	4c31      	ldr	r4, [pc, #196]	; (402904 <prvTimerTask+0x208>)
  402840:	9300      	str	r3, [sp, #0]
  402842:	4619      	mov	r1, r3
  402844:	47a0      	blx	r4
			configASSERT( xResult );
  402846:	2800      	cmp	r0, #0
  402848:	d1e7      	bne.n	40281a <prvTimerTask+0x11e>
  40284a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40284e:	b672      	cpsid	i
  402850:	f383 8811 	msr	BASEPRI, r3
  402854:	f3bf 8f6f 	isb	sy
  402858:	f3bf 8f4f 	dsb	sy
  40285c:	b662      	cpsie	i
  40285e:	e7fe      	b.n	40285e <prvTimerTask+0x162>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  402860:	9905      	ldr	r1, [sp, #20]
  402862:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402864:	b369      	cbz	r1, 4028c2 <prvTimerTask+0x1c6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402866:	4411      	add	r1, r2
  402868:	4620      	mov	r0, r4
  40286a:	4613      	mov	r3, r2
  40286c:	4c24      	ldr	r4, [pc, #144]	; (402900 <prvTimerTask+0x204>)
  40286e:	47a0      	blx	r4
  402870:	e771      	b.n	402756 <prvTimerTask+0x5a>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  402872:	9b05      	ldr	r3, [sp, #20]
  402874:	4620      	mov	r0, r4
  402876:	69a1      	ldr	r1, [r4, #24]
  402878:	4f21      	ldr	r7, [pc, #132]	; (402900 <prvTimerTask+0x204>)
  40287a:	4419      	add	r1, r3
  40287c:	47b8      	blx	r7
  40287e:	2801      	cmp	r0, #1
  402880:	f47f af69 	bne.w	402756 <prvTimerTask+0x5a>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402884:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402886:	4620      	mov	r0, r4
  402888:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40288a:	69e3      	ldr	r3, [r4, #28]
  40288c:	2b01      	cmp	r3, #1
  40288e:	f47f af62 	bne.w	402756 <prvTimerTask+0x5a>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402892:	9a05      	ldr	r2, [sp, #20]
  402894:	4620      	mov	r0, r4
  402896:	69a4      	ldr	r4, [r4, #24]
  402898:	465b      	mov	r3, fp
  40289a:	f8cd b000 	str.w	fp, [sp]
  40289e:	4659      	mov	r1, fp
  4028a0:	4422      	add	r2, r4
  4028a2:	4c18      	ldr	r4, [pc, #96]	; (402904 <prvTimerTask+0x208>)
  4028a4:	47a0      	blx	r4
							configASSERT( xResult );
  4028a6:	2800      	cmp	r0, #0
  4028a8:	f47f af55 	bne.w	402756 <prvTimerTask+0x5a>
  4028ac:	f04f 0380 	mov.w	r3, #128	; 0x80
  4028b0:	b672      	cpsid	i
  4028b2:	f383 8811 	msr	BASEPRI, r3
  4028b6:	f3bf 8f6f 	isb	sy
  4028ba:	f3bf 8f4f 	dsb	sy
  4028be:	b662      	cpsie	i
  4028c0:	e7fe      	b.n	4028c0 <prvTimerTask+0x1c4>
  4028c2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4028c6:	b672      	cpsid	i
  4028c8:	f383 8811 	msr	BASEPRI, r3
  4028cc:	f3bf 8f6f 	isb	sy
  4028d0:	f3bf 8f4f 	dsb	sy
  4028d4:	b662      	cpsie	i
  4028d6:	e7fe      	b.n	4028d6 <prvTimerTask+0x1da>
  4028d8:	20400b90 	.word	0x20400b90
  4028dc:	004016a5 	.word	0x004016a5
  4028e0:	20400b8c 	.word	0x20400b8c
  4028e4:	00401895 	.word	0x00401895
  4028e8:	00401de9 	.word	0x00401de9
  4028ec:	e000ed04 	.word	0xe000ed04
  4028f0:	00400d45 	.word	0x00400d45
  4028f4:	004010ad 	.word	0x004010ad
  4028f8:	20400b60 	.word	0x20400b60
  4028fc:	00402661 	.word	0x00402661
  402900:	00402471 	.word	0x00402471
  402904:	004025fd 	.word	0x004025fd
  402908:	20400b5c 	.word	0x20400b5c
  40290c:	00401c59 	.word	0x00401c59
  402910:	00401c69 	.word	0x00401c69

00402914 <vTimerCallback>:
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  402914:	4b02      	ldr	r3, [pc, #8]	; (402920 <vTimerCallback+0xc>)
  402916:	2101      	movs	r1, #1
	afec->AFEC_CR = AFEC_CR_START;
  402918:	2202      	movs	r2, #2
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  40291a:	6159      	str	r1, [r3, #20]
	afec->AFEC_CR = AFEC_CR_START;
  40291c:	601a      	str	r2, [r3, #0]
  40291e:	4770      	bx	lr
  402920:	4003c000 	.word	0x4003c000

00402924 <task_adc>:
		    printf("ADC:Nao chegou um novo dado em 1 segundo\n");
	    }
    }
}

static void task_adc(void *pvParameters) {
  402924:	b580      	push	{r7, lr}
  402926:	4d08      	ldr	r5, [pc, #32]	; (402948 <task_adc+0x24>)
  402928:	b082      	sub	sp, #8
  40292a:	4c08      	ldr	r4, [pc, #32]	; (40294c <task_adc+0x28>)
  40292c:	4f08      	ldr	r7, [pc, #32]	; (402950 <task_adc+0x2c>)

  // variável para recever dados da fila
  int media;
  while (1) {
    if (xQueueReceive(xQueueMean, &(media), 500)) {
      printf("Media movel: %d \n", (media));
  40292e:	4e09      	ldr	r6, [pc, #36]	; (402954 <task_adc+0x30>)
    if (xQueueReceive(xQueueMean, &(media), 500)) {
  402930:	2300      	movs	r3, #0
  402932:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  402936:	a901      	add	r1, sp, #4
  402938:	6828      	ldr	r0, [r5, #0]
  40293a:	47a0      	blx	r4
  40293c:	2800      	cmp	r0, #0
  40293e:	d0f7      	beq.n	402930 <task_adc+0xc>
      printf("Media movel: %d \n", (media));
  402940:	9901      	ldr	r1, [sp, #4]
  402942:	4630      	mov	r0, r6
  402944:	47b8      	blx	r7
  402946:	e7f3      	b.n	402930 <task_adc+0xc>
  402948:	20400c9c 	.word	0x20400c9c
  40294c:	004016a5 	.word	0x004016a5
  402950:	00403cbd 	.word	0x00403cbd
  402954:	00406cd8 	.word	0x00406cd8

00402958 <AFEC_pot_callback>:
static void AFEC_pot_callback(void) {
  402958:	b530      	push	{r4, r5, lr}
  40295a:	b083      	sub	sp, #12
	afec->AFEC_CSELR = afec_ch;
  40295c:	4907      	ldr	r1, [pc, #28]	; (40297c <AFEC_pot_callback+0x24>)
  40295e:	2300      	movs	r3, #0
  BaseType_t xHigherPriorityTaskWoken = pdTRUE;
  402960:	2401      	movs	r4, #1
  402962:	aa02      	add	r2, sp, #8
  xQueueSendFromISR(xQueueADC, &adc, &xHigherPriorityTaskWoken);
  402964:	4806      	ldr	r0, [pc, #24]	; (402980 <AFEC_pot_callback+0x28>)
  402966:	664b      	str	r3, [r1, #100]	; 0x64
	return afec->AFEC_CDR;
  402968:	6e8d      	ldr	r5, [r1, #104]	; 0x68
  40296a:	4669      	mov	r1, sp
  BaseType_t xHigherPriorityTaskWoken = pdTRUE;
  40296c:	f842 4d04 	str.w	r4, [r2, #-4]!
  xQueueSendFromISR(xQueueADC, &adc, &xHigherPriorityTaskWoken);
  402970:	4c04      	ldr	r4, [pc, #16]	; (402984 <AFEC_pot_callback+0x2c>)
  402972:	6800      	ldr	r0, [r0, #0]
  adc.value = afec_channel_get_value(AFEC_POT, AFEC_POT_CHANNEL);
  402974:	9500      	str	r5, [sp, #0]
  xQueueSendFromISR(xQueueADC, &adc, &xHigherPriorityTaskWoken);
  402976:	47a0      	blx	r4
}
  402978:	b003      	add	sp, #12
  40297a:	bd30      	pop	{r4, r5, pc}
  40297c:	4003c000 	.word	0x4003c000
  402980:	20400ca0 	.word	0x20400ca0
  402984:	004015a5 	.word	0x004015a5

00402988 <usart_serial_getchar>:
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402988:	4b2d      	ldr	r3, [pc, #180]	; (402a40 <usart_serial_getchar+0xb8>)
	uint32_t val = 0;
  40298a:	2200      	movs	r2, #0
{
  40298c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (UART0 == (Uart*)p_usart) {
  40298e:	4298      	cmp	r0, r3
{
  402990:	b083      	sub	sp, #12
  402992:	4604      	mov	r4, r0
  402994:	460d      	mov	r5, r1
	uint32_t val = 0;
  402996:	9201      	str	r2, [sp, #4]
	if (UART0 == (Uart*)p_usart) {
  402998:	d03a      	beq.n	402a10 <usart_serial_getchar+0x88>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40299a:	4b2a      	ldr	r3, [pc, #168]	; (402a44 <usart_serial_getchar+0xbc>)
  40299c:	4298      	cmp	r0, r3
  40299e:	d03f      	beq.n	402a20 <usart_serial_getchar+0x98>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4029a0:	4b29      	ldr	r3, [pc, #164]	; (402a48 <usart_serial_getchar+0xc0>)
  4029a2:	4298      	cmp	r0, r3
  4029a4:	d044      	beq.n	402a30 <usart_serial_getchar+0xa8>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4029a6:	4b29      	ldr	r3, [pc, #164]	; (402a4c <usart_serial_getchar+0xc4>)
  4029a8:	4298      	cmp	r0, r3
  4029aa:	d015      	beq.n	4029d8 <usart_serial_getchar+0x50>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4029ac:	4b28      	ldr	r3, [pc, #160]	; (402a50 <usart_serial_getchar+0xc8>)
  4029ae:	4298      	cmp	r0, r3
  4029b0:	d024      	beq.n	4029fc <usart_serial_getchar+0x74>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4029b2:	4b28      	ldr	r3, [pc, #160]	; (402a54 <usart_serial_getchar+0xcc>)
  4029b4:	429c      	cmp	r4, r3
  4029b6:	d017      	beq.n	4029e8 <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4029b8:	4b27      	ldr	r3, [pc, #156]	; (402a58 <usart_serial_getchar+0xd0>)
  4029ba:	429c      	cmp	r4, r3
  4029bc:	d001      	beq.n	4029c2 <usart_serial_getchar+0x3a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4029be:	b003      	add	sp, #12
  4029c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4029c2:	af01      	add	r7, sp, #4
  4029c4:	4e25      	ldr	r6, [pc, #148]	; (402a5c <usart_serial_getchar+0xd4>)
		while (usart_read(p_usart, &val));
  4029c6:	4639      	mov	r1, r7
  4029c8:	4620      	mov	r0, r4
  4029ca:	47b0      	blx	r6
  4029cc:	2800      	cmp	r0, #0
  4029ce:	d1fa      	bne.n	4029c6 <usart_serial_getchar+0x3e>
		*data = (uint8_t)(val & 0xFF);
  4029d0:	9b01      	ldr	r3, [sp, #4]
  4029d2:	702b      	strb	r3, [r5, #0]
}
  4029d4:	b003      	add	sp, #12
  4029d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4029d8:	4e21      	ldr	r6, [pc, #132]	; (402a60 <usart_serial_getchar+0xd8>)
		while (uart_read((Uart*)p_usart, data));
  4029da:	4629      	mov	r1, r5
  4029dc:	4620      	mov	r0, r4
  4029de:	47b0      	blx	r6
  4029e0:	2800      	cmp	r0, #0
  4029e2:	d1fa      	bne.n	4029da <usart_serial_getchar+0x52>
}
  4029e4:	b003      	add	sp, #12
  4029e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4029e8:	af01      	add	r7, sp, #4
  4029ea:	4e1c      	ldr	r6, [pc, #112]	; (402a5c <usart_serial_getchar+0xd4>)
		while (usart_read(p_usart, &val));
  4029ec:	4639      	mov	r1, r7
  4029ee:	4620      	mov	r0, r4
  4029f0:	47b0      	blx	r6
  4029f2:	2800      	cmp	r0, #0
  4029f4:	d1fa      	bne.n	4029ec <usart_serial_getchar+0x64>
		*data = (uint8_t)(val & 0xFF);
  4029f6:	9b01      	ldr	r3, [sp, #4]
  4029f8:	702b      	strb	r3, [r5, #0]
  4029fa:	e7eb      	b.n	4029d4 <usart_serial_getchar+0x4c>
  4029fc:	af01      	add	r7, sp, #4
  4029fe:	4e17      	ldr	r6, [pc, #92]	; (402a5c <usart_serial_getchar+0xd4>)
		while (usart_read(p_usart, &val));
  402a00:	4639      	mov	r1, r7
  402a02:	4620      	mov	r0, r4
  402a04:	47b0      	blx	r6
  402a06:	2800      	cmp	r0, #0
  402a08:	d1fa      	bne.n	402a00 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  402a0a:	9b01      	ldr	r3, [sp, #4]
  402a0c:	702b      	strb	r3, [r5, #0]
  402a0e:	e7e1      	b.n	4029d4 <usart_serial_getchar+0x4c>
  402a10:	4e13      	ldr	r6, [pc, #76]	; (402a60 <usart_serial_getchar+0xd8>)
		while (uart_read((Uart*)p_usart, data));
  402a12:	4607      	mov	r7, r0
  402a14:	4629      	mov	r1, r5
  402a16:	4638      	mov	r0, r7
  402a18:	47b0      	blx	r6
  402a1a:	2800      	cmp	r0, #0
  402a1c:	d1fa      	bne.n	402a14 <usart_serial_getchar+0x8c>
  402a1e:	e7c8      	b.n	4029b2 <usart_serial_getchar+0x2a>
  402a20:	4e0f      	ldr	r6, [pc, #60]	; (402a60 <usart_serial_getchar+0xd8>)
		while (uart_read((Uart*)p_usart, data));
  402a22:	4607      	mov	r7, r0
  402a24:	4629      	mov	r1, r5
  402a26:	4638      	mov	r0, r7
  402a28:	47b0      	blx	r6
  402a2a:	2800      	cmp	r0, #0
  402a2c:	d1fa      	bne.n	402a24 <usart_serial_getchar+0x9c>
  402a2e:	e7c0      	b.n	4029b2 <usart_serial_getchar+0x2a>
  402a30:	4e0b      	ldr	r6, [pc, #44]	; (402a60 <usart_serial_getchar+0xd8>)
		while (uart_read((Uart*)p_usart, data));
  402a32:	4607      	mov	r7, r0
  402a34:	4629      	mov	r1, r5
  402a36:	4638      	mov	r0, r7
  402a38:	47b0      	blx	r6
  402a3a:	2800      	cmp	r0, #0
  402a3c:	d1fa      	bne.n	402a34 <usart_serial_getchar+0xac>
  402a3e:	e7bb      	b.n	4029b8 <usart_serial_getchar+0x30>
  402a40:	400e0800 	.word	0x400e0800
  402a44:	400e0a00 	.word	0x400e0a00
  402a48:	400e1a00 	.word	0x400e1a00
  402a4c:	400e1c00 	.word	0x400e1c00
  402a50:	40024000 	.word	0x40024000
  402a54:	40028000 	.word	0x40028000
  402a58:	4002c000 	.word	0x4002c000
  402a5c:	00400a2d 	.word	0x00400a2d
  402a60:	0040092d 	.word	0x0040092d

00402a64 <usart_serial_putchar>:
	if (UART0 == (Uart*)p_usart) {
  402a64:	4b2a      	ldr	r3, [pc, #168]	; (402b10 <usart_serial_putchar+0xac>)
  402a66:	4298      	cmp	r0, r3
{
  402a68:	b570      	push	{r4, r5, r6, lr}
  402a6a:	460d      	mov	r5, r1
	if (UART0 == (Uart*)p_usart) {
  402a6c:	d01c      	beq.n	402aa8 <usart_serial_putchar+0x44>
	if (UART1 == (Uart*)p_usart) {
  402a6e:	4b29      	ldr	r3, [pc, #164]	; (402b14 <usart_serial_putchar+0xb0>)
  402a70:	4298      	cmp	r0, r3
  402a72:	d022      	beq.n	402aba <usart_serial_putchar+0x56>
	if (UART2 == (Uart*)p_usart) {
  402a74:	4b28      	ldr	r3, [pc, #160]	; (402b18 <usart_serial_putchar+0xb4>)
  402a76:	4298      	cmp	r0, r3
  402a78:	d028      	beq.n	402acc <usart_serial_putchar+0x68>
	if (UART3 == (Uart*)p_usart) {
  402a7a:	4b28      	ldr	r3, [pc, #160]	; (402b1c <usart_serial_putchar+0xb8>)
  402a7c:	4298      	cmp	r0, r3
  402a7e:	d02e      	beq.n	402ade <usart_serial_putchar+0x7a>
	if (USART0 == p_usart) {
  402a80:	4b27      	ldr	r3, [pc, #156]	; (402b20 <usart_serial_putchar+0xbc>)
  402a82:	4298      	cmp	r0, r3
  402a84:	d007      	beq.n	402a96 <usart_serial_putchar+0x32>
	if (USART1 == p_usart) {
  402a86:	4b27      	ldr	r3, [pc, #156]	; (402b24 <usart_serial_putchar+0xc0>)
  402a88:	4298      	cmp	r0, r3
  402a8a:	d038      	beq.n	402afe <usart_serial_putchar+0x9a>
	if (USART2 == p_usart) {
  402a8c:	4b26      	ldr	r3, [pc, #152]	; (402b28 <usart_serial_putchar+0xc4>)
  402a8e:	4298      	cmp	r0, r3
  402a90:	d02d      	beq.n	402aee <usart_serial_putchar+0x8a>
	return 0;
  402a92:	2000      	movs	r0, #0
}
  402a94:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402a96:	4604      	mov	r4, r0
  402a98:	4e24      	ldr	r6, [pc, #144]	; (402b2c <usart_serial_putchar+0xc8>)
  402a9a:	4629      	mov	r1, r5
  402a9c:	4620      	mov	r0, r4
  402a9e:	47b0      	blx	r6
  402aa0:	2800      	cmp	r0, #0
  402aa2:	d1fa      	bne.n	402a9a <usart_serial_putchar+0x36>
		return 1;
  402aa4:	2001      	movs	r0, #1
  402aa6:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402aa8:	4604      	mov	r4, r0
  402aaa:	4e21      	ldr	r6, [pc, #132]	; (402b30 <usart_serial_putchar+0xcc>)
  402aac:	4629      	mov	r1, r5
  402aae:	4620      	mov	r0, r4
  402ab0:	47b0      	blx	r6
  402ab2:	2800      	cmp	r0, #0
  402ab4:	d1fa      	bne.n	402aac <usart_serial_putchar+0x48>
		return 1;
  402ab6:	2001      	movs	r0, #1
  402ab8:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402aba:	4604      	mov	r4, r0
  402abc:	4e1c      	ldr	r6, [pc, #112]	; (402b30 <usart_serial_putchar+0xcc>)
  402abe:	4629      	mov	r1, r5
  402ac0:	4620      	mov	r0, r4
  402ac2:	47b0      	blx	r6
  402ac4:	2800      	cmp	r0, #0
  402ac6:	d1fa      	bne.n	402abe <usart_serial_putchar+0x5a>
		return 1;
  402ac8:	2001      	movs	r0, #1
  402aca:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402acc:	4604      	mov	r4, r0
  402ace:	4e18      	ldr	r6, [pc, #96]	; (402b30 <usart_serial_putchar+0xcc>)
  402ad0:	4629      	mov	r1, r5
  402ad2:	4620      	mov	r0, r4
  402ad4:	47b0      	blx	r6
  402ad6:	2800      	cmp	r0, #0
  402ad8:	d1fa      	bne.n	402ad0 <usart_serial_putchar+0x6c>
		return 1;
  402ada:	2001      	movs	r0, #1
  402adc:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402ade:	4604      	mov	r4, r0
  402ae0:	4e13      	ldr	r6, [pc, #76]	; (402b30 <usart_serial_putchar+0xcc>)
  402ae2:	4629      	mov	r1, r5
  402ae4:	4620      	mov	r0, r4
  402ae6:	47b0      	blx	r6
  402ae8:	2800      	cmp	r0, #0
  402aea:	d1fa      	bne.n	402ae2 <usart_serial_putchar+0x7e>
  402aec:	e7da      	b.n	402aa4 <usart_serial_putchar+0x40>
		while (usart_write(p_usart, c)!=0);
  402aee:	4604      	mov	r4, r0
  402af0:	4e0e      	ldr	r6, [pc, #56]	; (402b2c <usart_serial_putchar+0xc8>)
  402af2:	4629      	mov	r1, r5
  402af4:	4620      	mov	r0, r4
  402af6:	47b0      	blx	r6
  402af8:	2800      	cmp	r0, #0
  402afa:	d1fa      	bne.n	402af2 <usart_serial_putchar+0x8e>
  402afc:	e7d2      	b.n	402aa4 <usart_serial_putchar+0x40>
		while (usart_write(p_usart, c)!=0);
  402afe:	4604      	mov	r4, r0
  402b00:	4e0a      	ldr	r6, [pc, #40]	; (402b2c <usart_serial_putchar+0xc8>)
  402b02:	4629      	mov	r1, r5
  402b04:	4620      	mov	r0, r4
  402b06:	47b0      	blx	r6
  402b08:	2800      	cmp	r0, #0
  402b0a:	d1fa      	bne.n	402b02 <usart_serial_putchar+0x9e>
  402b0c:	e7ca      	b.n	402aa4 <usart_serial_putchar+0x40>
  402b0e:	bf00      	nop
  402b10:	400e0800 	.word	0x400e0800
  402b14:	400e0a00 	.word	0x400e0a00
  402b18:	400e1a00 	.word	0x400e1a00
  402b1c:	400e1c00 	.word	0x400e1c00
  402b20:	40024000 	.word	0x40024000
  402b24:	40028000 	.word	0x40028000
  402b28:	4002c000 	.word	0x4002c000
  402b2c:	00400a15 	.word	0x00400a15
  402b30:	0040091d 	.word	0x0040091d

00402b34 <task_proc>:
static void task_proc(void *pvParameters){
  402b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                            afec_callback_t callback) {
  /*************************************
   * Ativa e configura AFEC
   *************************************/
  /* Ativa AFEC - 0 */
  afec_enable(afec);
  402b38:	4f42      	ldr	r7, [pc, #264]	; (402c44 <task_proc+0x110>)
static void task_proc(void *pvParameters){
  402b3a:	b08f      	sub	sp, #60	; 0x3c
  afec_enable(afec);
  402b3c:	4b42      	ldr	r3, [pc, #264]	; (402c48 <task_proc+0x114>)
	int i = 0;
  402b3e:	2400      	movs	r4, #0
  afec_enable(afec);
  402b40:	4638      	mov	r0, r7
  402b42:	4e42      	ldr	r6, [pc, #264]	; (402c4c <task_proc+0x118>)
  402b44:	4798      	blx	r3

  /* struct de configuracao do AFEC */
  struct afec_config afec_cfg;

  /* Carrega parametros padrao */
  afec_get_config_defaults(&afec_cfg);
  402b46:	a808      	add	r0, sp, #32
  402b48:	4b41      	ldr	r3, [pc, #260]	; (402c50 <task_proc+0x11c>)
  402b4a:	4798      	blx	r3

  /* Configura AFEC */
  afec_init(afec, &afec_cfg);
  402b4c:	a908      	add	r1, sp, #32
  402b4e:	4638      	mov	r0, r7
  402b50:	4b40      	ldr	r3, [pc, #256]	; (402c54 <task_proc+0x120>)
  402b52:	4798      	blx	r3
	reg = afec->AFEC_MR;
  402b54:	687b      	ldr	r3, [r7, #4]
  /* Configura trigger por software */
  afec_set_trigger(afec, AFEC_TRIG_SW);

  /*** Configuracao específica do canal AFEC ***/
  struct afec_ch_config afec_ch_cfg;
  afec_ch_get_config_defaults(&afec_ch_cfg);
  402b56:	a805      	add	r0, sp, #20
  402b58:	4a3f      	ldr	r2, [pc, #252]	; (402c58 <task_proc+0x124>)
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  402b5a:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
  402b5e:	4d3f      	ldr	r5, [pc, #252]	; (402c5c <task_proc+0x128>)
  402b60:	f8df a14c 	ldr.w	sl, [pc, #332]	; 402cb0 <task_proc+0x17c>
	afec->AFEC_MR = reg;
  402b64:	607b      	str	r3, [r7, #4]
  402b66:	4790      	blx	r2
  afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  402b68:	f04f 0e00 	mov.w	lr, #0
  afec_ch_set_config(afec, afec_channel, &afec_ch_cfg);
  402b6c:	4638      	mov	r0, r7
  402b6e:	4621      	mov	r1, r4
  402b70:	aa05      	add	r2, sp, #20
  402b72:	4b3b      	ldr	r3, [pc, #236]	; (402c60 <task_proc+0x12c>)
  afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  402b74:	f88d e015 	strb.w	lr, [sp, #21]
  afec_ch_set_config(afec, afec_channel, &afec_ch_cfg);
  402b78:	4798      	blx	r3
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  402b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
	afec->AFEC_CSELR = afec_ch;
  402b7e:	667c      	str	r4, [r7, #100]	; 0x64
  afec_channel_set_analog_offset(afec, afec_channel, 0x200);

  /***  Configura sensor de temperatura ***/
  struct afec_temp_sensor_config afec_temp_sensor_cfg;

  afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  402b80:	a806      	add	r0, sp, #24
  402b82:	4b38      	ldr	r3, [pc, #224]	; (402c64 <task_proc+0x130>)
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  402b84:	66fa      	str	r2, [r7, #108]	; 0x6c
  402b86:	4798      	blx	r3
  afec_temp_sensor_set_config(afec, &afec_temp_sensor_cfg);
  402b88:	4638      	mov	r0, r7
  402b8a:	a906      	add	r1, sp, #24
  402b8c:	4b36      	ldr	r3, [pc, #216]	; (402c68 <task_proc+0x134>)
  402b8e:	4798      	blx	r3

  /* configura IRQ */
  afec_set_callback(afec, afec_channel, callback, 1);
  402b90:	4638      	mov	r0, r7
  402b92:	4621      	mov	r1, r4
  402b94:	2301      	movs	r3, #1
  402b96:	4a35      	ldr	r2, [pc, #212]	; (402c6c <task_proc+0x138>)
  402b98:	4f35      	ldr	r7, [pc, #212]	; (402c70 <task_proc+0x13c>)
  402b9a:	47b8      	blx	r7
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402b9c:	4935      	ldr	r1, [pc, #212]	; (402c74 <task_proc+0x140>)
  402b9e:	2280      	movs	r2, #128	; 0x80
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402ba0:	f04f 5700 	mov.w	r7, #536870912	; 0x20000000
  xTimer = xTimerCreate(/* Just a text name, not used by the RTOS
  402ba4:	4834      	ldr	r0, [pc, #208]	; (402c78 <task_proc+0x144>)
  402ba6:	4623      	mov	r3, r4
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402ba8:	f881 231d 	strb.w	r2, [r1, #797]	; 0x31d
  402bac:	2201      	movs	r2, #1
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402bae:	600f      	str	r7, [r1, #0]
  402bb0:	2164      	movs	r1, #100	; 0x64
  402bb2:	9000      	str	r0, [sp, #0]
  402bb4:	4f31      	ldr	r7, [pc, #196]	; (402c7c <task_proc+0x148>)
  402bb6:	4832      	ldr	r0, [pc, #200]	; (402c80 <task_proc+0x14c>)
  402bb8:	47b8      	blx	r7
  402bba:	4a32      	ldr	r2, [pc, #200]	; (402c84 <task_proc+0x150>)
  xTimerStart(xTimer, 0);
  402bbc:	4b32      	ldr	r3, [pc, #200]	; (402c88 <task_proc+0x154>)
  xTimer = xTimerCreate(/* Just a text name, not used by the RTOS
  402bbe:	6010      	str	r0, [r2, #0]
  402bc0:	9003      	str	r0, [sp, #12]
  xTimerStart(xTimer, 0);
  402bc2:	4798      	blx	r3
  402bc4:	9903      	ldr	r1, [sp, #12]
  402bc6:	4602      	mov	r2, r0
  402bc8:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 402cb4 <task_proc+0x180>
  402bcc:	4623      	mov	r3, r4
  402bce:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 402cb8 <task_proc+0x184>
  402bd2:	4608      	mov	r0, r1
  402bd4:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 402cbc <task_proc+0x188>
  402bd8:	2101      	movs	r1, #1
  402bda:	9400      	str	r4, [sp, #0]
  402bdc:	4f2b      	ldr	r7, [pc, #172]	; (402c8c <task_proc+0x158>)
  402bde:	47b8      	blx	r7
	int media = 0;
  402be0:	9408      	str	r4, [sp, #32]
	    if (xQueueReceive(xQueueADC, &(adc), 1000)) {
  402be2:	2300      	movs	r3, #0
  402be4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  402be8:	a906      	add	r1, sp, #24
  402bea:	6830      	ldr	r0, [r6, #0]
  402bec:	47a8      	blx	r5
  402bee:	b190      	cbz	r0, 402c16 <task_proc+0xe2>
			double ln = log((double) adc.value +2000);
  402bf0:	9806      	ldr	r0, [sp, #24]
  402bf2:	47d0      	blx	sl
  402bf4:	2200      	movs	r2, #0
  402bf6:	4b26      	ldr	r3, [pc, #152]	; (402c90 <task_proc+0x15c>)
  402bf8:	47c8      	blx	r9
  402bfa:	47c0      	blx	r8
			if (i >= 3){
  402bfc:	2c02      	cmp	r4, #2
				i++;
  402bfe:	f104 0401 	add.w	r4, r4, #1
			if (i >= 3){
  402c02:	dc0c      	bgt.n	402c1e <task_proc+0xea>
			int ln1 = (1000) * ln;
  402c04:	4b23      	ldr	r3, [pc, #140]	; (402c94 <task_proc+0x160>)
  402c06:	2200      	movs	r2, #0
  402c08:	4f23      	ldr	r7, [pc, #140]	; (402c98 <task_proc+0x164>)
  402c0a:	47b8      	blx	r7
  402c0c:	47d8      	blx	fp
				media += ln1;
  402c0e:	9b08      	ldr	r3, [sp, #32]
  402c10:	4418      	add	r0, r3
  402c12:	9008      	str	r0, [sp, #32]
  402c14:	e7e5      	b.n	402be2 <task_proc+0xae>
		    printf("ADC:Nao chegou um novo dado em 1 segundo\n");
  402c16:	4b21      	ldr	r3, [pc, #132]	; (402c9c <task_proc+0x168>)
  402c18:	4821      	ldr	r0, [pc, #132]	; (402ca0 <task_proc+0x16c>)
  402c1a:	4798      	blx	r3
  402c1c:	e7e1      	b.n	402be2 <task_proc+0xae>
				media = media / 3;
  402c1e:	f8dd e020 	ldr.w	lr, [sp, #32]
				xQueueSend(xQueueMean, &media, 10);
  402c22:	2300      	movs	r3, #0
				media = media / 3;
  402c24:	481f      	ldr	r0, [pc, #124]	; (402ca4 <task_proc+0x170>)
				xQueueSend(xQueueMean, &media, 10);
  402c26:	220a      	movs	r2, #10
  402c28:	a908      	add	r1, sp, #32
				media = media / 3;
  402c2a:	fb80 040e 	smull	r0, r4, r0, lr
				xQueueSend(xQueueMean, &media, 10);
  402c2e:	481e      	ldr	r0, [pc, #120]	; (402ca8 <task_proc+0x174>)
				media = media / 3;
  402c30:	eba4 74ee 	sub.w	r4, r4, lr, asr #31
				xQueueSend(xQueueMean, &media, 10);
  402c34:	6800      	ldr	r0, [r0, #0]
				media = media / 3;
  402c36:	9408      	str	r4, [sp, #32]
				xQueueSend(xQueueMean, &media, 10);
  402c38:	4c1c      	ldr	r4, [pc, #112]	; (402cac <task_proc+0x178>)
  402c3a:	47a0      	blx	r4
				media = 0;
  402c3c:	2400      	movs	r4, #0
  402c3e:	9408      	str	r4, [sp, #32]
  402c40:	e7cf      	b.n	402be2 <task_proc+0xae>
  402c42:	bf00      	nop
  402c44:	4003c000 	.word	0x4003c000
  402c48:	004006c5 	.word	0x004006c5
  402c4c:	20400ca0 	.word	0x20400ca0
  402c50:	004004f1 	.word	0x004004f1
  402c54:	0040054d 	.word	0x0040054d
  402c58:	00400525 	.word	0x00400525
  402c5c:	004016a5 	.word	0x004016a5
  402c60:	004004ad 	.word	0x004004ad
  402c64:	00400531 	.word	0x00400531
  402c68:	004004e1 	.word	0x004004e1
  402c6c:	00402959 	.word	0x00402959
  402c70:	00400649 	.word	0x00400649
  402c74:	e000e100 	.word	0xe000e100
  402c78:	00402915 	.word	0x00402915
  402c7c:	004025a1 	.word	0x004025a1
  402c80:	00406cec 	.word	0x00406cec
  402c84:	20400ca4 	.word	0x20400ca4
  402c88:	00401c69 	.word	0x00401c69
  402c8c:	004025fd 	.word	0x004025fd
  402c90:	409f4000 	.word	0x409f4000
  402c94:	408f4000 	.word	0x408f4000
  402c98:	004036b1 	.word	0x004036b1
  402c9c:	00403cbd 	.word	0x00403cbd
  402ca0:	00406cf4 	.word	0x00406cf4
  402ca4:	55555556 	.word	0x55555556
  402ca8:	20400c9c 	.word	0x20400c9c
  402cac:	004013c5 	.word	0x004013c5
  402cb0:	004035c5 	.word	0x004035c5
  402cb4:	0040334d 	.word	0x0040334d
  402cb8:	00402e4d 	.word	0x00402e4d
  402cbc:	00403c11 	.word	0x00403c11

00402cc0 <vApplicationStackOverflowHook>:
                                          signed char *pcTaskName) {
  402cc0:	b508      	push	{r3, lr}
  printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  402cc2:	460a      	mov	r2, r1
  402cc4:	4b02      	ldr	r3, [pc, #8]	; (402cd0 <vApplicationStackOverflowHook+0x10>)
  402cc6:	4601      	mov	r1, r0
  402cc8:	4802      	ldr	r0, [pc, #8]	; (402cd4 <vApplicationStackOverflowHook+0x14>)
  402cca:	4798      	blx	r3
  402ccc:	e7fe      	b.n	402ccc <vApplicationStackOverflowHook+0xc>
  402cce:	bf00      	nop
  402cd0:	00403cbd 	.word	0x00403cbd
  402cd4:	00406d20 	.word	0x00406d20

00402cd8 <vApplicationTickHook>:
extern void vApplicationTickHook(void) {}
  402cd8:	4770      	bx	lr
  402cda:	bf00      	nop

00402cdc <vApplicationMallocFailedHook>:
  402cdc:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ce0:	b672      	cpsid	i
  402ce2:	f383 8811 	msr	BASEPRI, r3
  402ce6:	f3bf 8f6f 	isb	sy
  402cea:	f3bf 8f4f 	dsb	sy
  402cee:	b662      	cpsie	i
  402cf0:	e7fe      	b.n	402cf0 <vApplicationMallocFailedHook+0x14>
  402cf2:	bf00      	nop

00402cf4 <main>:
/**
 *  \brief FreeRTOS Real Time Kernel example entry point.
 *
 *  \return Unused (ANSI-C compatibility).
 */
int main(void) {
  402cf4:	b580      	push	{r7, lr}
  sysclk_init();
  402cf6:	4b38      	ldr	r3, [pc, #224]	; (402dd8 <main+0xe4>)
int main(void) {
  402cf8:	b08a      	sub	sp, #40	; 0x28
  sysclk_init();
  402cfa:	4798      	blx	r3
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  402cfc:	4e37      	ldr	r6, [pc, #220]	; (402ddc <main+0xe8>)
  board_init();
  402cfe:	4b38      	ldr	r3, [pc, #224]	; (402de0 <main+0xec>)
	usart_settings.stop_bits= opt->stopbits;
  402d00:	2400      	movs	r4, #0
  402d02:	4f38      	ldr	r7, [pc, #224]	; (402de4 <main+0xf0>)
  402d04:	4798      	blx	r3
	stdio_base = (void *)usart;
  402d06:	4d38      	ldr	r5, [pc, #224]	; (402de8 <main+0xf4>)
	usart_settings.baudrate = opt->baudrate;
  402d08:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  402d0c:	4837      	ldr	r0, [pc, #220]	; (402dec <main+0xf8>)
	usart_settings.char_length = opt->charlength;
  402d0e:	21c0      	movs	r1, #192	; 0xc0
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  402d10:	6037      	str	r7, [r6, #0]
	usart_settings.parity_type = opt->paritytype;
  402d12:	f44f 6200 	mov.w	r2, #2048	; 0x800
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  402d16:	4e36      	ldr	r6, [pc, #216]	; (402df0 <main+0xfc>)
  402d18:	4f36      	ldr	r7, [pc, #216]	; (402df4 <main+0x100>)
	stdio_base = (void *)usart;
  402d1a:	6005      	str	r5, [r0, #0]
  402d1c:	200e      	movs	r0, #14
	usart_settings.baudrate = opt->baudrate;
  402d1e:	9304      	str	r3, [sp, #16]
  402d20:	4b35      	ldr	r3, [pc, #212]	; (402df8 <main+0x104>)
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  402d22:	6037      	str	r7, [r6, #0]
	usart_settings.char_length = opt->charlength;
  402d24:	9105      	str	r1, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  402d26:	9206      	str	r2, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  402d28:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  402d2a:	9408      	str	r4, [sp, #32]
  402d2c:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  402d2e:	4a33      	ldr	r2, [pc, #204]	; (402dfc <main+0x108>)
  402d30:	a904      	add	r1, sp, #16
  402d32:	4628      	mov	r0, r5
  402d34:	4b32      	ldr	r3, [pc, #200]	; (402e00 <main+0x10c>)
  402d36:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  402d38:	4e32      	ldr	r6, [pc, #200]	; (402e04 <main+0x110>)
		usart_enable_tx(p_usart);
  402d3a:	4628      	mov	r0, r5
  402d3c:	4b32      	ldr	r3, [pc, #200]	; (402e08 <main+0x114>)
  402d3e:	4798      	blx	r3
		usart_enable_rx(p_usart);
  402d40:	4628      	mov	r0, r5
  402d42:	4b32      	ldr	r3, [pc, #200]	; (402e0c <main+0x118>)
  402d44:	4798      	blx	r3
  402d46:	6833      	ldr	r3, [r6, #0]
  402d48:	4d31      	ldr	r5, [pc, #196]	; (402e10 <main+0x11c>)
  402d4a:	4621      	mov	r1, r4
  402d4c:	6898      	ldr	r0, [r3, #8]
  402d4e:	47a8      	blx	r5
	setbuf(stdin, NULL);
  402d50:	6833      	ldr	r3, [r6, #0]
  402d52:	4621      	mov	r1, r4
  configure_console();

  xQueueADC = xQueueCreate(100, sizeof(adcData));
  402d54:	4f2f      	ldr	r7, [pc, #188]	; (402e14 <main+0x120>)
  402d56:	6858      	ldr	r0, [r3, #4]
  402d58:	47a8      	blx	r5
  setbuf(stdout, NULL);
  402d5a:	6833      	ldr	r3, [r6, #0]
  402d5c:	4621      	mov	r1, r4
  xQueueADC = xQueueCreate(100, sizeof(adcData));
  402d5e:	4e2e      	ldr	r6, [pc, #184]	; (402e18 <main+0x124>)
  setbuf(stdout, NULL);
  402d60:	6898      	ldr	r0, [r3, #8]
  402d62:	47a8      	blx	r5
  xQueueADC = xQueueCreate(100, sizeof(adcData));
  402d64:	4622      	mov	r2, r4
  402d66:	2104      	movs	r1, #4
  402d68:	2064      	movs	r0, #100	; 0x64
  402d6a:	47b0      	blx	r6
  xQueueMean = xQueueCreate(100, sizeof(adcData));
  402d6c:	4622      	mov	r2, r4
  xQueueADC = xQueueCreate(100, sizeof(adcData));
  402d6e:	6038      	str	r0, [r7, #0]
  xQueueMean = xQueueCreate(100, sizeof(adcData));
  402d70:	2104      	movs	r1, #4
  402d72:	2064      	movs	r0, #100	; 0x64
  402d74:	4d29      	ldr	r5, [pc, #164]	; (402e1c <main+0x128>)
  402d76:	47b0      	blx	r6
  if (xQueueADC == NULL)
  402d78:	683b      	ldr	r3, [r7, #0]
  xQueueMean = xQueueCreate(100, sizeof(adcData));
  402d7a:	6028      	str	r0, [r5, #0]
  if (xQueueADC == NULL)
  402d7c:	b333      	cbz	r3, 402dcc <main+0xd8>
  402d7e:	4c28      	ldr	r4, [pc, #160]	; (402e20 <main+0x12c>)
    printf("falha em criar a queue xQueueADC \n");
  if (xQueueMean == NULL)
  402d80:	b308      	cbz	r0, 402dc6 <main+0xd2>
  printf("falha em criar a queue xQueueMean \n");

  if (xTaskCreate(task_adc, "ADC", TASK_ADC_STACK_SIZE, NULL,
  402d82:	2000      	movs	r0, #0
  402d84:	f44f 6220 	mov.w	r2, #2560	; 0xa00
  402d88:	4926      	ldr	r1, [pc, #152]	; (402e24 <main+0x130>)
  402d8a:	9003      	str	r0, [sp, #12]
  402d8c:	4603      	mov	r3, r0
  402d8e:	9002      	str	r0, [sp, #8]
  402d90:	9001      	str	r0, [sp, #4]
  402d92:	9000      	str	r0, [sp, #0]
  402d94:	4d24      	ldr	r5, [pc, #144]	; (402e28 <main+0x134>)
  402d96:	4825      	ldr	r0, [pc, #148]	; (402e2c <main+0x138>)
  402d98:	47a8      	blx	r5
  402d9a:	2801      	cmp	r0, #1
  402d9c:	d001      	beq.n	402da2 <main+0xae>
                  TASK_ADC_STACK_PRIORITY, NULL) != pdPASS) {
    printf("Failed to create test ADC task\r\n");
  402d9e:	4824      	ldr	r0, [pc, #144]	; (402e30 <main+0x13c>)
  402da0:	47a0      	blx	r4
  }
  
   if (xTaskCreate(task_proc, "Proc", TASK_MEAN_STACK_SIZE, NULL,
  402da2:	2000      	movs	r0, #0
  402da4:	f44f 6220 	mov.w	r2, #2560	; 0xa00
  402da8:	4922      	ldr	r1, [pc, #136]	; (402e34 <main+0x140>)
  402daa:	9003      	str	r0, [sp, #12]
  402dac:	4603      	mov	r3, r0
  402dae:	9002      	str	r0, [sp, #8]
  402db0:	9001      	str	r0, [sp, #4]
  402db2:	9000      	str	r0, [sp, #0]
  402db4:	4820      	ldr	r0, [pc, #128]	; (402e38 <main+0x144>)
  402db6:	47a8      	blx	r5
  402db8:	2801      	cmp	r0, #1
  402dba:	d001      	beq.n	402dc0 <main+0xcc>
				TASK_MEAN_STACK_PRIORITY, NULL) != pdPASS) {
	    printf("Failed to create test PROC task\r\n");
  402dbc:	481f      	ldr	r0, [pc, #124]	; (402e3c <main+0x148>)
  402dbe:	47a0      	blx	r4
    }
  vTaskStartScheduler();
  402dc0:	4b1f      	ldr	r3, [pc, #124]	; (402e40 <main+0x14c>)
  402dc2:	4798      	blx	r3
  402dc4:	e7fe      	b.n	402dc4 <main+0xd0>
  printf("falha em criar a queue xQueueMean \n");
  402dc6:	481f      	ldr	r0, [pc, #124]	; (402e44 <main+0x150>)
  402dc8:	47a0      	blx	r4
  402dca:	e7da      	b.n	402d82 <main+0x8e>
    printf("falha em criar a queue xQueueADC \n");
  402dcc:	481e      	ldr	r0, [pc, #120]	; (402e48 <main+0x154>)
  402dce:	4c14      	ldr	r4, [pc, #80]	; (402e20 <main+0x12c>)
  402dd0:	47a0      	blx	r4
  402dd2:	6828      	ldr	r0, [r5, #0]
  402dd4:	e7d4      	b.n	402d80 <main+0x8c>
  402dd6:	bf00      	nop
  402dd8:	004001ad 	.word	0x004001ad
  402ddc:	20400bd4 	.word	0x20400bd4
  402de0:	004002ad 	.word	0x004002ad
  402de4:	00402a65 	.word	0x00402a65
  402de8:	40028000 	.word	0x40028000
  402dec:	20400bd8 	.word	0x20400bd8
  402df0:	20400bd0 	.word	0x20400bd0
  402df4:	00402989 	.word	0x00402989
  402df8:	004008d5 	.word	0x004008d5
  402dfc:	08f0d180 	.word	0x08f0d180
  402e00:	004009a1 	.word	0x004009a1
  402e04:	20400010 	.word	0x20400010
  402e08:	00400a05 	.word	0x00400a05
  402e0c:	00400a0d 	.word	0x00400a0d
  402e10:	00404471 	.word	0x00404471
  402e14:	20400ca0 	.word	0x20400ca0
  402e18:	00401359 	.word	0x00401359
  402e1c:	20400c9c 	.word	0x20400c9c
  402e20:	00403cbd 	.word	0x00403cbd
  402e24:	00406c84 	.word	0x00406c84
  402e28:	00401b7d 	.word	0x00401b7d
  402e2c:	00402925 	.word	0x00402925
  402e30:	00406c88 	.word	0x00406c88
  402e34:	00406cac 	.word	0x00406cac
  402e38:	00402b35 	.word	0x00402b35
  402e3c:	00406cb4 	.word	0x00406cb4
  402e40:	00401bc9 	.word	0x00401bc9
  402e44:	00406c60 	.word	0x00406c60
  402e48:	00406c3c 	.word	0x00406c3c

00402e4c <log>:
  402e4c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  402e50:	b08a      	sub	sp, #40	; 0x28
  402e52:	4604      	mov	r4, r0
  402e54:	460d      	mov	r5, r1
  402e56:	f000 f877 	bl	402f48 <__ieee754_log>
  402e5a:	4b35      	ldr	r3, [pc, #212]	; (402f30 <log+0xe4>)
  402e5c:	f993 6000 	ldrsb.w	r6, [r3]
  402e60:	1c73      	adds	r3, r6, #1
  402e62:	4680      	mov	r8, r0
  402e64:	4689      	mov	r9, r1
  402e66:	d00d      	beq.n	402e84 <log+0x38>
  402e68:	4622      	mov	r2, r4
  402e6a:	462b      	mov	r3, r5
  402e6c:	4620      	mov	r0, r4
  402e6e:	4629      	mov	r1, r5
  402e70:	f000 feb8 	bl	403be4 <__aeabi_dcmpun>
  402e74:	b930      	cbnz	r0, 402e84 <log+0x38>
  402e76:	2200      	movs	r2, #0
  402e78:	2300      	movs	r3, #0
  402e7a:	4620      	mov	r0, r4
  402e7c:	4629      	mov	r1, r5
  402e7e:	f000 fea7 	bl	403bd0 <__aeabi_dcmpgt>
  402e82:	b120      	cbz	r0, 402e8e <log+0x42>
  402e84:	4640      	mov	r0, r8
  402e86:	4649      	mov	r1, r9
  402e88:	b00a      	add	sp, #40	; 0x28
  402e8a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
  402e8e:	4b29      	ldr	r3, [pc, #164]	; (402f34 <log+0xe8>)
  402e90:	9008      	str	r0, [sp, #32]
  402e92:	e9cd 4502 	strd	r4, r5, [sp, #8]
  402e96:	e9cd 4504 	strd	r4, r5, [sp, #16]
  402e9a:	9301      	str	r3, [sp, #4]
  402e9c:	4620      	mov	r0, r4
  402e9e:	4629      	mov	r1, r5
  402ea0:	b9ce      	cbnz	r6, 402ed6 <log+0x8a>
  402ea2:	4d25      	ldr	r5, [pc, #148]	; (402f38 <log+0xec>)
  402ea4:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
  402ea8:	2200      	movs	r2, #0
  402eaa:	2300      	movs	r3, #0
  402eac:	e9cd 4506 	strd	r4, r5, [sp, #24]
  402eb0:	f000 fe66 	bl	403b80 <__aeabi_dcmpeq>
  402eb4:	2800      	cmp	r0, #0
  402eb6:	d033      	beq.n	402f20 <log+0xd4>
  402eb8:	2302      	movs	r3, #2
  402eba:	9300      	str	r3, [sp, #0]
  402ebc:	4668      	mov	r0, sp
  402ebe:	f000 fa37 	bl	403330 <matherr>
  402ec2:	b1a8      	cbz	r0, 402ef0 <log+0xa4>
  402ec4:	9b08      	ldr	r3, [sp, #32]
  402ec6:	b9c3      	cbnz	r3, 402efa <log+0xae>
  402ec8:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  402ecc:	4640      	mov	r0, r8
  402ece:	4649      	mov	r1, r9
  402ed0:	b00a      	add	sp, #40	; 0x28
  402ed2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
  402ed6:	4d19      	ldr	r5, [pc, #100]	; (402f3c <log+0xf0>)
  402ed8:	2400      	movs	r4, #0
  402eda:	2200      	movs	r2, #0
  402edc:	2300      	movs	r3, #0
  402ede:	e9cd 4506 	strd	r4, r5, [sp, #24]
  402ee2:	f000 fe4d 	bl	403b80 <__aeabi_dcmpeq>
  402ee6:	b168      	cbz	r0, 402f04 <log+0xb8>
  402ee8:	2302      	movs	r3, #2
  402eea:	429e      	cmp	r6, r3
  402eec:	9300      	str	r3, [sp, #0]
  402eee:	d1e5      	bne.n	402ebc <log+0x70>
  402ef0:	f000 feb6 	bl	403c60 <__errno>
  402ef4:	2322      	movs	r3, #34	; 0x22
  402ef6:	6003      	str	r3, [r0, #0]
  402ef8:	e7e4      	b.n	402ec4 <log+0x78>
  402efa:	f000 feb1 	bl	403c60 <__errno>
  402efe:	9b08      	ldr	r3, [sp, #32]
  402f00:	6003      	str	r3, [r0, #0]
  402f02:	e7e1      	b.n	402ec8 <log+0x7c>
  402f04:	2301      	movs	r3, #1
  402f06:	2e02      	cmp	r6, #2
  402f08:	9300      	str	r3, [sp, #0]
  402f0a:	d10b      	bne.n	402f24 <log+0xd8>
  402f0c:	f000 fea8 	bl	403c60 <__errno>
  402f10:	2321      	movs	r3, #33	; 0x21
  402f12:	6003      	str	r3, [r0, #0]
  402f14:	480a      	ldr	r0, [pc, #40]	; (402f40 <log+0xf4>)
  402f16:	f000 fa0d 	bl	403334 <nan>
  402f1a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  402f1e:	e7d1      	b.n	402ec4 <log+0x78>
  402f20:	2301      	movs	r3, #1
  402f22:	9300      	str	r3, [sp, #0]
  402f24:	4668      	mov	r0, sp
  402f26:	f000 fa03 	bl	403330 <matherr>
  402f2a:	2800      	cmp	r0, #0
  402f2c:	d1f2      	bne.n	402f14 <log+0xc8>
  402f2e:	e7ed      	b.n	402f0c <log+0xc0>
  402f30:	2040000c 	.word	0x2040000c
  402f34:	00406d38 	.word	0x00406d38
  402f38:	c7efffff 	.word	0xc7efffff
  402f3c:	fff00000 	.word	0xfff00000
  402f40:	00406ca8 	.word	0x00406ca8
  402f44:	00000000 	.word	0x00000000

00402f48 <__ieee754_log>:
  402f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402f4c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  402f50:	b085      	sub	sp, #20
  402f52:	4606      	mov	r6, r0
  402f54:	460f      	mov	r7, r1
  402f56:	460b      	mov	r3, r1
  402f58:	da5a      	bge.n	403010 <__ieee754_log+0xc8>
  402f5a:	4602      	mov	r2, r0
  402f5c:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
  402f60:	4322      	orrs	r2, r4
  402f62:	f000 80f8 	beq.w	403156 <__ieee754_log+0x20e>
  402f66:	2900      	cmp	r1, #0
  402f68:	f2c0 817a 	blt.w	403260 <__ieee754_log+0x318>
  402f6c:	2200      	movs	r2, #0
  402f6e:	4bd6      	ldr	r3, [pc, #856]	; (4032c8 <__ieee754_log+0x380>)
  402f70:	f000 fb9e 	bl	4036b0 <__aeabi_dmul>
  402f74:	4ad5      	ldr	r2, [pc, #852]	; (4032cc <__ieee754_log+0x384>)
  402f76:	460b      	mov	r3, r1
  402f78:	4293      	cmp	r3, r2
  402f7a:	4606      	mov	r6, r0
  402f7c:	460f      	mov	r7, r1
  402f7e:	f06f 0c35 	mvn.w	ip, #53	; 0x35
  402f82:	dc4a      	bgt.n	40301a <__ieee754_log+0xd2>
  402f84:	f3c3 0513 	ubfx	r5, r3, #0, #20
  402f88:	f505 2e15 	add.w	lr, r5, #610304	; 0x95000
  402f8c:	f60e 7e64 	addw	lr, lr, #3940	; 0xf64
  402f90:	f40e 1e80 	and.w	lr, lr, #1048576	; 0x100000
  402f94:	f08e 527f 	eor.w	r2, lr, #1069547520	; 0x3fc00000
  402f98:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
  402f9c:	151c      	asrs	r4, r3, #20
  402f9e:	ea42 0705 	orr.w	r7, r2, r5
  402fa2:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
  402fa6:	4464      	add	r4, ip
  402fa8:	2200      	movs	r2, #0
  402faa:	4bc9      	ldr	r3, [pc, #804]	; (4032d0 <__ieee754_log+0x388>)
  402fac:	4630      	mov	r0, r6
  402fae:	4639      	mov	r1, r7
  402fb0:	eb04 541e 	add.w	r4, r4, lr, lsr #20
  402fb4:	f000 f9c8 	bl	403348 <__aeabi_dsub>
  402fb8:	1cab      	adds	r3, r5, #2
  402fba:	f3c3 0313 	ubfx	r3, r3, #0, #20
  402fbe:	2b02      	cmp	r3, #2
  402fc0:	4682      	mov	sl, r0
  402fc2:	468b      	mov	fp, r1
  402fc4:	f04f 0200 	mov.w	r2, #0
  402fc8:	dc30      	bgt.n	40302c <__ieee754_log+0xe4>
  402fca:	2300      	movs	r3, #0
  402fcc:	f000 fdd8 	bl	403b80 <__aeabi_dcmpeq>
  402fd0:	2800      	cmp	r0, #0
  402fd2:	f000 80c9 	beq.w	403168 <__ieee754_log+0x220>
  402fd6:	2c00      	cmp	r4, #0
  402fd8:	f000 814b 	beq.w	403272 <__ieee754_log+0x32a>
  402fdc:	4620      	mov	r0, r4
  402fde:	f000 fb01 	bl	4035e4 <__aeabi_i2d>
  402fe2:	a3a5      	add	r3, pc, #660	; (adr r3, 403278 <__ieee754_log+0x330>)
  402fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
  402fe8:	4606      	mov	r6, r0
  402fea:	460f      	mov	r7, r1
  402fec:	f000 fb60 	bl	4036b0 <__aeabi_dmul>
  402ff0:	a3a3      	add	r3, pc, #652	; (adr r3, 403280 <__ieee754_log+0x338>)
  402ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
  402ff6:	4604      	mov	r4, r0
  402ff8:	460d      	mov	r5, r1
  402ffa:	4630      	mov	r0, r6
  402ffc:	4639      	mov	r1, r7
  402ffe:	f000 fb57 	bl	4036b0 <__aeabi_dmul>
  403002:	4602      	mov	r2, r0
  403004:	460b      	mov	r3, r1
  403006:	4620      	mov	r0, r4
  403008:	4629      	mov	r1, r5
  40300a:	f000 f99f 	bl	40334c <__adddf3>
  40300e:	e00a      	b.n	403026 <__ieee754_log+0xde>
  403010:	4aae      	ldr	r2, [pc, #696]	; (4032cc <__ieee754_log+0x384>)
  403012:	4293      	cmp	r3, r2
  403014:	f04f 0c00 	mov.w	ip, #0
  403018:	ddb4      	ble.n	402f84 <__ieee754_log+0x3c>
  40301a:	4632      	mov	r2, r6
  40301c:	463b      	mov	r3, r7
  40301e:	4630      	mov	r0, r6
  403020:	4639      	mov	r1, r7
  403022:	f000 f993 	bl	40334c <__adddf3>
  403026:	b005      	add	sp, #20
  403028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40302c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403030:	f000 f98c 	bl	40334c <__adddf3>
  403034:	4602      	mov	r2, r0
  403036:	460b      	mov	r3, r1
  403038:	4650      	mov	r0, sl
  40303a:	4659      	mov	r1, fp
  40303c:	f000 fc62 	bl	403904 <__aeabi_ddiv>
  403040:	4606      	mov	r6, r0
  403042:	4620      	mov	r0, r4
  403044:	460f      	mov	r7, r1
  403046:	f000 facd 	bl	4035e4 <__aeabi_i2d>
  40304a:	4632      	mov	r2, r6
  40304c:	e9cd 0100 	strd	r0, r1, [sp]
  403050:	463b      	mov	r3, r7
  403052:	4630      	mov	r0, r6
  403054:	4639      	mov	r1, r7
  403056:	e9cd 6702 	strd	r6, r7, [sp, #8]
  40305a:	f000 fb29 	bl	4036b0 <__aeabi_dmul>
  40305e:	4602      	mov	r2, r0
  403060:	460b      	mov	r3, r1
  403062:	4680      	mov	r8, r0
  403064:	4689      	mov	r9, r1
  403066:	f000 fb23 	bl	4036b0 <__aeabi_dmul>
  40306a:	a387      	add	r3, pc, #540	; (adr r3, 403288 <__ieee754_log+0x340>)
  40306c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403070:	4606      	mov	r6, r0
  403072:	460f      	mov	r7, r1
  403074:	f000 fb1c 	bl	4036b0 <__aeabi_dmul>
  403078:	a385      	add	r3, pc, #532	; (adr r3, 403290 <__ieee754_log+0x348>)
  40307a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40307e:	f000 f965 	bl	40334c <__adddf3>
  403082:	4632      	mov	r2, r6
  403084:	463b      	mov	r3, r7
  403086:	f000 fb13 	bl	4036b0 <__aeabi_dmul>
  40308a:	a383      	add	r3, pc, #524	; (adr r3, 403298 <__ieee754_log+0x350>)
  40308c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403090:	f000 f95c 	bl	40334c <__adddf3>
  403094:	4632      	mov	r2, r6
  403096:	463b      	mov	r3, r7
  403098:	f000 fb0a 	bl	4036b0 <__aeabi_dmul>
  40309c:	a380      	add	r3, pc, #512	; (adr r3, 4032a0 <__ieee754_log+0x358>)
  40309e:	e9d3 2300 	ldrd	r2, r3, [r3]
  4030a2:	f000 f953 	bl	40334c <__adddf3>
  4030a6:	4642      	mov	r2, r8
  4030a8:	464b      	mov	r3, r9
  4030aa:	f000 fb01 	bl	4036b0 <__aeabi_dmul>
  4030ae:	a37e      	add	r3, pc, #504	; (adr r3, 4032a8 <__ieee754_log+0x360>)
  4030b0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4030b4:	4680      	mov	r8, r0
  4030b6:	4689      	mov	r9, r1
  4030b8:	4630      	mov	r0, r6
  4030ba:	4639      	mov	r1, r7
  4030bc:	f000 faf8 	bl	4036b0 <__aeabi_dmul>
  4030c0:	a37b      	add	r3, pc, #492	; (adr r3, 4032b0 <__ieee754_log+0x368>)
  4030c2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4030c6:	f000 f941 	bl	40334c <__adddf3>
  4030ca:	4632      	mov	r2, r6
  4030cc:	463b      	mov	r3, r7
  4030ce:	f000 faef 	bl	4036b0 <__aeabi_dmul>
  4030d2:	a379      	add	r3, pc, #484	; (adr r3, 4032b8 <__ieee754_log+0x370>)
  4030d4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4030d8:	f000 f938 	bl	40334c <__adddf3>
  4030dc:	4632      	mov	r2, r6
  4030de:	463b      	mov	r3, r7
  4030e0:	f000 fae6 	bl	4036b0 <__aeabi_dmul>
  4030e4:	460b      	mov	r3, r1
  4030e6:	4602      	mov	r2, r0
  4030e8:	4649      	mov	r1, r9
  4030ea:	4640      	mov	r0, r8
  4030ec:	f000 f92e 	bl	40334c <__adddf3>
  4030f0:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
  4030f4:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
  4030f8:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
  4030fc:	3551      	adds	r5, #81	; 0x51
  4030fe:	431d      	orrs	r5, r3
  403100:	2d00      	cmp	r5, #0
  403102:	4680      	mov	r8, r0
  403104:	4689      	mov	r9, r1
  403106:	dd56      	ble.n	4031b6 <__ieee754_log+0x26e>
  403108:	2200      	movs	r2, #0
  40310a:	4b72      	ldr	r3, [pc, #456]	; (4032d4 <__ieee754_log+0x38c>)
  40310c:	4650      	mov	r0, sl
  40310e:	4659      	mov	r1, fp
  403110:	f000 face 	bl	4036b0 <__aeabi_dmul>
  403114:	4652      	mov	r2, sl
  403116:	465b      	mov	r3, fp
  403118:	f000 faca 	bl	4036b0 <__aeabi_dmul>
  40311c:	4606      	mov	r6, r0
  40311e:	460f      	mov	r7, r1
  403120:	2c00      	cmp	r4, #0
  403122:	d168      	bne.n	4031f6 <__ieee754_log+0x2ae>
  403124:	4632      	mov	r2, r6
  403126:	463b      	mov	r3, r7
  403128:	4640      	mov	r0, r8
  40312a:	4649      	mov	r1, r9
  40312c:	f000 f90e 	bl	40334c <__adddf3>
  403130:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403134:	f000 fabc 	bl	4036b0 <__aeabi_dmul>
  403138:	4602      	mov	r2, r0
  40313a:	460b      	mov	r3, r1
  40313c:	4630      	mov	r0, r6
  40313e:	4639      	mov	r1, r7
  403140:	f000 f902 	bl	403348 <__aeabi_dsub>
  403144:	4602      	mov	r2, r0
  403146:	460b      	mov	r3, r1
  403148:	4650      	mov	r0, sl
  40314a:	4659      	mov	r1, fp
  40314c:	f000 f8fc 	bl	403348 <__aeabi_dsub>
  403150:	b005      	add	sp, #20
  403152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403156:	2200      	movs	r2, #0
  403158:	2300      	movs	r3, #0
  40315a:	2000      	movs	r0, #0
  40315c:	495e      	ldr	r1, [pc, #376]	; (4032d8 <__ieee754_log+0x390>)
  40315e:	f000 fbd1 	bl	403904 <__aeabi_ddiv>
  403162:	b005      	add	sp, #20
  403164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403168:	a355      	add	r3, pc, #340	; (adr r3, 4032c0 <__ieee754_log+0x378>)
  40316a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40316e:	4650      	mov	r0, sl
  403170:	4659      	mov	r1, fp
  403172:	f000 fa9d 	bl	4036b0 <__aeabi_dmul>
  403176:	4602      	mov	r2, r0
  403178:	460b      	mov	r3, r1
  40317a:	2000      	movs	r0, #0
  40317c:	4955      	ldr	r1, [pc, #340]	; (4032d4 <__ieee754_log+0x38c>)
  40317e:	f000 f8e3 	bl	403348 <__aeabi_dsub>
  403182:	4652      	mov	r2, sl
  403184:	4606      	mov	r6, r0
  403186:	460f      	mov	r7, r1
  403188:	465b      	mov	r3, fp
  40318a:	4650      	mov	r0, sl
  40318c:	4659      	mov	r1, fp
  40318e:	f000 fa8f 	bl	4036b0 <__aeabi_dmul>
  403192:	4602      	mov	r2, r0
  403194:	460b      	mov	r3, r1
  403196:	4630      	mov	r0, r6
  403198:	4639      	mov	r1, r7
  40319a:	f000 fa89 	bl	4036b0 <__aeabi_dmul>
  40319e:	4606      	mov	r6, r0
  4031a0:	460f      	mov	r7, r1
  4031a2:	2c00      	cmp	r4, #0
  4031a4:	f040 809a 	bne.w	4032dc <__ieee754_log+0x394>
  4031a8:	4602      	mov	r2, r0
  4031aa:	460b      	mov	r3, r1
  4031ac:	4650      	mov	r0, sl
  4031ae:	4659      	mov	r1, fp
  4031b0:	f000 f8ca 	bl	403348 <__aeabi_dsub>
  4031b4:	e737      	b.n	403026 <__ieee754_log+0xde>
  4031b6:	2c00      	cmp	r4, #0
  4031b8:	f000 80a4 	beq.w	403304 <__ieee754_log+0x3bc>
  4031bc:	a32e      	add	r3, pc, #184	; (adr r3, 403278 <__ieee754_log+0x330>)
  4031be:	e9d3 2300 	ldrd	r2, r3, [r3]
  4031c2:	e9dd 0100 	ldrd	r0, r1, [sp]
  4031c6:	f000 fa73 	bl	4036b0 <__aeabi_dmul>
  4031ca:	4642      	mov	r2, r8
  4031cc:	464b      	mov	r3, r9
  4031ce:	4604      	mov	r4, r0
  4031d0:	460d      	mov	r5, r1
  4031d2:	4650      	mov	r0, sl
  4031d4:	4659      	mov	r1, fp
  4031d6:	f000 f8b7 	bl	403348 <__aeabi_dsub>
  4031da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4031de:	f000 fa67 	bl	4036b0 <__aeabi_dmul>
  4031e2:	a327      	add	r3, pc, #156	; (adr r3, 403280 <__ieee754_log+0x338>)
  4031e4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4031e8:	4606      	mov	r6, r0
  4031ea:	460f      	mov	r7, r1
  4031ec:	e9dd 0100 	ldrd	r0, r1, [sp]
  4031f0:	f000 fa5e 	bl	4036b0 <__aeabi_dmul>
  4031f4:	e021      	b.n	40323a <__ieee754_log+0x2f2>
  4031f6:	a320      	add	r3, pc, #128	; (adr r3, 403278 <__ieee754_log+0x330>)
  4031f8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4031fc:	e9dd 0100 	ldrd	r0, r1, [sp]
  403200:	f000 fa56 	bl	4036b0 <__aeabi_dmul>
  403204:	4632      	mov	r2, r6
  403206:	463b      	mov	r3, r7
  403208:	4604      	mov	r4, r0
  40320a:	460d      	mov	r5, r1
  40320c:	4640      	mov	r0, r8
  40320e:	4649      	mov	r1, r9
  403210:	f000 f89c 	bl	40334c <__adddf3>
  403214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403218:	f000 fa4a 	bl	4036b0 <__aeabi_dmul>
  40321c:	a318      	add	r3, pc, #96	; (adr r3, 403280 <__ieee754_log+0x338>)
  40321e:	e9d3 2300 	ldrd	r2, r3, [r3]
  403222:	4680      	mov	r8, r0
  403224:	4689      	mov	r9, r1
  403226:	e9dd 0100 	ldrd	r0, r1, [sp]
  40322a:	f000 fa41 	bl	4036b0 <__aeabi_dmul>
  40322e:	4602      	mov	r2, r0
  403230:	460b      	mov	r3, r1
  403232:	4640      	mov	r0, r8
  403234:	4649      	mov	r1, r9
  403236:	f000 f889 	bl	40334c <__adddf3>
  40323a:	4602      	mov	r2, r0
  40323c:	460b      	mov	r3, r1
  40323e:	4630      	mov	r0, r6
  403240:	4639      	mov	r1, r7
  403242:	f000 f881 	bl	403348 <__aeabi_dsub>
  403246:	4652      	mov	r2, sl
  403248:	465b      	mov	r3, fp
  40324a:	f000 f87d 	bl	403348 <__aeabi_dsub>
  40324e:	4602      	mov	r2, r0
  403250:	460b      	mov	r3, r1
  403252:	4620      	mov	r0, r4
  403254:	4629      	mov	r1, r5
  403256:	f000 f877 	bl	403348 <__aeabi_dsub>
  40325a:	b005      	add	sp, #20
  40325c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403260:	4602      	mov	r2, r0
  403262:	460b      	mov	r3, r1
  403264:	f000 f870 	bl	403348 <__aeabi_dsub>
  403268:	2200      	movs	r2, #0
  40326a:	2300      	movs	r3, #0
  40326c:	f000 fb4a 	bl	403904 <__aeabi_ddiv>
  403270:	e6d9      	b.n	403026 <__ieee754_log+0xde>
  403272:	2000      	movs	r0, #0
  403274:	2100      	movs	r1, #0
  403276:	e6d6      	b.n	403026 <__ieee754_log+0xde>
  403278:	fee00000 	.word	0xfee00000
  40327c:	3fe62e42 	.word	0x3fe62e42
  403280:	35793c76 	.word	0x35793c76
  403284:	3dea39ef 	.word	0x3dea39ef
  403288:	df3e5244 	.word	0xdf3e5244
  40328c:	3fc2f112 	.word	0x3fc2f112
  403290:	96cb03de 	.word	0x96cb03de
  403294:	3fc74664 	.word	0x3fc74664
  403298:	94229359 	.word	0x94229359
  40329c:	3fd24924 	.word	0x3fd24924
  4032a0:	55555593 	.word	0x55555593
  4032a4:	3fe55555 	.word	0x3fe55555
  4032a8:	d078c69f 	.word	0xd078c69f
  4032ac:	3fc39a09 	.word	0x3fc39a09
  4032b0:	1d8e78af 	.word	0x1d8e78af
  4032b4:	3fcc71c5 	.word	0x3fcc71c5
  4032b8:	9997fa04 	.word	0x9997fa04
  4032bc:	3fd99999 	.word	0x3fd99999
  4032c0:	55555555 	.word	0x55555555
  4032c4:	3fd55555 	.word	0x3fd55555
  4032c8:	43500000 	.word	0x43500000
  4032cc:	7fefffff 	.word	0x7fefffff
  4032d0:	3ff00000 	.word	0x3ff00000
  4032d4:	3fe00000 	.word	0x3fe00000
  4032d8:	c3500000 	.word	0xc3500000
  4032dc:	4620      	mov	r0, r4
  4032de:	f000 f981 	bl	4035e4 <__aeabi_i2d>
  4032e2:	a30f      	add	r3, pc, #60	; (adr r3, 403320 <__ieee754_log+0x3d8>)
  4032e4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4032e8:	4680      	mov	r8, r0
  4032ea:	4689      	mov	r9, r1
  4032ec:	f000 f9e0 	bl	4036b0 <__aeabi_dmul>
  4032f0:	a30d      	add	r3, pc, #52	; (adr r3, 403328 <__ieee754_log+0x3e0>)
  4032f2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4032f6:	4604      	mov	r4, r0
  4032f8:	460d      	mov	r5, r1
  4032fa:	4640      	mov	r0, r8
  4032fc:	4649      	mov	r1, r9
  4032fe:	f000 f9d7 	bl	4036b0 <__aeabi_dmul>
  403302:	e79a      	b.n	40323a <__ieee754_log+0x2f2>
  403304:	4602      	mov	r2, r0
  403306:	460b      	mov	r3, r1
  403308:	4650      	mov	r0, sl
  40330a:	4659      	mov	r1, fp
  40330c:	f000 f81c 	bl	403348 <__aeabi_dsub>
  403310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403314:	f000 f9cc 	bl	4036b0 <__aeabi_dmul>
  403318:	e714      	b.n	403144 <__ieee754_log+0x1fc>
  40331a:	bf00      	nop
  40331c:	f3af 8000 	nop.w
  403320:	fee00000 	.word	0xfee00000
  403324:	3fe62e42 	.word	0x3fe62e42
  403328:	35793c76 	.word	0x35793c76
  40332c:	3dea39ef 	.word	0x3dea39ef

00403330 <matherr>:
  403330:	2000      	movs	r0, #0
  403332:	4770      	bx	lr

00403334 <nan>:
  403334:	2000      	movs	r0, #0
  403336:	4901      	ldr	r1, [pc, #4]	; (40333c <nan+0x8>)
  403338:	4770      	bx	lr
  40333a:	bf00      	nop
  40333c:	7ff80000 	.word	0x7ff80000

00403340 <__aeabi_drsub>:
  403340:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  403344:	e002      	b.n	40334c <__adddf3>
  403346:	bf00      	nop

00403348 <__aeabi_dsub>:
  403348:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040334c <__adddf3>:
  40334c:	b530      	push	{r4, r5, lr}
  40334e:	ea4f 0441 	mov.w	r4, r1, lsl #1
  403352:	ea4f 0543 	mov.w	r5, r3, lsl #1
  403356:	ea94 0f05 	teq	r4, r5
  40335a:	bf08      	it	eq
  40335c:	ea90 0f02 	teqeq	r0, r2
  403360:	bf1f      	itttt	ne
  403362:	ea54 0c00 	orrsne.w	ip, r4, r0
  403366:	ea55 0c02 	orrsne.w	ip, r5, r2
  40336a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40336e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403372:	f000 80e2 	beq.w	40353a <__adddf3+0x1ee>
  403376:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40337a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40337e:	bfb8      	it	lt
  403380:	426d      	neglt	r5, r5
  403382:	dd0c      	ble.n	40339e <__adddf3+0x52>
  403384:	442c      	add	r4, r5
  403386:	ea80 0202 	eor.w	r2, r0, r2
  40338a:	ea81 0303 	eor.w	r3, r1, r3
  40338e:	ea82 0000 	eor.w	r0, r2, r0
  403392:	ea83 0101 	eor.w	r1, r3, r1
  403396:	ea80 0202 	eor.w	r2, r0, r2
  40339a:	ea81 0303 	eor.w	r3, r1, r3
  40339e:	2d36      	cmp	r5, #54	; 0x36
  4033a0:	bf88      	it	hi
  4033a2:	bd30      	pophi	{r4, r5, pc}
  4033a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4033a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4033ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4033b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4033b4:	d002      	beq.n	4033bc <__adddf3+0x70>
  4033b6:	4240      	negs	r0, r0
  4033b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4033bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4033c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4033c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4033c8:	d002      	beq.n	4033d0 <__adddf3+0x84>
  4033ca:	4252      	negs	r2, r2
  4033cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4033d0:	ea94 0f05 	teq	r4, r5
  4033d4:	f000 80a7 	beq.w	403526 <__adddf3+0x1da>
  4033d8:	f1a4 0401 	sub.w	r4, r4, #1
  4033dc:	f1d5 0e20 	rsbs	lr, r5, #32
  4033e0:	db0d      	blt.n	4033fe <__adddf3+0xb2>
  4033e2:	fa02 fc0e 	lsl.w	ip, r2, lr
  4033e6:	fa22 f205 	lsr.w	r2, r2, r5
  4033ea:	1880      	adds	r0, r0, r2
  4033ec:	f141 0100 	adc.w	r1, r1, #0
  4033f0:	fa03 f20e 	lsl.w	r2, r3, lr
  4033f4:	1880      	adds	r0, r0, r2
  4033f6:	fa43 f305 	asr.w	r3, r3, r5
  4033fa:	4159      	adcs	r1, r3
  4033fc:	e00e      	b.n	40341c <__adddf3+0xd0>
  4033fe:	f1a5 0520 	sub.w	r5, r5, #32
  403402:	f10e 0e20 	add.w	lr, lr, #32
  403406:	2a01      	cmp	r2, #1
  403408:	fa03 fc0e 	lsl.w	ip, r3, lr
  40340c:	bf28      	it	cs
  40340e:	f04c 0c02 	orrcs.w	ip, ip, #2
  403412:	fa43 f305 	asr.w	r3, r3, r5
  403416:	18c0      	adds	r0, r0, r3
  403418:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40341c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403420:	d507      	bpl.n	403432 <__adddf3+0xe6>
  403422:	f04f 0e00 	mov.w	lr, #0
  403426:	f1dc 0c00 	rsbs	ip, ip, #0
  40342a:	eb7e 0000 	sbcs.w	r0, lr, r0
  40342e:	eb6e 0101 	sbc.w	r1, lr, r1
  403432:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  403436:	d31b      	bcc.n	403470 <__adddf3+0x124>
  403438:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40343c:	d30c      	bcc.n	403458 <__adddf3+0x10c>
  40343e:	0849      	lsrs	r1, r1, #1
  403440:	ea5f 0030 	movs.w	r0, r0, rrx
  403444:	ea4f 0c3c 	mov.w	ip, ip, rrx
  403448:	f104 0401 	add.w	r4, r4, #1
  40344c:	ea4f 5244 	mov.w	r2, r4, lsl #21
  403450:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  403454:	f080 809a 	bcs.w	40358c <__adddf3+0x240>
  403458:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40345c:	bf08      	it	eq
  40345e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  403462:	f150 0000 	adcs.w	r0, r0, #0
  403466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40346a:	ea41 0105 	orr.w	r1, r1, r5
  40346e:	bd30      	pop	{r4, r5, pc}
  403470:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  403474:	4140      	adcs	r0, r0
  403476:	eb41 0101 	adc.w	r1, r1, r1
  40347a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40347e:	f1a4 0401 	sub.w	r4, r4, #1
  403482:	d1e9      	bne.n	403458 <__adddf3+0x10c>
  403484:	f091 0f00 	teq	r1, #0
  403488:	bf04      	itt	eq
  40348a:	4601      	moveq	r1, r0
  40348c:	2000      	moveq	r0, #0
  40348e:	fab1 f381 	clz	r3, r1
  403492:	bf08      	it	eq
  403494:	3320      	addeq	r3, #32
  403496:	f1a3 030b 	sub.w	r3, r3, #11
  40349a:	f1b3 0220 	subs.w	r2, r3, #32
  40349e:	da0c      	bge.n	4034ba <__adddf3+0x16e>
  4034a0:	320c      	adds	r2, #12
  4034a2:	dd08      	ble.n	4034b6 <__adddf3+0x16a>
  4034a4:	f102 0c14 	add.w	ip, r2, #20
  4034a8:	f1c2 020c 	rsb	r2, r2, #12
  4034ac:	fa01 f00c 	lsl.w	r0, r1, ip
  4034b0:	fa21 f102 	lsr.w	r1, r1, r2
  4034b4:	e00c      	b.n	4034d0 <__adddf3+0x184>
  4034b6:	f102 0214 	add.w	r2, r2, #20
  4034ba:	bfd8      	it	le
  4034bc:	f1c2 0c20 	rsble	ip, r2, #32
  4034c0:	fa01 f102 	lsl.w	r1, r1, r2
  4034c4:	fa20 fc0c 	lsr.w	ip, r0, ip
  4034c8:	bfdc      	itt	le
  4034ca:	ea41 010c 	orrle.w	r1, r1, ip
  4034ce:	4090      	lslle	r0, r2
  4034d0:	1ae4      	subs	r4, r4, r3
  4034d2:	bfa2      	ittt	ge
  4034d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4034d8:	4329      	orrge	r1, r5
  4034da:	bd30      	popge	{r4, r5, pc}
  4034dc:	ea6f 0404 	mvn.w	r4, r4
  4034e0:	3c1f      	subs	r4, #31
  4034e2:	da1c      	bge.n	40351e <__adddf3+0x1d2>
  4034e4:	340c      	adds	r4, #12
  4034e6:	dc0e      	bgt.n	403506 <__adddf3+0x1ba>
  4034e8:	f104 0414 	add.w	r4, r4, #20
  4034ec:	f1c4 0220 	rsb	r2, r4, #32
  4034f0:	fa20 f004 	lsr.w	r0, r0, r4
  4034f4:	fa01 f302 	lsl.w	r3, r1, r2
  4034f8:	ea40 0003 	orr.w	r0, r0, r3
  4034fc:	fa21 f304 	lsr.w	r3, r1, r4
  403500:	ea45 0103 	orr.w	r1, r5, r3
  403504:	bd30      	pop	{r4, r5, pc}
  403506:	f1c4 040c 	rsb	r4, r4, #12
  40350a:	f1c4 0220 	rsb	r2, r4, #32
  40350e:	fa20 f002 	lsr.w	r0, r0, r2
  403512:	fa01 f304 	lsl.w	r3, r1, r4
  403516:	ea40 0003 	orr.w	r0, r0, r3
  40351a:	4629      	mov	r1, r5
  40351c:	bd30      	pop	{r4, r5, pc}
  40351e:	fa21 f004 	lsr.w	r0, r1, r4
  403522:	4629      	mov	r1, r5
  403524:	bd30      	pop	{r4, r5, pc}
  403526:	f094 0f00 	teq	r4, #0
  40352a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40352e:	bf06      	itte	eq
  403530:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  403534:	3401      	addeq	r4, #1
  403536:	3d01      	subne	r5, #1
  403538:	e74e      	b.n	4033d8 <__adddf3+0x8c>
  40353a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40353e:	bf18      	it	ne
  403540:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403544:	d029      	beq.n	40359a <__adddf3+0x24e>
  403546:	ea94 0f05 	teq	r4, r5
  40354a:	bf08      	it	eq
  40354c:	ea90 0f02 	teqeq	r0, r2
  403550:	d005      	beq.n	40355e <__adddf3+0x212>
  403552:	ea54 0c00 	orrs.w	ip, r4, r0
  403556:	bf04      	itt	eq
  403558:	4619      	moveq	r1, r3
  40355a:	4610      	moveq	r0, r2
  40355c:	bd30      	pop	{r4, r5, pc}
  40355e:	ea91 0f03 	teq	r1, r3
  403562:	bf1e      	ittt	ne
  403564:	2100      	movne	r1, #0
  403566:	2000      	movne	r0, #0
  403568:	bd30      	popne	{r4, r5, pc}
  40356a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40356e:	d105      	bne.n	40357c <__adddf3+0x230>
  403570:	0040      	lsls	r0, r0, #1
  403572:	4149      	adcs	r1, r1
  403574:	bf28      	it	cs
  403576:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40357a:	bd30      	pop	{r4, r5, pc}
  40357c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  403580:	bf3c      	itt	cc
  403582:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  403586:	bd30      	popcc	{r4, r5, pc}
  403588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40358c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  403590:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403594:	f04f 0000 	mov.w	r0, #0
  403598:	bd30      	pop	{r4, r5, pc}
  40359a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40359e:	bf1a      	itte	ne
  4035a0:	4619      	movne	r1, r3
  4035a2:	4610      	movne	r0, r2
  4035a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4035a8:	bf1c      	itt	ne
  4035aa:	460b      	movne	r3, r1
  4035ac:	4602      	movne	r2, r0
  4035ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4035b2:	bf06      	itte	eq
  4035b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4035b8:	ea91 0f03 	teqeq	r1, r3
  4035bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4035c0:	bd30      	pop	{r4, r5, pc}
  4035c2:	bf00      	nop

004035c4 <__aeabi_ui2d>:
  4035c4:	f090 0f00 	teq	r0, #0
  4035c8:	bf04      	itt	eq
  4035ca:	2100      	moveq	r1, #0
  4035cc:	4770      	bxeq	lr
  4035ce:	b530      	push	{r4, r5, lr}
  4035d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4035d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4035d8:	f04f 0500 	mov.w	r5, #0
  4035dc:	f04f 0100 	mov.w	r1, #0
  4035e0:	e750      	b.n	403484 <__adddf3+0x138>
  4035e2:	bf00      	nop

004035e4 <__aeabi_i2d>:
  4035e4:	f090 0f00 	teq	r0, #0
  4035e8:	bf04      	itt	eq
  4035ea:	2100      	moveq	r1, #0
  4035ec:	4770      	bxeq	lr
  4035ee:	b530      	push	{r4, r5, lr}
  4035f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4035f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4035f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4035fc:	bf48      	it	mi
  4035fe:	4240      	negmi	r0, r0
  403600:	f04f 0100 	mov.w	r1, #0
  403604:	e73e      	b.n	403484 <__adddf3+0x138>
  403606:	bf00      	nop

00403608 <__aeabi_f2d>:
  403608:	0042      	lsls	r2, r0, #1
  40360a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40360e:	ea4f 0131 	mov.w	r1, r1, rrx
  403612:	ea4f 7002 	mov.w	r0, r2, lsl #28
  403616:	bf1f      	itttt	ne
  403618:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40361c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403620:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  403624:	4770      	bxne	lr
  403626:	f092 0f00 	teq	r2, #0
  40362a:	bf14      	ite	ne
  40362c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403630:	4770      	bxeq	lr
  403632:	b530      	push	{r4, r5, lr}
  403634:	f44f 7460 	mov.w	r4, #896	; 0x380
  403638:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40363c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403640:	e720      	b.n	403484 <__adddf3+0x138>
  403642:	bf00      	nop

00403644 <__aeabi_ul2d>:
  403644:	ea50 0201 	orrs.w	r2, r0, r1
  403648:	bf08      	it	eq
  40364a:	4770      	bxeq	lr
  40364c:	b530      	push	{r4, r5, lr}
  40364e:	f04f 0500 	mov.w	r5, #0
  403652:	e00a      	b.n	40366a <__aeabi_l2d+0x16>

00403654 <__aeabi_l2d>:
  403654:	ea50 0201 	orrs.w	r2, r0, r1
  403658:	bf08      	it	eq
  40365a:	4770      	bxeq	lr
  40365c:	b530      	push	{r4, r5, lr}
  40365e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  403662:	d502      	bpl.n	40366a <__aeabi_l2d+0x16>
  403664:	4240      	negs	r0, r0
  403666:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40366a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40366e:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403672:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  403676:	f43f aedc 	beq.w	403432 <__adddf3+0xe6>
  40367a:	f04f 0203 	mov.w	r2, #3
  40367e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  403682:	bf18      	it	ne
  403684:	3203      	addne	r2, #3
  403686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40368a:	bf18      	it	ne
  40368c:	3203      	addne	r2, #3
  40368e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  403692:	f1c2 0320 	rsb	r3, r2, #32
  403696:	fa00 fc03 	lsl.w	ip, r0, r3
  40369a:	fa20 f002 	lsr.w	r0, r0, r2
  40369e:	fa01 fe03 	lsl.w	lr, r1, r3
  4036a2:	ea40 000e 	orr.w	r0, r0, lr
  4036a6:	fa21 f102 	lsr.w	r1, r1, r2
  4036aa:	4414      	add	r4, r2
  4036ac:	e6c1      	b.n	403432 <__adddf3+0xe6>
  4036ae:	bf00      	nop

004036b0 <__aeabi_dmul>:
  4036b0:	b570      	push	{r4, r5, r6, lr}
  4036b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4036b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4036ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4036be:	bf1d      	ittte	ne
  4036c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4036c4:	ea94 0f0c 	teqne	r4, ip
  4036c8:	ea95 0f0c 	teqne	r5, ip
  4036cc:	f000 f8de 	bleq	40388c <__aeabi_dmul+0x1dc>
  4036d0:	442c      	add	r4, r5
  4036d2:	ea81 0603 	eor.w	r6, r1, r3
  4036d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4036da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4036de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4036e2:	bf18      	it	ne
  4036e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4036e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4036ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4036f0:	d038      	beq.n	403764 <__aeabi_dmul+0xb4>
  4036f2:	fba0 ce02 	umull	ip, lr, r0, r2
  4036f6:	f04f 0500 	mov.w	r5, #0
  4036fa:	fbe1 e502 	umlal	lr, r5, r1, r2
  4036fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  403702:	fbe0 e503 	umlal	lr, r5, r0, r3
  403706:	f04f 0600 	mov.w	r6, #0
  40370a:	fbe1 5603 	umlal	r5, r6, r1, r3
  40370e:	f09c 0f00 	teq	ip, #0
  403712:	bf18      	it	ne
  403714:	f04e 0e01 	orrne.w	lr, lr, #1
  403718:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40371c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  403720:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  403724:	d204      	bcs.n	403730 <__aeabi_dmul+0x80>
  403726:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40372a:	416d      	adcs	r5, r5
  40372c:	eb46 0606 	adc.w	r6, r6, r6
  403730:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  403734:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  403738:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40373c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  403740:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  403744:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403748:	bf88      	it	hi
  40374a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40374e:	d81e      	bhi.n	40378e <__aeabi_dmul+0xde>
  403750:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  403754:	bf08      	it	eq
  403756:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40375a:	f150 0000 	adcs.w	r0, r0, #0
  40375e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403762:	bd70      	pop	{r4, r5, r6, pc}
  403764:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  403768:	ea46 0101 	orr.w	r1, r6, r1
  40376c:	ea40 0002 	orr.w	r0, r0, r2
  403770:	ea81 0103 	eor.w	r1, r1, r3
  403774:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  403778:	bfc2      	ittt	gt
  40377a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40377e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  403782:	bd70      	popgt	{r4, r5, r6, pc}
  403784:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403788:	f04f 0e00 	mov.w	lr, #0
  40378c:	3c01      	subs	r4, #1
  40378e:	f300 80ab 	bgt.w	4038e8 <__aeabi_dmul+0x238>
  403792:	f114 0f36 	cmn.w	r4, #54	; 0x36
  403796:	bfde      	ittt	le
  403798:	2000      	movle	r0, #0
  40379a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40379e:	bd70      	pople	{r4, r5, r6, pc}
  4037a0:	f1c4 0400 	rsb	r4, r4, #0
  4037a4:	3c20      	subs	r4, #32
  4037a6:	da35      	bge.n	403814 <__aeabi_dmul+0x164>
  4037a8:	340c      	adds	r4, #12
  4037aa:	dc1b      	bgt.n	4037e4 <__aeabi_dmul+0x134>
  4037ac:	f104 0414 	add.w	r4, r4, #20
  4037b0:	f1c4 0520 	rsb	r5, r4, #32
  4037b4:	fa00 f305 	lsl.w	r3, r0, r5
  4037b8:	fa20 f004 	lsr.w	r0, r0, r4
  4037bc:	fa01 f205 	lsl.w	r2, r1, r5
  4037c0:	ea40 0002 	orr.w	r0, r0, r2
  4037c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4037c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4037cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4037d0:	fa21 f604 	lsr.w	r6, r1, r4
  4037d4:	eb42 0106 	adc.w	r1, r2, r6
  4037d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4037dc:	bf08      	it	eq
  4037de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4037e2:	bd70      	pop	{r4, r5, r6, pc}
  4037e4:	f1c4 040c 	rsb	r4, r4, #12
  4037e8:	f1c4 0520 	rsb	r5, r4, #32
  4037ec:	fa00 f304 	lsl.w	r3, r0, r4
  4037f0:	fa20 f005 	lsr.w	r0, r0, r5
  4037f4:	fa01 f204 	lsl.w	r2, r1, r4
  4037f8:	ea40 0002 	orr.w	r0, r0, r2
  4037fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403800:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403804:	f141 0100 	adc.w	r1, r1, #0
  403808:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40380c:	bf08      	it	eq
  40380e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403812:	bd70      	pop	{r4, r5, r6, pc}
  403814:	f1c4 0520 	rsb	r5, r4, #32
  403818:	fa00 f205 	lsl.w	r2, r0, r5
  40381c:	ea4e 0e02 	orr.w	lr, lr, r2
  403820:	fa20 f304 	lsr.w	r3, r0, r4
  403824:	fa01 f205 	lsl.w	r2, r1, r5
  403828:	ea43 0302 	orr.w	r3, r3, r2
  40382c:	fa21 f004 	lsr.w	r0, r1, r4
  403830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403834:	fa21 f204 	lsr.w	r2, r1, r4
  403838:	ea20 0002 	bic.w	r0, r0, r2
  40383c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  403840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403844:	bf08      	it	eq
  403846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40384a:	bd70      	pop	{r4, r5, r6, pc}
  40384c:	f094 0f00 	teq	r4, #0
  403850:	d10f      	bne.n	403872 <__aeabi_dmul+0x1c2>
  403852:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  403856:	0040      	lsls	r0, r0, #1
  403858:	eb41 0101 	adc.w	r1, r1, r1
  40385c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403860:	bf08      	it	eq
  403862:	3c01      	subeq	r4, #1
  403864:	d0f7      	beq.n	403856 <__aeabi_dmul+0x1a6>
  403866:	ea41 0106 	orr.w	r1, r1, r6
  40386a:	f095 0f00 	teq	r5, #0
  40386e:	bf18      	it	ne
  403870:	4770      	bxne	lr
  403872:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  403876:	0052      	lsls	r2, r2, #1
  403878:	eb43 0303 	adc.w	r3, r3, r3
  40387c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  403880:	bf08      	it	eq
  403882:	3d01      	subeq	r5, #1
  403884:	d0f7      	beq.n	403876 <__aeabi_dmul+0x1c6>
  403886:	ea43 0306 	orr.w	r3, r3, r6
  40388a:	4770      	bx	lr
  40388c:	ea94 0f0c 	teq	r4, ip
  403890:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  403894:	bf18      	it	ne
  403896:	ea95 0f0c 	teqne	r5, ip
  40389a:	d00c      	beq.n	4038b6 <__aeabi_dmul+0x206>
  40389c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4038a0:	bf18      	it	ne
  4038a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4038a6:	d1d1      	bne.n	40384c <__aeabi_dmul+0x19c>
  4038a8:	ea81 0103 	eor.w	r1, r1, r3
  4038ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4038b0:	f04f 0000 	mov.w	r0, #0
  4038b4:	bd70      	pop	{r4, r5, r6, pc}
  4038b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4038ba:	bf06      	itte	eq
  4038bc:	4610      	moveq	r0, r2
  4038be:	4619      	moveq	r1, r3
  4038c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4038c4:	d019      	beq.n	4038fa <__aeabi_dmul+0x24a>
  4038c6:	ea94 0f0c 	teq	r4, ip
  4038ca:	d102      	bne.n	4038d2 <__aeabi_dmul+0x222>
  4038cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4038d0:	d113      	bne.n	4038fa <__aeabi_dmul+0x24a>
  4038d2:	ea95 0f0c 	teq	r5, ip
  4038d6:	d105      	bne.n	4038e4 <__aeabi_dmul+0x234>
  4038d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4038dc:	bf1c      	itt	ne
  4038de:	4610      	movne	r0, r2
  4038e0:	4619      	movne	r1, r3
  4038e2:	d10a      	bne.n	4038fa <__aeabi_dmul+0x24a>
  4038e4:	ea81 0103 	eor.w	r1, r1, r3
  4038e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4038ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4038f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4038f4:	f04f 0000 	mov.w	r0, #0
  4038f8:	bd70      	pop	{r4, r5, r6, pc}
  4038fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4038fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  403902:	bd70      	pop	{r4, r5, r6, pc}

00403904 <__aeabi_ddiv>:
  403904:	b570      	push	{r4, r5, r6, lr}
  403906:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40390a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40390e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  403912:	bf1d      	ittte	ne
  403914:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403918:	ea94 0f0c 	teqne	r4, ip
  40391c:	ea95 0f0c 	teqne	r5, ip
  403920:	f000 f8a7 	bleq	403a72 <__aeabi_ddiv+0x16e>
  403924:	eba4 0405 	sub.w	r4, r4, r5
  403928:	ea81 0e03 	eor.w	lr, r1, r3
  40392c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403930:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403934:	f000 8088 	beq.w	403a48 <__aeabi_ddiv+0x144>
  403938:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40393c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  403940:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  403944:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  403948:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40394c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  403950:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  403954:	ea4f 2600 	mov.w	r6, r0, lsl #8
  403958:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40395c:	429d      	cmp	r5, r3
  40395e:	bf08      	it	eq
  403960:	4296      	cmpeq	r6, r2
  403962:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  403966:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40396a:	d202      	bcs.n	403972 <__aeabi_ddiv+0x6e>
  40396c:	085b      	lsrs	r3, r3, #1
  40396e:	ea4f 0232 	mov.w	r2, r2, rrx
  403972:	1ab6      	subs	r6, r6, r2
  403974:	eb65 0503 	sbc.w	r5, r5, r3
  403978:	085b      	lsrs	r3, r3, #1
  40397a:	ea4f 0232 	mov.w	r2, r2, rrx
  40397e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  403982:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  403986:	ebb6 0e02 	subs.w	lr, r6, r2
  40398a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40398e:	bf22      	ittt	cs
  403990:	1ab6      	subcs	r6, r6, r2
  403992:	4675      	movcs	r5, lr
  403994:	ea40 000c 	orrcs.w	r0, r0, ip
  403998:	085b      	lsrs	r3, r3, #1
  40399a:	ea4f 0232 	mov.w	r2, r2, rrx
  40399e:	ebb6 0e02 	subs.w	lr, r6, r2
  4039a2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4039a6:	bf22      	ittt	cs
  4039a8:	1ab6      	subcs	r6, r6, r2
  4039aa:	4675      	movcs	r5, lr
  4039ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4039b0:	085b      	lsrs	r3, r3, #1
  4039b2:	ea4f 0232 	mov.w	r2, r2, rrx
  4039b6:	ebb6 0e02 	subs.w	lr, r6, r2
  4039ba:	eb75 0e03 	sbcs.w	lr, r5, r3
  4039be:	bf22      	ittt	cs
  4039c0:	1ab6      	subcs	r6, r6, r2
  4039c2:	4675      	movcs	r5, lr
  4039c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4039c8:	085b      	lsrs	r3, r3, #1
  4039ca:	ea4f 0232 	mov.w	r2, r2, rrx
  4039ce:	ebb6 0e02 	subs.w	lr, r6, r2
  4039d2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4039d6:	bf22      	ittt	cs
  4039d8:	1ab6      	subcs	r6, r6, r2
  4039da:	4675      	movcs	r5, lr
  4039dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4039e0:	ea55 0e06 	orrs.w	lr, r5, r6
  4039e4:	d018      	beq.n	403a18 <__aeabi_ddiv+0x114>
  4039e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4039ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4039ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4039f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4039f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4039fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4039fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  403a02:	d1c0      	bne.n	403986 <__aeabi_ddiv+0x82>
  403a04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403a08:	d10b      	bne.n	403a22 <__aeabi_ddiv+0x11e>
  403a0a:	ea41 0100 	orr.w	r1, r1, r0
  403a0e:	f04f 0000 	mov.w	r0, #0
  403a12:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  403a16:	e7b6      	b.n	403986 <__aeabi_ddiv+0x82>
  403a18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403a1c:	bf04      	itt	eq
  403a1e:	4301      	orreq	r1, r0
  403a20:	2000      	moveq	r0, #0
  403a22:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403a26:	bf88      	it	hi
  403a28:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403a2c:	f63f aeaf 	bhi.w	40378e <__aeabi_dmul+0xde>
  403a30:	ebb5 0c03 	subs.w	ip, r5, r3
  403a34:	bf04      	itt	eq
  403a36:	ebb6 0c02 	subseq.w	ip, r6, r2
  403a3a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  403a3e:	f150 0000 	adcs.w	r0, r0, #0
  403a42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403a46:	bd70      	pop	{r4, r5, r6, pc}
  403a48:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  403a4c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  403a50:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  403a54:	bfc2      	ittt	gt
  403a56:	ebd4 050c 	rsbsgt	r5, r4, ip
  403a5a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  403a5e:	bd70      	popgt	{r4, r5, r6, pc}
  403a60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403a64:	f04f 0e00 	mov.w	lr, #0
  403a68:	3c01      	subs	r4, #1
  403a6a:	e690      	b.n	40378e <__aeabi_dmul+0xde>
  403a6c:	ea45 0e06 	orr.w	lr, r5, r6
  403a70:	e68d      	b.n	40378e <__aeabi_dmul+0xde>
  403a72:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  403a76:	ea94 0f0c 	teq	r4, ip
  403a7a:	bf08      	it	eq
  403a7c:	ea95 0f0c 	teqeq	r5, ip
  403a80:	f43f af3b 	beq.w	4038fa <__aeabi_dmul+0x24a>
  403a84:	ea94 0f0c 	teq	r4, ip
  403a88:	d10a      	bne.n	403aa0 <__aeabi_ddiv+0x19c>
  403a8a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  403a8e:	f47f af34 	bne.w	4038fa <__aeabi_dmul+0x24a>
  403a92:	ea95 0f0c 	teq	r5, ip
  403a96:	f47f af25 	bne.w	4038e4 <__aeabi_dmul+0x234>
  403a9a:	4610      	mov	r0, r2
  403a9c:	4619      	mov	r1, r3
  403a9e:	e72c      	b.n	4038fa <__aeabi_dmul+0x24a>
  403aa0:	ea95 0f0c 	teq	r5, ip
  403aa4:	d106      	bne.n	403ab4 <__aeabi_ddiv+0x1b0>
  403aa6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403aaa:	f43f aefd 	beq.w	4038a8 <__aeabi_dmul+0x1f8>
  403aae:	4610      	mov	r0, r2
  403ab0:	4619      	mov	r1, r3
  403ab2:	e722      	b.n	4038fa <__aeabi_dmul+0x24a>
  403ab4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403ab8:	bf18      	it	ne
  403aba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403abe:	f47f aec5 	bne.w	40384c <__aeabi_dmul+0x19c>
  403ac2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  403ac6:	f47f af0d 	bne.w	4038e4 <__aeabi_dmul+0x234>
  403aca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  403ace:	f47f aeeb 	bne.w	4038a8 <__aeabi_dmul+0x1f8>
  403ad2:	e712      	b.n	4038fa <__aeabi_dmul+0x24a>

00403ad4 <__gedf2>:
  403ad4:	f04f 3cff 	mov.w	ip, #4294967295
  403ad8:	e006      	b.n	403ae8 <__cmpdf2+0x4>
  403ada:	bf00      	nop

00403adc <__ledf2>:
  403adc:	f04f 0c01 	mov.w	ip, #1
  403ae0:	e002      	b.n	403ae8 <__cmpdf2+0x4>
  403ae2:	bf00      	nop

00403ae4 <__cmpdf2>:
  403ae4:	f04f 0c01 	mov.w	ip, #1
  403ae8:	f84d cd04 	str.w	ip, [sp, #-4]!
  403aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403af8:	bf18      	it	ne
  403afa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  403afe:	d01b      	beq.n	403b38 <__cmpdf2+0x54>
  403b00:	b001      	add	sp, #4
  403b02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  403b06:	bf0c      	ite	eq
  403b08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  403b0c:	ea91 0f03 	teqne	r1, r3
  403b10:	bf02      	ittt	eq
  403b12:	ea90 0f02 	teqeq	r0, r2
  403b16:	2000      	moveq	r0, #0
  403b18:	4770      	bxeq	lr
  403b1a:	f110 0f00 	cmn.w	r0, #0
  403b1e:	ea91 0f03 	teq	r1, r3
  403b22:	bf58      	it	pl
  403b24:	4299      	cmppl	r1, r3
  403b26:	bf08      	it	eq
  403b28:	4290      	cmpeq	r0, r2
  403b2a:	bf2c      	ite	cs
  403b2c:	17d8      	asrcs	r0, r3, #31
  403b2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  403b32:	f040 0001 	orr.w	r0, r0, #1
  403b36:	4770      	bx	lr
  403b38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403b3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403b40:	d102      	bne.n	403b48 <__cmpdf2+0x64>
  403b42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  403b46:	d107      	bne.n	403b58 <__cmpdf2+0x74>
  403b48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403b4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403b50:	d1d6      	bne.n	403b00 <__cmpdf2+0x1c>
  403b52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  403b56:	d0d3      	beq.n	403b00 <__cmpdf2+0x1c>
  403b58:	f85d 0b04 	ldr.w	r0, [sp], #4
  403b5c:	4770      	bx	lr
  403b5e:	bf00      	nop

00403b60 <__aeabi_cdrcmple>:
  403b60:	4684      	mov	ip, r0
  403b62:	4610      	mov	r0, r2
  403b64:	4662      	mov	r2, ip
  403b66:	468c      	mov	ip, r1
  403b68:	4619      	mov	r1, r3
  403b6a:	4663      	mov	r3, ip
  403b6c:	e000      	b.n	403b70 <__aeabi_cdcmpeq>
  403b6e:	bf00      	nop

00403b70 <__aeabi_cdcmpeq>:
  403b70:	b501      	push	{r0, lr}
  403b72:	f7ff ffb7 	bl	403ae4 <__cmpdf2>
  403b76:	2800      	cmp	r0, #0
  403b78:	bf48      	it	mi
  403b7a:	f110 0f00 	cmnmi.w	r0, #0
  403b7e:	bd01      	pop	{r0, pc}

00403b80 <__aeabi_dcmpeq>:
  403b80:	f84d ed08 	str.w	lr, [sp, #-8]!
  403b84:	f7ff fff4 	bl	403b70 <__aeabi_cdcmpeq>
  403b88:	bf0c      	ite	eq
  403b8a:	2001      	moveq	r0, #1
  403b8c:	2000      	movne	r0, #0
  403b8e:	f85d fb08 	ldr.w	pc, [sp], #8
  403b92:	bf00      	nop

00403b94 <__aeabi_dcmplt>:
  403b94:	f84d ed08 	str.w	lr, [sp, #-8]!
  403b98:	f7ff ffea 	bl	403b70 <__aeabi_cdcmpeq>
  403b9c:	bf34      	ite	cc
  403b9e:	2001      	movcc	r0, #1
  403ba0:	2000      	movcs	r0, #0
  403ba2:	f85d fb08 	ldr.w	pc, [sp], #8
  403ba6:	bf00      	nop

00403ba8 <__aeabi_dcmple>:
  403ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
  403bac:	f7ff ffe0 	bl	403b70 <__aeabi_cdcmpeq>
  403bb0:	bf94      	ite	ls
  403bb2:	2001      	movls	r0, #1
  403bb4:	2000      	movhi	r0, #0
  403bb6:	f85d fb08 	ldr.w	pc, [sp], #8
  403bba:	bf00      	nop

00403bbc <__aeabi_dcmpge>:
  403bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
  403bc0:	f7ff ffce 	bl	403b60 <__aeabi_cdrcmple>
  403bc4:	bf94      	ite	ls
  403bc6:	2001      	movls	r0, #1
  403bc8:	2000      	movhi	r0, #0
  403bca:	f85d fb08 	ldr.w	pc, [sp], #8
  403bce:	bf00      	nop

00403bd0 <__aeabi_dcmpgt>:
  403bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
  403bd4:	f7ff ffc4 	bl	403b60 <__aeabi_cdrcmple>
  403bd8:	bf34      	ite	cc
  403bda:	2001      	movcc	r0, #1
  403bdc:	2000      	movcs	r0, #0
  403bde:	f85d fb08 	ldr.w	pc, [sp], #8
  403be2:	bf00      	nop

00403be4 <__aeabi_dcmpun>:
  403be4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403be8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403bec:	d102      	bne.n	403bf4 <__aeabi_dcmpun+0x10>
  403bee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  403bf2:	d10a      	bne.n	403c0a <__aeabi_dcmpun+0x26>
  403bf4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403bf8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403bfc:	d102      	bne.n	403c04 <__aeabi_dcmpun+0x20>
  403bfe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  403c02:	d102      	bne.n	403c0a <__aeabi_dcmpun+0x26>
  403c04:	f04f 0000 	mov.w	r0, #0
  403c08:	4770      	bx	lr
  403c0a:	f04f 0001 	mov.w	r0, #1
  403c0e:	4770      	bx	lr

00403c10 <__aeabi_d2iz>:
  403c10:	ea4f 0241 	mov.w	r2, r1, lsl #1
  403c14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  403c18:	d215      	bcs.n	403c46 <__aeabi_d2iz+0x36>
  403c1a:	d511      	bpl.n	403c40 <__aeabi_d2iz+0x30>
  403c1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  403c20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  403c24:	d912      	bls.n	403c4c <__aeabi_d2iz+0x3c>
  403c26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  403c2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  403c2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  403c32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  403c36:	fa23 f002 	lsr.w	r0, r3, r2
  403c3a:	bf18      	it	ne
  403c3c:	4240      	negne	r0, r0
  403c3e:	4770      	bx	lr
  403c40:	f04f 0000 	mov.w	r0, #0
  403c44:	4770      	bx	lr
  403c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  403c4a:	d105      	bne.n	403c58 <__aeabi_d2iz+0x48>
  403c4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  403c50:	bf08      	it	eq
  403c52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  403c56:	4770      	bx	lr
  403c58:	f04f 0000 	mov.w	r0, #0
  403c5c:	4770      	bx	lr
  403c5e:	bf00      	nop

00403c60 <__errno>:
  403c60:	4b01      	ldr	r3, [pc, #4]	; (403c68 <__errno+0x8>)
  403c62:	6818      	ldr	r0, [r3, #0]
  403c64:	4770      	bx	lr
  403c66:	bf00      	nop
  403c68:	20400010 	.word	0x20400010

00403c6c <__libc_init_array>:
  403c6c:	b570      	push	{r4, r5, r6, lr}
  403c6e:	4e0f      	ldr	r6, [pc, #60]	; (403cac <__libc_init_array+0x40>)
  403c70:	4d0f      	ldr	r5, [pc, #60]	; (403cb0 <__libc_init_array+0x44>)
  403c72:	1b76      	subs	r6, r6, r5
  403c74:	10b6      	asrs	r6, r6, #2
  403c76:	bf18      	it	ne
  403c78:	2400      	movne	r4, #0
  403c7a:	d005      	beq.n	403c88 <__libc_init_array+0x1c>
  403c7c:	3401      	adds	r4, #1
  403c7e:	f855 3b04 	ldr.w	r3, [r5], #4
  403c82:	4798      	blx	r3
  403c84:	42a6      	cmp	r6, r4
  403c86:	d1f9      	bne.n	403c7c <__libc_init_array+0x10>
  403c88:	4e0a      	ldr	r6, [pc, #40]	; (403cb4 <__libc_init_array+0x48>)
  403c8a:	4d0b      	ldr	r5, [pc, #44]	; (403cb8 <__libc_init_array+0x4c>)
  403c8c:	1b76      	subs	r6, r6, r5
  403c8e:	f003 f909 	bl	406ea4 <_init>
  403c92:	10b6      	asrs	r6, r6, #2
  403c94:	bf18      	it	ne
  403c96:	2400      	movne	r4, #0
  403c98:	d006      	beq.n	403ca8 <__libc_init_array+0x3c>
  403c9a:	3401      	adds	r4, #1
  403c9c:	f855 3b04 	ldr.w	r3, [r5], #4
  403ca0:	4798      	blx	r3
  403ca2:	42a6      	cmp	r6, r4
  403ca4:	d1f9      	bne.n	403c9a <__libc_init_array+0x2e>
  403ca6:	bd70      	pop	{r4, r5, r6, pc}
  403ca8:	bd70      	pop	{r4, r5, r6, pc}
  403caa:	bf00      	nop
  403cac:	00406eb0 	.word	0x00406eb0
  403cb0:	00406eb0 	.word	0x00406eb0
  403cb4:	00406eb8 	.word	0x00406eb8
  403cb8:	00406eb0 	.word	0x00406eb0

00403cbc <iprintf>:
  403cbc:	b40f      	push	{r0, r1, r2, r3}
  403cbe:	b500      	push	{lr}
  403cc0:	4907      	ldr	r1, [pc, #28]	; (403ce0 <iprintf+0x24>)
  403cc2:	b083      	sub	sp, #12
  403cc4:	ab04      	add	r3, sp, #16
  403cc6:	6808      	ldr	r0, [r1, #0]
  403cc8:	f853 2b04 	ldr.w	r2, [r3], #4
  403ccc:	6881      	ldr	r1, [r0, #8]
  403cce:	9301      	str	r3, [sp, #4]
  403cd0:	f000 fd64 	bl	40479c <_vfiprintf_r>
  403cd4:	b003      	add	sp, #12
  403cd6:	f85d eb04 	ldr.w	lr, [sp], #4
  403cda:	b004      	add	sp, #16
  403cdc:	4770      	bx	lr
  403cde:	bf00      	nop
  403ce0:	20400010 	.word	0x20400010

00403ce4 <malloc>:
  403ce4:	4b02      	ldr	r3, [pc, #8]	; (403cf0 <malloc+0xc>)
  403ce6:	4601      	mov	r1, r0
  403ce8:	6818      	ldr	r0, [r3, #0]
  403cea:	f000 b80b 	b.w	403d04 <_malloc_r>
  403cee:	bf00      	nop
  403cf0:	20400010 	.word	0x20400010

00403cf4 <free>:
  403cf4:	4b02      	ldr	r3, [pc, #8]	; (403d00 <free+0xc>)
  403cf6:	4601      	mov	r1, r0
  403cf8:	6818      	ldr	r0, [r3, #0]
  403cfa:	f001 be6b 	b.w	4059d4 <_free_r>
  403cfe:	bf00      	nop
  403d00:	20400010 	.word	0x20400010

00403d04 <_malloc_r>:
  403d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403d08:	f101 060b 	add.w	r6, r1, #11
  403d0c:	2e16      	cmp	r6, #22
  403d0e:	b083      	sub	sp, #12
  403d10:	4605      	mov	r5, r0
  403d12:	f240 809e 	bls.w	403e52 <_malloc_r+0x14e>
  403d16:	f036 0607 	bics.w	r6, r6, #7
  403d1a:	f100 80bd 	bmi.w	403e98 <_malloc_r+0x194>
  403d1e:	42b1      	cmp	r1, r6
  403d20:	f200 80ba 	bhi.w	403e98 <_malloc_r+0x194>
  403d24:	f000 fb86 	bl	404434 <__malloc_lock>
  403d28:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403d2c:	f0c0 8293 	bcc.w	404256 <_malloc_r+0x552>
  403d30:	0a73      	lsrs	r3, r6, #9
  403d32:	f000 80b8 	beq.w	403ea6 <_malloc_r+0x1a2>
  403d36:	2b04      	cmp	r3, #4
  403d38:	f200 8179 	bhi.w	40402e <_malloc_r+0x32a>
  403d3c:	09b3      	lsrs	r3, r6, #6
  403d3e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  403d42:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403d46:	00c3      	lsls	r3, r0, #3
  403d48:	4fbf      	ldr	r7, [pc, #764]	; (404048 <_malloc_r+0x344>)
  403d4a:	443b      	add	r3, r7
  403d4c:	f1a3 0108 	sub.w	r1, r3, #8
  403d50:	685c      	ldr	r4, [r3, #4]
  403d52:	42a1      	cmp	r1, r4
  403d54:	d106      	bne.n	403d64 <_malloc_r+0x60>
  403d56:	e00c      	b.n	403d72 <_malloc_r+0x6e>
  403d58:	2a00      	cmp	r2, #0
  403d5a:	f280 80aa 	bge.w	403eb2 <_malloc_r+0x1ae>
  403d5e:	68e4      	ldr	r4, [r4, #12]
  403d60:	42a1      	cmp	r1, r4
  403d62:	d006      	beq.n	403d72 <_malloc_r+0x6e>
  403d64:	6863      	ldr	r3, [r4, #4]
  403d66:	f023 0303 	bic.w	r3, r3, #3
  403d6a:	1b9a      	subs	r2, r3, r6
  403d6c:	2a0f      	cmp	r2, #15
  403d6e:	ddf3      	ble.n	403d58 <_malloc_r+0x54>
  403d70:	4670      	mov	r0, lr
  403d72:	693c      	ldr	r4, [r7, #16]
  403d74:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40405c <_malloc_r+0x358>
  403d78:	4574      	cmp	r4, lr
  403d7a:	f000 81ab 	beq.w	4040d4 <_malloc_r+0x3d0>
  403d7e:	6863      	ldr	r3, [r4, #4]
  403d80:	f023 0303 	bic.w	r3, r3, #3
  403d84:	1b9a      	subs	r2, r3, r6
  403d86:	2a0f      	cmp	r2, #15
  403d88:	f300 8190 	bgt.w	4040ac <_malloc_r+0x3a8>
  403d8c:	2a00      	cmp	r2, #0
  403d8e:	f8c7 e014 	str.w	lr, [r7, #20]
  403d92:	f8c7 e010 	str.w	lr, [r7, #16]
  403d96:	f280 809d 	bge.w	403ed4 <_malloc_r+0x1d0>
  403d9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403d9e:	f080 8161 	bcs.w	404064 <_malloc_r+0x360>
  403da2:	08db      	lsrs	r3, r3, #3
  403da4:	f103 0c01 	add.w	ip, r3, #1
  403da8:	1099      	asrs	r1, r3, #2
  403daa:	687a      	ldr	r2, [r7, #4]
  403dac:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403db0:	f8c4 8008 	str.w	r8, [r4, #8]
  403db4:	2301      	movs	r3, #1
  403db6:	408b      	lsls	r3, r1
  403db8:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403dbc:	4313      	orrs	r3, r2
  403dbe:	3908      	subs	r1, #8
  403dc0:	60e1      	str	r1, [r4, #12]
  403dc2:	607b      	str	r3, [r7, #4]
  403dc4:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403dc8:	f8c8 400c 	str.w	r4, [r8, #12]
  403dcc:	1082      	asrs	r2, r0, #2
  403dce:	2401      	movs	r4, #1
  403dd0:	4094      	lsls	r4, r2
  403dd2:	429c      	cmp	r4, r3
  403dd4:	f200 808b 	bhi.w	403eee <_malloc_r+0x1ea>
  403dd8:	421c      	tst	r4, r3
  403dda:	d106      	bne.n	403dea <_malloc_r+0xe6>
  403ddc:	f020 0003 	bic.w	r0, r0, #3
  403de0:	0064      	lsls	r4, r4, #1
  403de2:	421c      	tst	r4, r3
  403de4:	f100 0004 	add.w	r0, r0, #4
  403de8:	d0fa      	beq.n	403de0 <_malloc_r+0xdc>
  403dea:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403dee:	46cc      	mov	ip, r9
  403df0:	4680      	mov	r8, r0
  403df2:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403df6:	459c      	cmp	ip, r3
  403df8:	d107      	bne.n	403e0a <_malloc_r+0x106>
  403dfa:	e16d      	b.n	4040d8 <_malloc_r+0x3d4>
  403dfc:	2a00      	cmp	r2, #0
  403dfe:	f280 817b 	bge.w	4040f8 <_malloc_r+0x3f4>
  403e02:	68db      	ldr	r3, [r3, #12]
  403e04:	459c      	cmp	ip, r3
  403e06:	f000 8167 	beq.w	4040d8 <_malloc_r+0x3d4>
  403e0a:	6859      	ldr	r1, [r3, #4]
  403e0c:	f021 0103 	bic.w	r1, r1, #3
  403e10:	1b8a      	subs	r2, r1, r6
  403e12:	2a0f      	cmp	r2, #15
  403e14:	ddf2      	ble.n	403dfc <_malloc_r+0xf8>
  403e16:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403e1a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  403e1e:	9300      	str	r3, [sp, #0]
  403e20:	199c      	adds	r4, r3, r6
  403e22:	4628      	mov	r0, r5
  403e24:	f046 0601 	orr.w	r6, r6, #1
  403e28:	f042 0501 	orr.w	r5, r2, #1
  403e2c:	605e      	str	r6, [r3, #4]
  403e2e:	f8c8 c00c 	str.w	ip, [r8, #12]
  403e32:	f8cc 8008 	str.w	r8, [ip, #8]
  403e36:	617c      	str	r4, [r7, #20]
  403e38:	613c      	str	r4, [r7, #16]
  403e3a:	f8c4 e00c 	str.w	lr, [r4, #12]
  403e3e:	f8c4 e008 	str.w	lr, [r4, #8]
  403e42:	6065      	str	r5, [r4, #4]
  403e44:	505a      	str	r2, [r3, r1]
  403e46:	f000 fafb 	bl	404440 <__malloc_unlock>
  403e4a:	9b00      	ldr	r3, [sp, #0]
  403e4c:	f103 0408 	add.w	r4, r3, #8
  403e50:	e01e      	b.n	403e90 <_malloc_r+0x18c>
  403e52:	2910      	cmp	r1, #16
  403e54:	d820      	bhi.n	403e98 <_malloc_r+0x194>
  403e56:	f000 faed 	bl	404434 <__malloc_lock>
  403e5a:	2610      	movs	r6, #16
  403e5c:	2318      	movs	r3, #24
  403e5e:	2002      	movs	r0, #2
  403e60:	4f79      	ldr	r7, [pc, #484]	; (404048 <_malloc_r+0x344>)
  403e62:	443b      	add	r3, r7
  403e64:	f1a3 0208 	sub.w	r2, r3, #8
  403e68:	685c      	ldr	r4, [r3, #4]
  403e6a:	4294      	cmp	r4, r2
  403e6c:	f000 813d 	beq.w	4040ea <_malloc_r+0x3e6>
  403e70:	6863      	ldr	r3, [r4, #4]
  403e72:	68e1      	ldr	r1, [r4, #12]
  403e74:	68a6      	ldr	r6, [r4, #8]
  403e76:	f023 0303 	bic.w	r3, r3, #3
  403e7a:	4423      	add	r3, r4
  403e7c:	4628      	mov	r0, r5
  403e7e:	685a      	ldr	r2, [r3, #4]
  403e80:	60f1      	str	r1, [r6, #12]
  403e82:	f042 0201 	orr.w	r2, r2, #1
  403e86:	608e      	str	r6, [r1, #8]
  403e88:	605a      	str	r2, [r3, #4]
  403e8a:	f000 fad9 	bl	404440 <__malloc_unlock>
  403e8e:	3408      	adds	r4, #8
  403e90:	4620      	mov	r0, r4
  403e92:	b003      	add	sp, #12
  403e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403e98:	2400      	movs	r4, #0
  403e9a:	230c      	movs	r3, #12
  403e9c:	4620      	mov	r0, r4
  403e9e:	602b      	str	r3, [r5, #0]
  403ea0:	b003      	add	sp, #12
  403ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ea6:	2040      	movs	r0, #64	; 0x40
  403ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
  403eac:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403eb0:	e74a      	b.n	403d48 <_malloc_r+0x44>
  403eb2:	4423      	add	r3, r4
  403eb4:	68e1      	ldr	r1, [r4, #12]
  403eb6:	685a      	ldr	r2, [r3, #4]
  403eb8:	68a6      	ldr	r6, [r4, #8]
  403eba:	f042 0201 	orr.w	r2, r2, #1
  403ebe:	60f1      	str	r1, [r6, #12]
  403ec0:	4628      	mov	r0, r5
  403ec2:	608e      	str	r6, [r1, #8]
  403ec4:	605a      	str	r2, [r3, #4]
  403ec6:	f000 fabb 	bl	404440 <__malloc_unlock>
  403eca:	3408      	adds	r4, #8
  403ecc:	4620      	mov	r0, r4
  403ece:	b003      	add	sp, #12
  403ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ed4:	4423      	add	r3, r4
  403ed6:	4628      	mov	r0, r5
  403ed8:	685a      	ldr	r2, [r3, #4]
  403eda:	f042 0201 	orr.w	r2, r2, #1
  403ede:	605a      	str	r2, [r3, #4]
  403ee0:	f000 faae 	bl	404440 <__malloc_unlock>
  403ee4:	3408      	adds	r4, #8
  403ee6:	4620      	mov	r0, r4
  403ee8:	b003      	add	sp, #12
  403eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403eee:	68bc      	ldr	r4, [r7, #8]
  403ef0:	6863      	ldr	r3, [r4, #4]
  403ef2:	f023 0803 	bic.w	r8, r3, #3
  403ef6:	45b0      	cmp	r8, r6
  403ef8:	d304      	bcc.n	403f04 <_malloc_r+0x200>
  403efa:	eba8 0306 	sub.w	r3, r8, r6
  403efe:	2b0f      	cmp	r3, #15
  403f00:	f300 8085 	bgt.w	40400e <_malloc_r+0x30a>
  403f04:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404060 <_malloc_r+0x35c>
  403f08:	4b50      	ldr	r3, [pc, #320]	; (40404c <_malloc_r+0x348>)
  403f0a:	f8d9 2000 	ldr.w	r2, [r9]
  403f0e:	681b      	ldr	r3, [r3, #0]
  403f10:	3201      	adds	r2, #1
  403f12:	4433      	add	r3, r6
  403f14:	eb04 0a08 	add.w	sl, r4, r8
  403f18:	f000 8155 	beq.w	4041c6 <_malloc_r+0x4c2>
  403f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403f20:	330f      	adds	r3, #15
  403f22:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403f26:	f02b 0b0f 	bic.w	fp, fp, #15
  403f2a:	4659      	mov	r1, fp
  403f2c:	4628      	mov	r0, r5
  403f2e:	f000 fa8d 	bl	40444c <_sbrk_r>
  403f32:	1c41      	adds	r1, r0, #1
  403f34:	4602      	mov	r2, r0
  403f36:	f000 80fc 	beq.w	404132 <_malloc_r+0x42e>
  403f3a:	4582      	cmp	sl, r0
  403f3c:	f200 80f7 	bhi.w	40412e <_malloc_r+0x42a>
  403f40:	4b43      	ldr	r3, [pc, #268]	; (404050 <_malloc_r+0x34c>)
  403f42:	6819      	ldr	r1, [r3, #0]
  403f44:	4459      	add	r1, fp
  403f46:	6019      	str	r1, [r3, #0]
  403f48:	f000 814d 	beq.w	4041e6 <_malloc_r+0x4e2>
  403f4c:	f8d9 0000 	ldr.w	r0, [r9]
  403f50:	3001      	adds	r0, #1
  403f52:	bf1b      	ittet	ne
  403f54:	eba2 0a0a 	subne.w	sl, r2, sl
  403f58:	4451      	addne	r1, sl
  403f5a:	f8c9 2000 	streq.w	r2, [r9]
  403f5e:	6019      	strne	r1, [r3, #0]
  403f60:	f012 0107 	ands.w	r1, r2, #7
  403f64:	f000 8115 	beq.w	404192 <_malloc_r+0x48e>
  403f68:	f1c1 0008 	rsb	r0, r1, #8
  403f6c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403f70:	4402      	add	r2, r0
  403f72:	3108      	adds	r1, #8
  403f74:	eb02 090b 	add.w	r9, r2, fp
  403f78:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403f7c:	eba1 0909 	sub.w	r9, r1, r9
  403f80:	4649      	mov	r1, r9
  403f82:	4628      	mov	r0, r5
  403f84:	9301      	str	r3, [sp, #4]
  403f86:	9200      	str	r2, [sp, #0]
  403f88:	f000 fa60 	bl	40444c <_sbrk_r>
  403f8c:	1c43      	adds	r3, r0, #1
  403f8e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  403f92:	f000 8143 	beq.w	40421c <_malloc_r+0x518>
  403f96:	1a80      	subs	r0, r0, r2
  403f98:	4448      	add	r0, r9
  403f9a:	f040 0001 	orr.w	r0, r0, #1
  403f9e:	6819      	ldr	r1, [r3, #0]
  403fa0:	60ba      	str	r2, [r7, #8]
  403fa2:	4449      	add	r1, r9
  403fa4:	42bc      	cmp	r4, r7
  403fa6:	6050      	str	r0, [r2, #4]
  403fa8:	6019      	str	r1, [r3, #0]
  403faa:	d017      	beq.n	403fdc <_malloc_r+0x2d8>
  403fac:	f1b8 0f0f 	cmp.w	r8, #15
  403fb0:	f240 80fb 	bls.w	4041aa <_malloc_r+0x4a6>
  403fb4:	6860      	ldr	r0, [r4, #4]
  403fb6:	f1a8 020c 	sub.w	r2, r8, #12
  403fba:	f022 0207 	bic.w	r2, r2, #7
  403fbe:	eb04 0e02 	add.w	lr, r4, r2
  403fc2:	f000 0001 	and.w	r0, r0, #1
  403fc6:	f04f 0c05 	mov.w	ip, #5
  403fca:	4310      	orrs	r0, r2
  403fcc:	2a0f      	cmp	r2, #15
  403fce:	6060      	str	r0, [r4, #4]
  403fd0:	f8ce c004 	str.w	ip, [lr, #4]
  403fd4:	f8ce c008 	str.w	ip, [lr, #8]
  403fd8:	f200 8117 	bhi.w	40420a <_malloc_r+0x506>
  403fdc:	4b1d      	ldr	r3, [pc, #116]	; (404054 <_malloc_r+0x350>)
  403fde:	68bc      	ldr	r4, [r7, #8]
  403fe0:	681a      	ldr	r2, [r3, #0]
  403fe2:	4291      	cmp	r1, r2
  403fe4:	bf88      	it	hi
  403fe6:	6019      	strhi	r1, [r3, #0]
  403fe8:	4b1b      	ldr	r3, [pc, #108]	; (404058 <_malloc_r+0x354>)
  403fea:	681a      	ldr	r2, [r3, #0]
  403fec:	4291      	cmp	r1, r2
  403fee:	6862      	ldr	r2, [r4, #4]
  403ff0:	bf88      	it	hi
  403ff2:	6019      	strhi	r1, [r3, #0]
  403ff4:	f022 0203 	bic.w	r2, r2, #3
  403ff8:	4296      	cmp	r6, r2
  403ffa:	eba2 0306 	sub.w	r3, r2, r6
  403ffe:	d801      	bhi.n	404004 <_malloc_r+0x300>
  404000:	2b0f      	cmp	r3, #15
  404002:	dc04      	bgt.n	40400e <_malloc_r+0x30a>
  404004:	4628      	mov	r0, r5
  404006:	f000 fa1b 	bl	404440 <__malloc_unlock>
  40400a:	2400      	movs	r4, #0
  40400c:	e740      	b.n	403e90 <_malloc_r+0x18c>
  40400e:	19a2      	adds	r2, r4, r6
  404010:	f043 0301 	orr.w	r3, r3, #1
  404014:	f046 0601 	orr.w	r6, r6, #1
  404018:	6066      	str	r6, [r4, #4]
  40401a:	4628      	mov	r0, r5
  40401c:	60ba      	str	r2, [r7, #8]
  40401e:	6053      	str	r3, [r2, #4]
  404020:	f000 fa0e 	bl	404440 <__malloc_unlock>
  404024:	3408      	adds	r4, #8
  404026:	4620      	mov	r0, r4
  404028:	b003      	add	sp, #12
  40402a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40402e:	2b14      	cmp	r3, #20
  404030:	d971      	bls.n	404116 <_malloc_r+0x412>
  404032:	2b54      	cmp	r3, #84	; 0x54
  404034:	f200 80a3 	bhi.w	40417e <_malloc_r+0x47a>
  404038:	0b33      	lsrs	r3, r6, #12
  40403a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40403e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  404042:	00c3      	lsls	r3, r0, #3
  404044:	e680      	b.n	403d48 <_malloc_r+0x44>
  404046:	bf00      	nop
  404048:	20400440 	.word	0x20400440
  40404c:	20400bc4 	.word	0x20400bc4
  404050:	20400b94 	.word	0x20400b94
  404054:	20400bbc 	.word	0x20400bbc
  404058:	20400bc0 	.word	0x20400bc0
  40405c:	20400448 	.word	0x20400448
  404060:	20400848 	.word	0x20400848
  404064:	0a5a      	lsrs	r2, r3, #9
  404066:	2a04      	cmp	r2, #4
  404068:	d95b      	bls.n	404122 <_malloc_r+0x41e>
  40406a:	2a14      	cmp	r2, #20
  40406c:	f200 80ae 	bhi.w	4041cc <_malloc_r+0x4c8>
  404070:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404074:	00c9      	lsls	r1, r1, #3
  404076:	325b      	adds	r2, #91	; 0x5b
  404078:	eb07 0c01 	add.w	ip, r7, r1
  40407c:	5879      	ldr	r1, [r7, r1]
  40407e:	f1ac 0c08 	sub.w	ip, ip, #8
  404082:	458c      	cmp	ip, r1
  404084:	f000 8088 	beq.w	404198 <_malloc_r+0x494>
  404088:	684a      	ldr	r2, [r1, #4]
  40408a:	f022 0203 	bic.w	r2, r2, #3
  40408e:	4293      	cmp	r3, r2
  404090:	d273      	bcs.n	40417a <_malloc_r+0x476>
  404092:	6889      	ldr	r1, [r1, #8]
  404094:	458c      	cmp	ip, r1
  404096:	d1f7      	bne.n	404088 <_malloc_r+0x384>
  404098:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40409c:	687b      	ldr	r3, [r7, #4]
  40409e:	60e2      	str	r2, [r4, #12]
  4040a0:	f8c4 c008 	str.w	ip, [r4, #8]
  4040a4:	6094      	str	r4, [r2, #8]
  4040a6:	f8cc 400c 	str.w	r4, [ip, #12]
  4040aa:	e68f      	b.n	403dcc <_malloc_r+0xc8>
  4040ac:	19a1      	adds	r1, r4, r6
  4040ae:	f046 0c01 	orr.w	ip, r6, #1
  4040b2:	f042 0601 	orr.w	r6, r2, #1
  4040b6:	f8c4 c004 	str.w	ip, [r4, #4]
  4040ba:	4628      	mov	r0, r5
  4040bc:	6179      	str	r1, [r7, #20]
  4040be:	6139      	str	r1, [r7, #16]
  4040c0:	f8c1 e00c 	str.w	lr, [r1, #12]
  4040c4:	f8c1 e008 	str.w	lr, [r1, #8]
  4040c8:	604e      	str	r6, [r1, #4]
  4040ca:	50e2      	str	r2, [r4, r3]
  4040cc:	f000 f9b8 	bl	404440 <__malloc_unlock>
  4040d0:	3408      	adds	r4, #8
  4040d2:	e6dd      	b.n	403e90 <_malloc_r+0x18c>
  4040d4:	687b      	ldr	r3, [r7, #4]
  4040d6:	e679      	b.n	403dcc <_malloc_r+0xc8>
  4040d8:	f108 0801 	add.w	r8, r8, #1
  4040dc:	f018 0f03 	tst.w	r8, #3
  4040e0:	f10c 0c08 	add.w	ip, ip, #8
  4040e4:	f47f ae85 	bne.w	403df2 <_malloc_r+0xee>
  4040e8:	e02d      	b.n	404146 <_malloc_r+0x442>
  4040ea:	68dc      	ldr	r4, [r3, #12]
  4040ec:	42a3      	cmp	r3, r4
  4040ee:	bf08      	it	eq
  4040f0:	3002      	addeq	r0, #2
  4040f2:	f43f ae3e 	beq.w	403d72 <_malloc_r+0x6e>
  4040f6:	e6bb      	b.n	403e70 <_malloc_r+0x16c>
  4040f8:	4419      	add	r1, r3
  4040fa:	461c      	mov	r4, r3
  4040fc:	684a      	ldr	r2, [r1, #4]
  4040fe:	68db      	ldr	r3, [r3, #12]
  404100:	f854 6f08 	ldr.w	r6, [r4, #8]!
  404104:	f042 0201 	orr.w	r2, r2, #1
  404108:	604a      	str	r2, [r1, #4]
  40410a:	4628      	mov	r0, r5
  40410c:	60f3      	str	r3, [r6, #12]
  40410e:	609e      	str	r6, [r3, #8]
  404110:	f000 f996 	bl	404440 <__malloc_unlock>
  404114:	e6bc      	b.n	403e90 <_malloc_r+0x18c>
  404116:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40411a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40411e:	00c3      	lsls	r3, r0, #3
  404120:	e612      	b.n	403d48 <_malloc_r+0x44>
  404122:	099a      	lsrs	r2, r3, #6
  404124:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404128:	00c9      	lsls	r1, r1, #3
  40412a:	3238      	adds	r2, #56	; 0x38
  40412c:	e7a4      	b.n	404078 <_malloc_r+0x374>
  40412e:	42bc      	cmp	r4, r7
  404130:	d054      	beq.n	4041dc <_malloc_r+0x4d8>
  404132:	68bc      	ldr	r4, [r7, #8]
  404134:	6862      	ldr	r2, [r4, #4]
  404136:	f022 0203 	bic.w	r2, r2, #3
  40413a:	e75d      	b.n	403ff8 <_malloc_r+0x2f4>
  40413c:	f859 3908 	ldr.w	r3, [r9], #-8
  404140:	4599      	cmp	r9, r3
  404142:	f040 8086 	bne.w	404252 <_malloc_r+0x54e>
  404146:	f010 0f03 	tst.w	r0, #3
  40414a:	f100 30ff 	add.w	r0, r0, #4294967295
  40414e:	d1f5      	bne.n	40413c <_malloc_r+0x438>
  404150:	687b      	ldr	r3, [r7, #4]
  404152:	ea23 0304 	bic.w	r3, r3, r4
  404156:	607b      	str	r3, [r7, #4]
  404158:	0064      	lsls	r4, r4, #1
  40415a:	429c      	cmp	r4, r3
  40415c:	f63f aec7 	bhi.w	403eee <_malloc_r+0x1ea>
  404160:	2c00      	cmp	r4, #0
  404162:	f43f aec4 	beq.w	403eee <_malloc_r+0x1ea>
  404166:	421c      	tst	r4, r3
  404168:	4640      	mov	r0, r8
  40416a:	f47f ae3e 	bne.w	403dea <_malloc_r+0xe6>
  40416e:	0064      	lsls	r4, r4, #1
  404170:	421c      	tst	r4, r3
  404172:	f100 0004 	add.w	r0, r0, #4
  404176:	d0fa      	beq.n	40416e <_malloc_r+0x46a>
  404178:	e637      	b.n	403dea <_malloc_r+0xe6>
  40417a:	468c      	mov	ip, r1
  40417c:	e78c      	b.n	404098 <_malloc_r+0x394>
  40417e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404182:	d815      	bhi.n	4041b0 <_malloc_r+0x4ac>
  404184:	0bf3      	lsrs	r3, r6, #15
  404186:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40418a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40418e:	00c3      	lsls	r3, r0, #3
  404190:	e5da      	b.n	403d48 <_malloc_r+0x44>
  404192:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404196:	e6ed      	b.n	403f74 <_malloc_r+0x270>
  404198:	687b      	ldr	r3, [r7, #4]
  40419a:	1092      	asrs	r2, r2, #2
  40419c:	2101      	movs	r1, #1
  40419e:	fa01 f202 	lsl.w	r2, r1, r2
  4041a2:	4313      	orrs	r3, r2
  4041a4:	607b      	str	r3, [r7, #4]
  4041a6:	4662      	mov	r2, ip
  4041a8:	e779      	b.n	40409e <_malloc_r+0x39a>
  4041aa:	2301      	movs	r3, #1
  4041ac:	6053      	str	r3, [r2, #4]
  4041ae:	e729      	b.n	404004 <_malloc_r+0x300>
  4041b0:	f240 5254 	movw	r2, #1364	; 0x554
  4041b4:	4293      	cmp	r3, r2
  4041b6:	d822      	bhi.n	4041fe <_malloc_r+0x4fa>
  4041b8:	0cb3      	lsrs	r3, r6, #18
  4041ba:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4041be:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4041c2:	00c3      	lsls	r3, r0, #3
  4041c4:	e5c0      	b.n	403d48 <_malloc_r+0x44>
  4041c6:	f103 0b10 	add.w	fp, r3, #16
  4041ca:	e6ae      	b.n	403f2a <_malloc_r+0x226>
  4041cc:	2a54      	cmp	r2, #84	; 0x54
  4041ce:	d829      	bhi.n	404224 <_malloc_r+0x520>
  4041d0:	0b1a      	lsrs	r2, r3, #12
  4041d2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4041d6:	00c9      	lsls	r1, r1, #3
  4041d8:	326e      	adds	r2, #110	; 0x6e
  4041da:	e74d      	b.n	404078 <_malloc_r+0x374>
  4041dc:	4b20      	ldr	r3, [pc, #128]	; (404260 <_malloc_r+0x55c>)
  4041de:	6819      	ldr	r1, [r3, #0]
  4041e0:	4459      	add	r1, fp
  4041e2:	6019      	str	r1, [r3, #0]
  4041e4:	e6b2      	b.n	403f4c <_malloc_r+0x248>
  4041e6:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4041ea:	2800      	cmp	r0, #0
  4041ec:	f47f aeae 	bne.w	403f4c <_malloc_r+0x248>
  4041f0:	eb08 030b 	add.w	r3, r8, fp
  4041f4:	68ba      	ldr	r2, [r7, #8]
  4041f6:	f043 0301 	orr.w	r3, r3, #1
  4041fa:	6053      	str	r3, [r2, #4]
  4041fc:	e6ee      	b.n	403fdc <_malloc_r+0x2d8>
  4041fe:	207f      	movs	r0, #127	; 0x7f
  404200:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  404204:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  404208:	e59e      	b.n	403d48 <_malloc_r+0x44>
  40420a:	f104 0108 	add.w	r1, r4, #8
  40420e:	4628      	mov	r0, r5
  404210:	9300      	str	r3, [sp, #0]
  404212:	f001 fbdf 	bl	4059d4 <_free_r>
  404216:	9b00      	ldr	r3, [sp, #0]
  404218:	6819      	ldr	r1, [r3, #0]
  40421a:	e6df      	b.n	403fdc <_malloc_r+0x2d8>
  40421c:	2001      	movs	r0, #1
  40421e:	f04f 0900 	mov.w	r9, #0
  404222:	e6bc      	b.n	403f9e <_malloc_r+0x29a>
  404224:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404228:	d805      	bhi.n	404236 <_malloc_r+0x532>
  40422a:	0bda      	lsrs	r2, r3, #15
  40422c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404230:	00c9      	lsls	r1, r1, #3
  404232:	3277      	adds	r2, #119	; 0x77
  404234:	e720      	b.n	404078 <_malloc_r+0x374>
  404236:	f240 5154 	movw	r1, #1364	; 0x554
  40423a:	428a      	cmp	r2, r1
  40423c:	d805      	bhi.n	40424a <_malloc_r+0x546>
  40423e:	0c9a      	lsrs	r2, r3, #18
  404240:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404244:	00c9      	lsls	r1, r1, #3
  404246:	327c      	adds	r2, #124	; 0x7c
  404248:	e716      	b.n	404078 <_malloc_r+0x374>
  40424a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40424e:	227e      	movs	r2, #126	; 0x7e
  404250:	e712      	b.n	404078 <_malloc_r+0x374>
  404252:	687b      	ldr	r3, [r7, #4]
  404254:	e780      	b.n	404158 <_malloc_r+0x454>
  404256:	08f0      	lsrs	r0, r6, #3
  404258:	f106 0308 	add.w	r3, r6, #8
  40425c:	e600      	b.n	403e60 <_malloc_r+0x15c>
  40425e:	bf00      	nop
  404260:	20400b94 	.word	0x20400b94

00404264 <memcpy>:
  404264:	4684      	mov	ip, r0
  404266:	ea41 0300 	orr.w	r3, r1, r0
  40426a:	f013 0303 	ands.w	r3, r3, #3
  40426e:	d16d      	bne.n	40434c <memcpy+0xe8>
  404270:	3a40      	subs	r2, #64	; 0x40
  404272:	d341      	bcc.n	4042f8 <memcpy+0x94>
  404274:	f851 3b04 	ldr.w	r3, [r1], #4
  404278:	f840 3b04 	str.w	r3, [r0], #4
  40427c:	f851 3b04 	ldr.w	r3, [r1], #4
  404280:	f840 3b04 	str.w	r3, [r0], #4
  404284:	f851 3b04 	ldr.w	r3, [r1], #4
  404288:	f840 3b04 	str.w	r3, [r0], #4
  40428c:	f851 3b04 	ldr.w	r3, [r1], #4
  404290:	f840 3b04 	str.w	r3, [r0], #4
  404294:	f851 3b04 	ldr.w	r3, [r1], #4
  404298:	f840 3b04 	str.w	r3, [r0], #4
  40429c:	f851 3b04 	ldr.w	r3, [r1], #4
  4042a0:	f840 3b04 	str.w	r3, [r0], #4
  4042a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4042a8:	f840 3b04 	str.w	r3, [r0], #4
  4042ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4042b0:	f840 3b04 	str.w	r3, [r0], #4
  4042b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4042b8:	f840 3b04 	str.w	r3, [r0], #4
  4042bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4042c0:	f840 3b04 	str.w	r3, [r0], #4
  4042c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4042c8:	f840 3b04 	str.w	r3, [r0], #4
  4042cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4042d0:	f840 3b04 	str.w	r3, [r0], #4
  4042d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4042d8:	f840 3b04 	str.w	r3, [r0], #4
  4042dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4042e0:	f840 3b04 	str.w	r3, [r0], #4
  4042e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4042e8:	f840 3b04 	str.w	r3, [r0], #4
  4042ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4042f0:	f840 3b04 	str.w	r3, [r0], #4
  4042f4:	3a40      	subs	r2, #64	; 0x40
  4042f6:	d2bd      	bcs.n	404274 <memcpy+0x10>
  4042f8:	3230      	adds	r2, #48	; 0x30
  4042fa:	d311      	bcc.n	404320 <memcpy+0xbc>
  4042fc:	f851 3b04 	ldr.w	r3, [r1], #4
  404300:	f840 3b04 	str.w	r3, [r0], #4
  404304:	f851 3b04 	ldr.w	r3, [r1], #4
  404308:	f840 3b04 	str.w	r3, [r0], #4
  40430c:	f851 3b04 	ldr.w	r3, [r1], #4
  404310:	f840 3b04 	str.w	r3, [r0], #4
  404314:	f851 3b04 	ldr.w	r3, [r1], #4
  404318:	f840 3b04 	str.w	r3, [r0], #4
  40431c:	3a10      	subs	r2, #16
  40431e:	d2ed      	bcs.n	4042fc <memcpy+0x98>
  404320:	320c      	adds	r2, #12
  404322:	d305      	bcc.n	404330 <memcpy+0xcc>
  404324:	f851 3b04 	ldr.w	r3, [r1], #4
  404328:	f840 3b04 	str.w	r3, [r0], #4
  40432c:	3a04      	subs	r2, #4
  40432e:	d2f9      	bcs.n	404324 <memcpy+0xc0>
  404330:	3204      	adds	r2, #4
  404332:	d008      	beq.n	404346 <memcpy+0xe2>
  404334:	07d2      	lsls	r2, r2, #31
  404336:	bf1c      	itt	ne
  404338:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40433c:	f800 3b01 	strbne.w	r3, [r0], #1
  404340:	d301      	bcc.n	404346 <memcpy+0xe2>
  404342:	880b      	ldrh	r3, [r1, #0]
  404344:	8003      	strh	r3, [r0, #0]
  404346:	4660      	mov	r0, ip
  404348:	4770      	bx	lr
  40434a:	bf00      	nop
  40434c:	2a08      	cmp	r2, #8
  40434e:	d313      	bcc.n	404378 <memcpy+0x114>
  404350:	078b      	lsls	r3, r1, #30
  404352:	d08d      	beq.n	404270 <memcpy+0xc>
  404354:	f010 0303 	ands.w	r3, r0, #3
  404358:	d08a      	beq.n	404270 <memcpy+0xc>
  40435a:	f1c3 0304 	rsb	r3, r3, #4
  40435e:	1ad2      	subs	r2, r2, r3
  404360:	07db      	lsls	r3, r3, #31
  404362:	bf1c      	itt	ne
  404364:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404368:	f800 3b01 	strbne.w	r3, [r0], #1
  40436c:	d380      	bcc.n	404270 <memcpy+0xc>
  40436e:	f831 3b02 	ldrh.w	r3, [r1], #2
  404372:	f820 3b02 	strh.w	r3, [r0], #2
  404376:	e77b      	b.n	404270 <memcpy+0xc>
  404378:	3a04      	subs	r2, #4
  40437a:	d3d9      	bcc.n	404330 <memcpy+0xcc>
  40437c:	3a01      	subs	r2, #1
  40437e:	f811 3b01 	ldrb.w	r3, [r1], #1
  404382:	f800 3b01 	strb.w	r3, [r0], #1
  404386:	d2f9      	bcs.n	40437c <memcpy+0x118>
  404388:	780b      	ldrb	r3, [r1, #0]
  40438a:	7003      	strb	r3, [r0, #0]
  40438c:	784b      	ldrb	r3, [r1, #1]
  40438e:	7043      	strb	r3, [r0, #1]
  404390:	788b      	ldrb	r3, [r1, #2]
  404392:	7083      	strb	r3, [r0, #2]
  404394:	4660      	mov	r0, ip
  404396:	4770      	bx	lr

00404398 <memset>:
  404398:	b470      	push	{r4, r5, r6}
  40439a:	0786      	lsls	r6, r0, #30
  40439c:	d046      	beq.n	40442c <memset+0x94>
  40439e:	1e54      	subs	r4, r2, #1
  4043a0:	2a00      	cmp	r2, #0
  4043a2:	d041      	beq.n	404428 <memset+0x90>
  4043a4:	b2ca      	uxtb	r2, r1
  4043a6:	4603      	mov	r3, r0
  4043a8:	e002      	b.n	4043b0 <memset+0x18>
  4043aa:	f114 34ff 	adds.w	r4, r4, #4294967295
  4043ae:	d33b      	bcc.n	404428 <memset+0x90>
  4043b0:	f803 2b01 	strb.w	r2, [r3], #1
  4043b4:	079d      	lsls	r5, r3, #30
  4043b6:	d1f8      	bne.n	4043aa <memset+0x12>
  4043b8:	2c03      	cmp	r4, #3
  4043ba:	d92e      	bls.n	40441a <memset+0x82>
  4043bc:	b2cd      	uxtb	r5, r1
  4043be:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4043c2:	2c0f      	cmp	r4, #15
  4043c4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4043c8:	d919      	bls.n	4043fe <memset+0x66>
  4043ca:	f103 0210 	add.w	r2, r3, #16
  4043ce:	4626      	mov	r6, r4
  4043d0:	3e10      	subs	r6, #16
  4043d2:	2e0f      	cmp	r6, #15
  4043d4:	f842 5c10 	str.w	r5, [r2, #-16]
  4043d8:	f842 5c0c 	str.w	r5, [r2, #-12]
  4043dc:	f842 5c08 	str.w	r5, [r2, #-8]
  4043e0:	f842 5c04 	str.w	r5, [r2, #-4]
  4043e4:	f102 0210 	add.w	r2, r2, #16
  4043e8:	d8f2      	bhi.n	4043d0 <memset+0x38>
  4043ea:	f1a4 0210 	sub.w	r2, r4, #16
  4043ee:	f022 020f 	bic.w	r2, r2, #15
  4043f2:	f004 040f 	and.w	r4, r4, #15
  4043f6:	3210      	adds	r2, #16
  4043f8:	2c03      	cmp	r4, #3
  4043fa:	4413      	add	r3, r2
  4043fc:	d90d      	bls.n	40441a <memset+0x82>
  4043fe:	461e      	mov	r6, r3
  404400:	4622      	mov	r2, r4
  404402:	3a04      	subs	r2, #4
  404404:	2a03      	cmp	r2, #3
  404406:	f846 5b04 	str.w	r5, [r6], #4
  40440a:	d8fa      	bhi.n	404402 <memset+0x6a>
  40440c:	1f22      	subs	r2, r4, #4
  40440e:	f022 0203 	bic.w	r2, r2, #3
  404412:	3204      	adds	r2, #4
  404414:	4413      	add	r3, r2
  404416:	f004 0403 	and.w	r4, r4, #3
  40441a:	b12c      	cbz	r4, 404428 <memset+0x90>
  40441c:	b2c9      	uxtb	r1, r1
  40441e:	441c      	add	r4, r3
  404420:	f803 1b01 	strb.w	r1, [r3], #1
  404424:	429c      	cmp	r4, r3
  404426:	d1fb      	bne.n	404420 <memset+0x88>
  404428:	bc70      	pop	{r4, r5, r6}
  40442a:	4770      	bx	lr
  40442c:	4614      	mov	r4, r2
  40442e:	4603      	mov	r3, r0
  404430:	e7c2      	b.n	4043b8 <memset+0x20>
  404432:	bf00      	nop

00404434 <__malloc_lock>:
  404434:	4801      	ldr	r0, [pc, #4]	; (40443c <__malloc_lock+0x8>)
  404436:	f001 bd67 	b.w	405f08 <__retarget_lock_acquire_recursive>
  40443a:	bf00      	nop
  40443c:	20400cb8 	.word	0x20400cb8

00404440 <__malloc_unlock>:
  404440:	4801      	ldr	r0, [pc, #4]	; (404448 <__malloc_unlock+0x8>)
  404442:	f001 bd63 	b.w	405f0c <__retarget_lock_release_recursive>
  404446:	bf00      	nop
  404448:	20400cb8 	.word	0x20400cb8

0040444c <_sbrk_r>:
  40444c:	b538      	push	{r3, r4, r5, lr}
  40444e:	4c07      	ldr	r4, [pc, #28]	; (40446c <_sbrk_r+0x20>)
  404450:	2300      	movs	r3, #0
  404452:	4605      	mov	r5, r0
  404454:	4608      	mov	r0, r1
  404456:	6023      	str	r3, [r4, #0]
  404458:	f7fc fc0e 	bl	400c78 <_sbrk>
  40445c:	1c43      	adds	r3, r0, #1
  40445e:	d000      	beq.n	404462 <_sbrk_r+0x16>
  404460:	bd38      	pop	{r3, r4, r5, pc}
  404462:	6823      	ldr	r3, [r4, #0]
  404464:	2b00      	cmp	r3, #0
  404466:	d0fb      	beq.n	404460 <_sbrk_r+0x14>
  404468:	602b      	str	r3, [r5, #0]
  40446a:	bd38      	pop	{r3, r4, r5, pc}
  40446c:	20400ccc 	.word	0x20400ccc

00404470 <setbuf>:
  404470:	2900      	cmp	r1, #0
  404472:	bf0c      	ite	eq
  404474:	2202      	moveq	r2, #2
  404476:	2200      	movne	r2, #0
  404478:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40447c:	f000 b800 	b.w	404480 <setvbuf>

00404480 <setvbuf>:
  404480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404484:	4c61      	ldr	r4, [pc, #388]	; (40460c <setvbuf+0x18c>)
  404486:	6825      	ldr	r5, [r4, #0]
  404488:	b083      	sub	sp, #12
  40448a:	4604      	mov	r4, r0
  40448c:	460f      	mov	r7, r1
  40448e:	4690      	mov	r8, r2
  404490:	461e      	mov	r6, r3
  404492:	b115      	cbz	r5, 40449a <setvbuf+0x1a>
  404494:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404496:	2b00      	cmp	r3, #0
  404498:	d064      	beq.n	404564 <setvbuf+0xe4>
  40449a:	f1b8 0f02 	cmp.w	r8, #2
  40449e:	d006      	beq.n	4044ae <setvbuf+0x2e>
  4044a0:	f1b8 0f01 	cmp.w	r8, #1
  4044a4:	f200 809f 	bhi.w	4045e6 <setvbuf+0x166>
  4044a8:	2e00      	cmp	r6, #0
  4044aa:	f2c0 809c 	blt.w	4045e6 <setvbuf+0x166>
  4044ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4044b0:	07d8      	lsls	r0, r3, #31
  4044b2:	d534      	bpl.n	40451e <setvbuf+0x9e>
  4044b4:	4621      	mov	r1, r4
  4044b6:	4628      	mov	r0, r5
  4044b8:	f001 f90e 	bl	4056d8 <_fflush_r>
  4044bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4044be:	b141      	cbz	r1, 4044d2 <setvbuf+0x52>
  4044c0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4044c4:	4299      	cmp	r1, r3
  4044c6:	d002      	beq.n	4044ce <setvbuf+0x4e>
  4044c8:	4628      	mov	r0, r5
  4044ca:	f001 fa83 	bl	4059d4 <_free_r>
  4044ce:	2300      	movs	r3, #0
  4044d0:	6323      	str	r3, [r4, #48]	; 0x30
  4044d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4044d6:	2200      	movs	r2, #0
  4044d8:	61a2      	str	r2, [r4, #24]
  4044da:	6062      	str	r2, [r4, #4]
  4044dc:	061a      	lsls	r2, r3, #24
  4044de:	d43a      	bmi.n	404556 <setvbuf+0xd6>
  4044e0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4044e4:	f023 0303 	bic.w	r3, r3, #3
  4044e8:	f1b8 0f02 	cmp.w	r8, #2
  4044ec:	81a3      	strh	r3, [r4, #12]
  4044ee:	d01d      	beq.n	40452c <setvbuf+0xac>
  4044f0:	ab01      	add	r3, sp, #4
  4044f2:	466a      	mov	r2, sp
  4044f4:	4621      	mov	r1, r4
  4044f6:	4628      	mov	r0, r5
  4044f8:	f001 fd0a 	bl	405f10 <__swhatbuf_r>
  4044fc:	89a3      	ldrh	r3, [r4, #12]
  4044fe:	4318      	orrs	r0, r3
  404500:	81a0      	strh	r0, [r4, #12]
  404502:	2e00      	cmp	r6, #0
  404504:	d132      	bne.n	40456c <setvbuf+0xec>
  404506:	9e00      	ldr	r6, [sp, #0]
  404508:	4630      	mov	r0, r6
  40450a:	f7ff fbeb 	bl	403ce4 <malloc>
  40450e:	4607      	mov	r7, r0
  404510:	2800      	cmp	r0, #0
  404512:	d06b      	beq.n	4045ec <setvbuf+0x16c>
  404514:	89a3      	ldrh	r3, [r4, #12]
  404516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40451a:	81a3      	strh	r3, [r4, #12]
  40451c:	e028      	b.n	404570 <setvbuf+0xf0>
  40451e:	89a3      	ldrh	r3, [r4, #12]
  404520:	0599      	lsls	r1, r3, #22
  404522:	d4c7      	bmi.n	4044b4 <setvbuf+0x34>
  404524:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404526:	f001 fcef 	bl	405f08 <__retarget_lock_acquire_recursive>
  40452a:	e7c3      	b.n	4044b4 <setvbuf+0x34>
  40452c:	2500      	movs	r5, #0
  40452e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404530:	2600      	movs	r6, #0
  404532:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404536:	f043 0302 	orr.w	r3, r3, #2
  40453a:	2001      	movs	r0, #1
  40453c:	60a6      	str	r6, [r4, #8]
  40453e:	07ce      	lsls	r6, r1, #31
  404540:	81a3      	strh	r3, [r4, #12]
  404542:	6022      	str	r2, [r4, #0]
  404544:	6122      	str	r2, [r4, #16]
  404546:	6160      	str	r0, [r4, #20]
  404548:	d401      	bmi.n	40454e <setvbuf+0xce>
  40454a:	0598      	lsls	r0, r3, #22
  40454c:	d53e      	bpl.n	4045cc <setvbuf+0x14c>
  40454e:	4628      	mov	r0, r5
  404550:	b003      	add	sp, #12
  404552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404556:	6921      	ldr	r1, [r4, #16]
  404558:	4628      	mov	r0, r5
  40455a:	f001 fa3b 	bl	4059d4 <_free_r>
  40455e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404562:	e7bd      	b.n	4044e0 <setvbuf+0x60>
  404564:	4628      	mov	r0, r5
  404566:	f001 f90f 	bl	405788 <__sinit>
  40456a:	e796      	b.n	40449a <setvbuf+0x1a>
  40456c:	2f00      	cmp	r7, #0
  40456e:	d0cb      	beq.n	404508 <setvbuf+0x88>
  404570:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404572:	2b00      	cmp	r3, #0
  404574:	d033      	beq.n	4045de <setvbuf+0x15e>
  404576:	9b00      	ldr	r3, [sp, #0]
  404578:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40457c:	6027      	str	r7, [r4, #0]
  40457e:	429e      	cmp	r6, r3
  404580:	bf1c      	itt	ne
  404582:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  404586:	81a2      	strhne	r2, [r4, #12]
  404588:	f1b8 0f01 	cmp.w	r8, #1
  40458c:	bf04      	itt	eq
  40458e:	f042 0201 	orreq.w	r2, r2, #1
  404592:	81a2      	strheq	r2, [r4, #12]
  404594:	b292      	uxth	r2, r2
  404596:	f012 0308 	ands.w	r3, r2, #8
  40459a:	6127      	str	r7, [r4, #16]
  40459c:	6166      	str	r6, [r4, #20]
  40459e:	d00e      	beq.n	4045be <setvbuf+0x13e>
  4045a0:	07d1      	lsls	r1, r2, #31
  4045a2:	d51a      	bpl.n	4045da <setvbuf+0x15a>
  4045a4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4045a6:	4276      	negs	r6, r6
  4045a8:	2300      	movs	r3, #0
  4045aa:	f015 0501 	ands.w	r5, r5, #1
  4045ae:	61a6      	str	r6, [r4, #24]
  4045b0:	60a3      	str	r3, [r4, #8]
  4045b2:	d009      	beq.n	4045c8 <setvbuf+0x148>
  4045b4:	2500      	movs	r5, #0
  4045b6:	4628      	mov	r0, r5
  4045b8:	b003      	add	sp, #12
  4045ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4045be:	60a3      	str	r3, [r4, #8]
  4045c0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4045c2:	f015 0501 	ands.w	r5, r5, #1
  4045c6:	d1f5      	bne.n	4045b4 <setvbuf+0x134>
  4045c8:	0593      	lsls	r3, r2, #22
  4045ca:	d4c0      	bmi.n	40454e <setvbuf+0xce>
  4045cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4045ce:	f001 fc9d 	bl	405f0c <__retarget_lock_release_recursive>
  4045d2:	4628      	mov	r0, r5
  4045d4:	b003      	add	sp, #12
  4045d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4045da:	60a6      	str	r6, [r4, #8]
  4045dc:	e7f0      	b.n	4045c0 <setvbuf+0x140>
  4045de:	4628      	mov	r0, r5
  4045e0:	f001 f8d2 	bl	405788 <__sinit>
  4045e4:	e7c7      	b.n	404576 <setvbuf+0xf6>
  4045e6:	f04f 35ff 	mov.w	r5, #4294967295
  4045ea:	e7b0      	b.n	40454e <setvbuf+0xce>
  4045ec:	f8dd 9000 	ldr.w	r9, [sp]
  4045f0:	45b1      	cmp	r9, r6
  4045f2:	d004      	beq.n	4045fe <setvbuf+0x17e>
  4045f4:	4648      	mov	r0, r9
  4045f6:	f7ff fb75 	bl	403ce4 <malloc>
  4045fa:	4607      	mov	r7, r0
  4045fc:	b920      	cbnz	r0, 404608 <setvbuf+0x188>
  4045fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404602:	f04f 35ff 	mov.w	r5, #4294967295
  404606:	e792      	b.n	40452e <setvbuf+0xae>
  404608:	464e      	mov	r6, r9
  40460a:	e783      	b.n	404514 <setvbuf+0x94>
  40460c:	20400010 	.word	0x20400010
	...

00404640 <strlen>:
  404640:	f890 f000 	pld	[r0]
  404644:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404648:	f020 0107 	bic.w	r1, r0, #7
  40464c:	f06f 0c00 	mvn.w	ip, #0
  404650:	f010 0407 	ands.w	r4, r0, #7
  404654:	f891 f020 	pld	[r1, #32]
  404658:	f040 8049 	bne.w	4046ee <strlen+0xae>
  40465c:	f04f 0400 	mov.w	r4, #0
  404660:	f06f 0007 	mvn.w	r0, #7
  404664:	e9d1 2300 	ldrd	r2, r3, [r1]
  404668:	f891 f040 	pld	[r1, #64]	; 0x40
  40466c:	f100 0008 	add.w	r0, r0, #8
  404670:	fa82 f24c 	uadd8	r2, r2, ip
  404674:	faa4 f28c 	sel	r2, r4, ip
  404678:	fa83 f34c 	uadd8	r3, r3, ip
  40467c:	faa2 f38c 	sel	r3, r2, ip
  404680:	bb4b      	cbnz	r3, 4046d6 <strlen+0x96>
  404682:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404686:	fa82 f24c 	uadd8	r2, r2, ip
  40468a:	f100 0008 	add.w	r0, r0, #8
  40468e:	faa4 f28c 	sel	r2, r4, ip
  404692:	fa83 f34c 	uadd8	r3, r3, ip
  404696:	faa2 f38c 	sel	r3, r2, ip
  40469a:	b9e3      	cbnz	r3, 4046d6 <strlen+0x96>
  40469c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4046a0:	fa82 f24c 	uadd8	r2, r2, ip
  4046a4:	f100 0008 	add.w	r0, r0, #8
  4046a8:	faa4 f28c 	sel	r2, r4, ip
  4046ac:	fa83 f34c 	uadd8	r3, r3, ip
  4046b0:	faa2 f38c 	sel	r3, r2, ip
  4046b4:	b97b      	cbnz	r3, 4046d6 <strlen+0x96>
  4046b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4046ba:	f101 0120 	add.w	r1, r1, #32
  4046be:	fa82 f24c 	uadd8	r2, r2, ip
  4046c2:	f100 0008 	add.w	r0, r0, #8
  4046c6:	faa4 f28c 	sel	r2, r4, ip
  4046ca:	fa83 f34c 	uadd8	r3, r3, ip
  4046ce:	faa2 f38c 	sel	r3, r2, ip
  4046d2:	2b00      	cmp	r3, #0
  4046d4:	d0c6      	beq.n	404664 <strlen+0x24>
  4046d6:	2a00      	cmp	r2, #0
  4046d8:	bf04      	itt	eq
  4046da:	3004      	addeq	r0, #4
  4046dc:	461a      	moveq	r2, r3
  4046de:	ba12      	rev	r2, r2
  4046e0:	fab2 f282 	clz	r2, r2
  4046e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4046e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4046ec:	4770      	bx	lr
  4046ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4046f2:	f004 0503 	and.w	r5, r4, #3
  4046f6:	f1c4 0000 	rsb	r0, r4, #0
  4046fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4046fe:	f014 0f04 	tst.w	r4, #4
  404702:	f891 f040 	pld	[r1, #64]	; 0x40
  404706:	fa0c f505 	lsl.w	r5, ip, r5
  40470a:	ea62 0205 	orn	r2, r2, r5
  40470e:	bf1c      	itt	ne
  404710:	ea63 0305 	ornne	r3, r3, r5
  404714:	4662      	movne	r2, ip
  404716:	f04f 0400 	mov.w	r4, #0
  40471a:	e7a9      	b.n	404670 <strlen+0x30>

0040471c <__sprint_r.part.0>:
  40471c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404720:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  404722:	049c      	lsls	r4, r3, #18
  404724:	4693      	mov	fp, r2
  404726:	d52f      	bpl.n	404788 <__sprint_r.part.0+0x6c>
  404728:	6893      	ldr	r3, [r2, #8]
  40472a:	6812      	ldr	r2, [r2, #0]
  40472c:	b353      	cbz	r3, 404784 <__sprint_r.part.0+0x68>
  40472e:	460e      	mov	r6, r1
  404730:	4607      	mov	r7, r0
  404732:	f102 0908 	add.w	r9, r2, #8
  404736:	e919 0420 	ldmdb	r9, {r5, sl}
  40473a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40473e:	d017      	beq.n	404770 <__sprint_r.part.0+0x54>
  404740:	3d04      	subs	r5, #4
  404742:	2400      	movs	r4, #0
  404744:	e001      	b.n	40474a <__sprint_r.part.0+0x2e>
  404746:	45a0      	cmp	r8, r4
  404748:	d010      	beq.n	40476c <__sprint_r.part.0+0x50>
  40474a:	4632      	mov	r2, r6
  40474c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  404750:	4638      	mov	r0, r7
  404752:	f001 f8bb 	bl	4058cc <_fputwc_r>
  404756:	1c43      	adds	r3, r0, #1
  404758:	f104 0401 	add.w	r4, r4, #1
  40475c:	d1f3      	bne.n	404746 <__sprint_r.part.0+0x2a>
  40475e:	2300      	movs	r3, #0
  404760:	f8cb 3008 	str.w	r3, [fp, #8]
  404764:	f8cb 3004 	str.w	r3, [fp, #4]
  404768:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40476c:	f8db 3008 	ldr.w	r3, [fp, #8]
  404770:	f02a 0a03 	bic.w	sl, sl, #3
  404774:	eba3 030a 	sub.w	r3, r3, sl
  404778:	f8cb 3008 	str.w	r3, [fp, #8]
  40477c:	f109 0908 	add.w	r9, r9, #8
  404780:	2b00      	cmp	r3, #0
  404782:	d1d8      	bne.n	404736 <__sprint_r.part.0+0x1a>
  404784:	2000      	movs	r0, #0
  404786:	e7ea      	b.n	40475e <__sprint_r.part.0+0x42>
  404788:	f001 fa0a 	bl	405ba0 <__sfvwrite_r>
  40478c:	2300      	movs	r3, #0
  40478e:	f8cb 3008 	str.w	r3, [fp, #8]
  404792:	f8cb 3004 	str.w	r3, [fp, #4]
  404796:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40479a:	bf00      	nop

0040479c <_vfiprintf_r>:
  40479c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4047a0:	b0ad      	sub	sp, #180	; 0xb4
  4047a2:	461d      	mov	r5, r3
  4047a4:	468b      	mov	fp, r1
  4047a6:	4690      	mov	r8, r2
  4047a8:	9307      	str	r3, [sp, #28]
  4047aa:	9006      	str	r0, [sp, #24]
  4047ac:	b118      	cbz	r0, 4047b6 <_vfiprintf_r+0x1a>
  4047ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4047b0:	2b00      	cmp	r3, #0
  4047b2:	f000 80f3 	beq.w	40499c <_vfiprintf_r+0x200>
  4047b6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4047ba:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4047be:	07df      	lsls	r7, r3, #31
  4047c0:	b281      	uxth	r1, r0
  4047c2:	d402      	bmi.n	4047ca <_vfiprintf_r+0x2e>
  4047c4:	058e      	lsls	r6, r1, #22
  4047c6:	f140 80fc 	bpl.w	4049c2 <_vfiprintf_r+0x226>
  4047ca:	048c      	lsls	r4, r1, #18
  4047cc:	d40a      	bmi.n	4047e4 <_vfiprintf_r+0x48>
  4047ce:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4047d2:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  4047d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4047da:	f8ab 100c 	strh.w	r1, [fp, #12]
  4047de:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4047e2:	b289      	uxth	r1, r1
  4047e4:	0708      	lsls	r0, r1, #28
  4047e6:	f140 80b3 	bpl.w	404950 <_vfiprintf_r+0x1b4>
  4047ea:	f8db 3010 	ldr.w	r3, [fp, #16]
  4047ee:	2b00      	cmp	r3, #0
  4047f0:	f000 80ae 	beq.w	404950 <_vfiprintf_r+0x1b4>
  4047f4:	f001 031a 	and.w	r3, r1, #26
  4047f8:	2b0a      	cmp	r3, #10
  4047fa:	f000 80b5 	beq.w	404968 <_vfiprintf_r+0x1cc>
  4047fe:	2300      	movs	r3, #0
  404800:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  404804:	930b      	str	r3, [sp, #44]	; 0x2c
  404806:	9311      	str	r3, [sp, #68]	; 0x44
  404808:	9310      	str	r3, [sp, #64]	; 0x40
  40480a:	9303      	str	r3, [sp, #12]
  40480c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  404810:	46ca      	mov	sl, r9
  404812:	f8cd b010 	str.w	fp, [sp, #16]
  404816:	f898 3000 	ldrb.w	r3, [r8]
  40481a:	4644      	mov	r4, r8
  40481c:	b1fb      	cbz	r3, 40485e <_vfiprintf_r+0xc2>
  40481e:	2b25      	cmp	r3, #37	; 0x25
  404820:	d102      	bne.n	404828 <_vfiprintf_r+0x8c>
  404822:	e01c      	b.n	40485e <_vfiprintf_r+0xc2>
  404824:	2b25      	cmp	r3, #37	; 0x25
  404826:	d003      	beq.n	404830 <_vfiprintf_r+0x94>
  404828:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40482c:	2b00      	cmp	r3, #0
  40482e:	d1f9      	bne.n	404824 <_vfiprintf_r+0x88>
  404830:	eba4 0508 	sub.w	r5, r4, r8
  404834:	b19d      	cbz	r5, 40485e <_vfiprintf_r+0xc2>
  404836:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404838:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40483a:	f8ca 8000 	str.w	r8, [sl]
  40483e:	3301      	adds	r3, #1
  404840:	442a      	add	r2, r5
  404842:	2b07      	cmp	r3, #7
  404844:	f8ca 5004 	str.w	r5, [sl, #4]
  404848:	9211      	str	r2, [sp, #68]	; 0x44
  40484a:	9310      	str	r3, [sp, #64]	; 0x40
  40484c:	dd7a      	ble.n	404944 <_vfiprintf_r+0x1a8>
  40484e:	2a00      	cmp	r2, #0
  404850:	f040 84b0 	bne.w	4051b4 <_vfiprintf_r+0xa18>
  404854:	9b03      	ldr	r3, [sp, #12]
  404856:	9210      	str	r2, [sp, #64]	; 0x40
  404858:	442b      	add	r3, r5
  40485a:	46ca      	mov	sl, r9
  40485c:	9303      	str	r3, [sp, #12]
  40485e:	7823      	ldrb	r3, [r4, #0]
  404860:	2b00      	cmp	r3, #0
  404862:	f000 83e0 	beq.w	405026 <_vfiprintf_r+0x88a>
  404866:	2000      	movs	r0, #0
  404868:	f04f 0300 	mov.w	r3, #0
  40486c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  404870:	f104 0801 	add.w	r8, r4, #1
  404874:	7862      	ldrb	r2, [r4, #1]
  404876:	4605      	mov	r5, r0
  404878:	4606      	mov	r6, r0
  40487a:	4603      	mov	r3, r0
  40487c:	f04f 34ff 	mov.w	r4, #4294967295
  404880:	f108 0801 	add.w	r8, r8, #1
  404884:	f1a2 0120 	sub.w	r1, r2, #32
  404888:	2958      	cmp	r1, #88	; 0x58
  40488a:	f200 82de 	bhi.w	404e4a <_vfiprintf_r+0x6ae>
  40488e:	e8df f011 	tbh	[pc, r1, lsl #1]
  404892:	0221      	.short	0x0221
  404894:	02dc02dc 	.word	0x02dc02dc
  404898:	02dc0229 	.word	0x02dc0229
  40489c:	02dc02dc 	.word	0x02dc02dc
  4048a0:	02dc02dc 	.word	0x02dc02dc
  4048a4:	028902dc 	.word	0x028902dc
  4048a8:	02dc0295 	.word	0x02dc0295
  4048ac:	02bd00a2 	.word	0x02bd00a2
  4048b0:	019f02dc 	.word	0x019f02dc
  4048b4:	01a401a4 	.word	0x01a401a4
  4048b8:	01a401a4 	.word	0x01a401a4
  4048bc:	01a401a4 	.word	0x01a401a4
  4048c0:	01a401a4 	.word	0x01a401a4
  4048c4:	02dc01a4 	.word	0x02dc01a4
  4048c8:	02dc02dc 	.word	0x02dc02dc
  4048cc:	02dc02dc 	.word	0x02dc02dc
  4048d0:	02dc02dc 	.word	0x02dc02dc
  4048d4:	02dc02dc 	.word	0x02dc02dc
  4048d8:	01b202dc 	.word	0x01b202dc
  4048dc:	02dc02dc 	.word	0x02dc02dc
  4048e0:	02dc02dc 	.word	0x02dc02dc
  4048e4:	02dc02dc 	.word	0x02dc02dc
  4048e8:	02dc02dc 	.word	0x02dc02dc
  4048ec:	02dc02dc 	.word	0x02dc02dc
  4048f0:	02dc0197 	.word	0x02dc0197
  4048f4:	02dc02dc 	.word	0x02dc02dc
  4048f8:	02dc02dc 	.word	0x02dc02dc
  4048fc:	02dc019b 	.word	0x02dc019b
  404900:	025302dc 	.word	0x025302dc
  404904:	02dc02dc 	.word	0x02dc02dc
  404908:	02dc02dc 	.word	0x02dc02dc
  40490c:	02dc02dc 	.word	0x02dc02dc
  404910:	02dc02dc 	.word	0x02dc02dc
  404914:	02dc02dc 	.word	0x02dc02dc
  404918:	021b025a 	.word	0x021b025a
  40491c:	02dc02dc 	.word	0x02dc02dc
  404920:	026e02dc 	.word	0x026e02dc
  404924:	02dc021b 	.word	0x02dc021b
  404928:	027302dc 	.word	0x027302dc
  40492c:	01f502dc 	.word	0x01f502dc
  404930:	02090182 	.word	0x02090182
  404934:	02dc02d7 	.word	0x02dc02d7
  404938:	02dc029a 	.word	0x02dc029a
  40493c:	02dc00a7 	.word	0x02dc00a7
  404940:	022e02dc 	.word	0x022e02dc
  404944:	f10a 0a08 	add.w	sl, sl, #8
  404948:	9b03      	ldr	r3, [sp, #12]
  40494a:	442b      	add	r3, r5
  40494c:	9303      	str	r3, [sp, #12]
  40494e:	e786      	b.n	40485e <_vfiprintf_r+0xc2>
  404950:	4659      	mov	r1, fp
  404952:	9806      	ldr	r0, [sp, #24]
  404954:	f000 fdac 	bl	4054b0 <__swsetup_r>
  404958:	bb18      	cbnz	r0, 4049a2 <_vfiprintf_r+0x206>
  40495a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40495e:	f001 031a 	and.w	r3, r1, #26
  404962:	2b0a      	cmp	r3, #10
  404964:	f47f af4b 	bne.w	4047fe <_vfiprintf_r+0x62>
  404968:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  40496c:	2b00      	cmp	r3, #0
  40496e:	f6ff af46 	blt.w	4047fe <_vfiprintf_r+0x62>
  404972:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404976:	07db      	lsls	r3, r3, #31
  404978:	d405      	bmi.n	404986 <_vfiprintf_r+0x1ea>
  40497a:	058f      	lsls	r7, r1, #22
  40497c:	d403      	bmi.n	404986 <_vfiprintf_r+0x1ea>
  40497e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404982:	f001 fac3 	bl	405f0c <__retarget_lock_release_recursive>
  404986:	462b      	mov	r3, r5
  404988:	4642      	mov	r2, r8
  40498a:	4659      	mov	r1, fp
  40498c:	9806      	ldr	r0, [sp, #24]
  40498e:	f000 fd4d 	bl	40542c <__sbprintf>
  404992:	9003      	str	r0, [sp, #12]
  404994:	9803      	ldr	r0, [sp, #12]
  404996:	b02d      	add	sp, #180	; 0xb4
  404998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40499c:	f000 fef4 	bl	405788 <__sinit>
  4049a0:	e709      	b.n	4047b6 <_vfiprintf_r+0x1a>
  4049a2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4049a6:	07d9      	lsls	r1, r3, #31
  4049a8:	d404      	bmi.n	4049b4 <_vfiprintf_r+0x218>
  4049aa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4049ae:	059a      	lsls	r2, r3, #22
  4049b0:	f140 84aa 	bpl.w	405308 <_vfiprintf_r+0xb6c>
  4049b4:	f04f 33ff 	mov.w	r3, #4294967295
  4049b8:	9303      	str	r3, [sp, #12]
  4049ba:	9803      	ldr	r0, [sp, #12]
  4049bc:	b02d      	add	sp, #180	; 0xb4
  4049be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4049c2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4049c6:	f001 fa9f 	bl	405f08 <__retarget_lock_acquire_recursive>
  4049ca:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4049ce:	b281      	uxth	r1, r0
  4049d0:	e6fb      	b.n	4047ca <_vfiprintf_r+0x2e>
  4049d2:	4276      	negs	r6, r6
  4049d4:	9207      	str	r2, [sp, #28]
  4049d6:	f043 0304 	orr.w	r3, r3, #4
  4049da:	f898 2000 	ldrb.w	r2, [r8]
  4049de:	e74f      	b.n	404880 <_vfiprintf_r+0xe4>
  4049e0:	9608      	str	r6, [sp, #32]
  4049e2:	069e      	lsls	r6, r3, #26
  4049e4:	f100 8450 	bmi.w	405288 <_vfiprintf_r+0xaec>
  4049e8:	9907      	ldr	r1, [sp, #28]
  4049ea:	06dd      	lsls	r5, r3, #27
  4049ec:	460a      	mov	r2, r1
  4049ee:	f100 83ef 	bmi.w	4051d0 <_vfiprintf_r+0xa34>
  4049f2:	0658      	lsls	r0, r3, #25
  4049f4:	f140 83ec 	bpl.w	4051d0 <_vfiprintf_r+0xa34>
  4049f8:	880e      	ldrh	r6, [r1, #0]
  4049fa:	3104      	adds	r1, #4
  4049fc:	2700      	movs	r7, #0
  4049fe:	2201      	movs	r2, #1
  404a00:	9107      	str	r1, [sp, #28]
  404a02:	f04f 0100 	mov.w	r1, #0
  404a06:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  404a0a:	2500      	movs	r5, #0
  404a0c:	1c61      	adds	r1, r4, #1
  404a0e:	f000 8116 	beq.w	404c3e <_vfiprintf_r+0x4a2>
  404a12:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  404a16:	9102      	str	r1, [sp, #8]
  404a18:	ea56 0107 	orrs.w	r1, r6, r7
  404a1c:	f040 8114 	bne.w	404c48 <_vfiprintf_r+0x4ac>
  404a20:	2c00      	cmp	r4, #0
  404a22:	f040 835c 	bne.w	4050de <_vfiprintf_r+0x942>
  404a26:	2a00      	cmp	r2, #0
  404a28:	f040 83b7 	bne.w	40519a <_vfiprintf_r+0x9fe>
  404a2c:	f013 0301 	ands.w	r3, r3, #1
  404a30:	9305      	str	r3, [sp, #20]
  404a32:	f000 8457 	beq.w	4052e4 <_vfiprintf_r+0xb48>
  404a36:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  404a3a:	2330      	movs	r3, #48	; 0x30
  404a3c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  404a40:	9b05      	ldr	r3, [sp, #20]
  404a42:	42a3      	cmp	r3, r4
  404a44:	bfb8      	it	lt
  404a46:	4623      	movlt	r3, r4
  404a48:	9301      	str	r3, [sp, #4]
  404a4a:	b10d      	cbz	r5, 404a50 <_vfiprintf_r+0x2b4>
  404a4c:	3301      	adds	r3, #1
  404a4e:	9301      	str	r3, [sp, #4]
  404a50:	9b02      	ldr	r3, [sp, #8]
  404a52:	f013 0302 	ands.w	r3, r3, #2
  404a56:	9309      	str	r3, [sp, #36]	; 0x24
  404a58:	d002      	beq.n	404a60 <_vfiprintf_r+0x2c4>
  404a5a:	9b01      	ldr	r3, [sp, #4]
  404a5c:	3302      	adds	r3, #2
  404a5e:	9301      	str	r3, [sp, #4]
  404a60:	9b02      	ldr	r3, [sp, #8]
  404a62:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  404a66:	930a      	str	r3, [sp, #40]	; 0x28
  404a68:	f040 8217 	bne.w	404e9a <_vfiprintf_r+0x6fe>
  404a6c:	9b08      	ldr	r3, [sp, #32]
  404a6e:	9a01      	ldr	r2, [sp, #4]
  404a70:	1a9d      	subs	r5, r3, r2
  404a72:	2d00      	cmp	r5, #0
  404a74:	f340 8211 	ble.w	404e9a <_vfiprintf_r+0x6fe>
  404a78:	2d10      	cmp	r5, #16
  404a7a:	f340 8490 	ble.w	40539e <_vfiprintf_r+0xc02>
  404a7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404a80:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404a82:	4ec4      	ldr	r6, [pc, #784]	; (404d94 <_vfiprintf_r+0x5f8>)
  404a84:	46d6      	mov	lr, sl
  404a86:	2710      	movs	r7, #16
  404a88:	46a2      	mov	sl, r4
  404a8a:	4619      	mov	r1, r3
  404a8c:	9c06      	ldr	r4, [sp, #24]
  404a8e:	e007      	b.n	404aa0 <_vfiprintf_r+0x304>
  404a90:	f101 0c02 	add.w	ip, r1, #2
  404a94:	f10e 0e08 	add.w	lr, lr, #8
  404a98:	4601      	mov	r1, r0
  404a9a:	3d10      	subs	r5, #16
  404a9c:	2d10      	cmp	r5, #16
  404a9e:	dd11      	ble.n	404ac4 <_vfiprintf_r+0x328>
  404aa0:	1c48      	adds	r0, r1, #1
  404aa2:	3210      	adds	r2, #16
  404aa4:	2807      	cmp	r0, #7
  404aa6:	9211      	str	r2, [sp, #68]	; 0x44
  404aa8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  404aac:	9010      	str	r0, [sp, #64]	; 0x40
  404aae:	ddef      	ble.n	404a90 <_vfiprintf_r+0x2f4>
  404ab0:	2a00      	cmp	r2, #0
  404ab2:	f040 81e4 	bne.w	404e7e <_vfiprintf_r+0x6e2>
  404ab6:	3d10      	subs	r5, #16
  404ab8:	2d10      	cmp	r5, #16
  404aba:	4611      	mov	r1, r2
  404abc:	f04f 0c01 	mov.w	ip, #1
  404ac0:	46ce      	mov	lr, r9
  404ac2:	dced      	bgt.n	404aa0 <_vfiprintf_r+0x304>
  404ac4:	4654      	mov	r4, sl
  404ac6:	4661      	mov	r1, ip
  404ac8:	46f2      	mov	sl, lr
  404aca:	442a      	add	r2, r5
  404acc:	2907      	cmp	r1, #7
  404ace:	9211      	str	r2, [sp, #68]	; 0x44
  404ad0:	f8ca 6000 	str.w	r6, [sl]
  404ad4:	f8ca 5004 	str.w	r5, [sl, #4]
  404ad8:	9110      	str	r1, [sp, #64]	; 0x40
  404ada:	f300 82ec 	bgt.w	4050b6 <_vfiprintf_r+0x91a>
  404ade:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404ae2:	f10a 0a08 	add.w	sl, sl, #8
  404ae6:	1c48      	adds	r0, r1, #1
  404ae8:	2d00      	cmp	r5, #0
  404aea:	f040 81de 	bne.w	404eaa <_vfiprintf_r+0x70e>
  404aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404af0:	2b00      	cmp	r3, #0
  404af2:	f000 81f8 	beq.w	404ee6 <_vfiprintf_r+0x74a>
  404af6:	3202      	adds	r2, #2
  404af8:	a90e      	add	r1, sp, #56	; 0x38
  404afa:	2302      	movs	r3, #2
  404afc:	2807      	cmp	r0, #7
  404afe:	9211      	str	r2, [sp, #68]	; 0x44
  404b00:	9010      	str	r0, [sp, #64]	; 0x40
  404b02:	e88a 000a 	stmia.w	sl, {r1, r3}
  404b06:	f340 81ea 	ble.w	404ede <_vfiprintf_r+0x742>
  404b0a:	2a00      	cmp	r2, #0
  404b0c:	f040 838c 	bne.w	405228 <_vfiprintf_r+0xa8c>
  404b10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404b12:	2b80      	cmp	r3, #128	; 0x80
  404b14:	f04f 0001 	mov.w	r0, #1
  404b18:	4611      	mov	r1, r2
  404b1a:	46ca      	mov	sl, r9
  404b1c:	f040 81e7 	bne.w	404eee <_vfiprintf_r+0x752>
  404b20:	9b08      	ldr	r3, [sp, #32]
  404b22:	9d01      	ldr	r5, [sp, #4]
  404b24:	1b5e      	subs	r6, r3, r5
  404b26:	2e00      	cmp	r6, #0
  404b28:	f340 81e1 	ble.w	404eee <_vfiprintf_r+0x752>
  404b2c:	2e10      	cmp	r6, #16
  404b2e:	4d9a      	ldr	r5, [pc, #616]	; (404d98 <_vfiprintf_r+0x5fc>)
  404b30:	f340 8450 	ble.w	4053d4 <_vfiprintf_r+0xc38>
  404b34:	46d4      	mov	ip, sl
  404b36:	2710      	movs	r7, #16
  404b38:	46a2      	mov	sl, r4
  404b3a:	9c06      	ldr	r4, [sp, #24]
  404b3c:	e007      	b.n	404b4e <_vfiprintf_r+0x3b2>
  404b3e:	f101 0e02 	add.w	lr, r1, #2
  404b42:	f10c 0c08 	add.w	ip, ip, #8
  404b46:	4601      	mov	r1, r0
  404b48:	3e10      	subs	r6, #16
  404b4a:	2e10      	cmp	r6, #16
  404b4c:	dd11      	ble.n	404b72 <_vfiprintf_r+0x3d6>
  404b4e:	1c48      	adds	r0, r1, #1
  404b50:	3210      	adds	r2, #16
  404b52:	2807      	cmp	r0, #7
  404b54:	9211      	str	r2, [sp, #68]	; 0x44
  404b56:	e88c 00a0 	stmia.w	ip, {r5, r7}
  404b5a:	9010      	str	r0, [sp, #64]	; 0x40
  404b5c:	ddef      	ble.n	404b3e <_vfiprintf_r+0x3a2>
  404b5e:	2a00      	cmp	r2, #0
  404b60:	f040 829d 	bne.w	40509e <_vfiprintf_r+0x902>
  404b64:	3e10      	subs	r6, #16
  404b66:	2e10      	cmp	r6, #16
  404b68:	f04f 0e01 	mov.w	lr, #1
  404b6c:	4611      	mov	r1, r2
  404b6e:	46cc      	mov	ip, r9
  404b70:	dced      	bgt.n	404b4e <_vfiprintf_r+0x3b2>
  404b72:	4654      	mov	r4, sl
  404b74:	46e2      	mov	sl, ip
  404b76:	4432      	add	r2, r6
  404b78:	f1be 0f07 	cmp.w	lr, #7
  404b7c:	9211      	str	r2, [sp, #68]	; 0x44
  404b7e:	e88a 0060 	stmia.w	sl, {r5, r6}
  404b82:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  404b86:	f300 8369 	bgt.w	40525c <_vfiprintf_r+0xac0>
  404b8a:	f10a 0a08 	add.w	sl, sl, #8
  404b8e:	f10e 0001 	add.w	r0, lr, #1
  404b92:	4671      	mov	r1, lr
  404b94:	e1ab      	b.n	404eee <_vfiprintf_r+0x752>
  404b96:	9608      	str	r6, [sp, #32]
  404b98:	f013 0220 	ands.w	r2, r3, #32
  404b9c:	f040 838c 	bne.w	4052b8 <_vfiprintf_r+0xb1c>
  404ba0:	f013 0110 	ands.w	r1, r3, #16
  404ba4:	f040 831a 	bne.w	4051dc <_vfiprintf_r+0xa40>
  404ba8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  404bac:	f000 8316 	beq.w	4051dc <_vfiprintf_r+0xa40>
  404bb0:	9807      	ldr	r0, [sp, #28]
  404bb2:	460a      	mov	r2, r1
  404bb4:	4601      	mov	r1, r0
  404bb6:	3104      	adds	r1, #4
  404bb8:	8806      	ldrh	r6, [r0, #0]
  404bba:	9107      	str	r1, [sp, #28]
  404bbc:	2700      	movs	r7, #0
  404bbe:	e720      	b.n	404a02 <_vfiprintf_r+0x266>
  404bc0:	9608      	str	r6, [sp, #32]
  404bc2:	f043 0310 	orr.w	r3, r3, #16
  404bc6:	e7e7      	b.n	404b98 <_vfiprintf_r+0x3fc>
  404bc8:	9608      	str	r6, [sp, #32]
  404bca:	f043 0310 	orr.w	r3, r3, #16
  404bce:	e708      	b.n	4049e2 <_vfiprintf_r+0x246>
  404bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404bd4:	f898 2000 	ldrb.w	r2, [r8]
  404bd8:	e652      	b.n	404880 <_vfiprintf_r+0xe4>
  404bda:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404bde:	2600      	movs	r6, #0
  404be0:	f818 2b01 	ldrb.w	r2, [r8], #1
  404be4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  404be8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  404bec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404bf0:	2909      	cmp	r1, #9
  404bf2:	d9f5      	bls.n	404be0 <_vfiprintf_r+0x444>
  404bf4:	e646      	b.n	404884 <_vfiprintf_r+0xe8>
  404bf6:	9608      	str	r6, [sp, #32]
  404bf8:	2800      	cmp	r0, #0
  404bfa:	f040 8408 	bne.w	40540e <_vfiprintf_r+0xc72>
  404bfe:	f043 0310 	orr.w	r3, r3, #16
  404c02:	069e      	lsls	r6, r3, #26
  404c04:	f100 834c 	bmi.w	4052a0 <_vfiprintf_r+0xb04>
  404c08:	06dd      	lsls	r5, r3, #27
  404c0a:	f100 82f3 	bmi.w	4051f4 <_vfiprintf_r+0xa58>
  404c0e:	0658      	lsls	r0, r3, #25
  404c10:	f140 82f0 	bpl.w	4051f4 <_vfiprintf_r+0xa58>
  404c14:	9d07      	ldr	r5, [sp, #28]
  404c16:	f9b5 6000 	ldrsh.w	r6, [r5]
  404c1a:	462a      	mov	r2, r5
  404c1c:	17f7      	asrs	r7, r6, #31
  404c1e:	3204      	adds	r2, #4
  404c20:	4630      	mov	r0, r6
  404c22:	4639      	mov	r1, r7
  404c24:	9207      	str	r2, [sp, #28]
  404c26:	2800      	cmp	r0, #0
  404c28:	f171 0200 	sbcs.w	r2, r1, #0
  404c2c:	f2c0 835d 	blt.w	4052ea <_vfiprintf_r+0xb4e>
  404c30:	1c61      	adds	r1, r4, #1
  404c32:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404c36:	f04f 0201 	mov.w	r2, #1
  404c3a:	f47f aeea 	bne.w	404a12 <_vfiprintf_r+0x276>
  404c3e:	ea56 0107 	orrs.w	r1, r6, r7
  404c42:	f000 824d 	beq.w	4050e0 <_vfiprintf_r+0x944>
  404c46:	9302      	str	r3, [sp, #8]
  404c48:	2a01      	cmp	r2, #1
  404c4a:	f000 828c 	beq.w	405166 <_vfiprintf_r+0x9ca>
  404c4e:	2a02      	cmp	r2, #2
  404c50:	f040 825c 	bne.w	40510c <_vfiprintf_r+0x970>
  404c54:	980b      	ldr	r0, [sp, #44]	; 0x2c
  404c56:	46cb      	mov	fp, r9
  404c58:	0933      	lsrs	r3, r6, #4
  404c5a:	f006 010f 	and.w	r1, r6, #15
  404c5e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  404c62:	093a      	lsrs	r2, r7, #4
  404c64:	461e      	mov	r6, r3
  404c66:	4617      	mov	r7, r2
  404c68:	5c43      	ldrb	r3, [r0, r1]
  404c6a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  404c6e:	ea56 0307 	orrs.w	r3, r6, r7
  404c72:	d1f1      	bne.n	404c58 <_vfiprintf_r+0x4bc>
  404c74:	eba9 030b 	sub.w	r3, r9, fp
  404c78:	9305      	str	r3, [sp, #20]
  404c7a:	e6e1      	b.n	404a40 <_vfiprintf_r+0x2a4>
  404c7c:	2800      	cmp	r0, #0
  404c7e:	f040 83c0 	bne.w	405402 <_vfiprintf_r+0xc66>
  404c82:	0699      	lsls	r1, r3, #26
  404c84:	f100 8367 	bmi.w	405356 <_vfiprintf_r+0xbba>
  404c88:	06da      	lsls	r2, r3, #27
  404c8a:	f100 80f1 	bmi.w	404e70 <_vfiprintf_r+0x6d4>
  404c8e:	065b      	lsls	r3, r3, #25
  404c90:	f140 80ee 	bpl.w	404e70 <_vfiprintf_r+0x6d4>
  404c94:	9a07      	ldr	r2, [sp, #28]
  404c96:	6813      	ldr	r3, [r2, #0]
  404c98:	3204      	adds	r2, #4
  404c9a:	9207      	str	r2, [sp, #28]
  404c9c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  404ca0:	801a      	strh	r2, [r3, #0]
  404ca2:	e5b8      	b.n	404816 <_vfiprintf_r+0x7a>
  404ca4:	9807      	ldr	r0, [sp, #28]
  404ca6:	4a3d      	ldr	r2, [pc, #244]	; (404d9c <_vfiprintf_r+0x600>)
  404ca8:	9608      	str	r6, [sp, #32]
  404caa:	920b      	str	r2, [sp, #44]	; 0x2c
  404cac:	6806      	ldr	r6, [r0, #0]
  404cae:	2278      	movs	r2, #120	; 0x78
  404cb0:	2130      	movs	r1, #48	; 0x30
  404cb2:	3004      	adds	r0, #4
  404cb4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  404cb8:	f043 0302 	orr.w	r3, r3, #2
  404cbc:	9007      	str	r0, [sp, #28]
  404cbe:	2700      	movs	r7, #0
  404cc0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404cc4:	2202      	movs	r2, #2
  404cc6:	e69c      	b.n	404a02 <_vfiprintf_r+0x266>
  404cc8:	9608      	str	r6, [sp, #32]
  404cca:	2800      	cmp	r0, #0
  404ccc:	d099      	beq.n	404c02 <_vfiprintf_r+0x466>
  404cce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404cd2:	e796      	b.n	404c02 <_vfiprintf_r+0x466>
  404cd4:	f898 2000 	ldrb.w	r2, [r8]
  404cd8:	2d00      	cmp	r5, #0
  404cda:	f47f add1 	bne.w	404880 <_vfiprintf_r+0xe4>
  404cde:	2001      	movs	r0, #1
  404ce0:	2520      	movs	r5, #32
  404ce2:	e5cd      	b.n	404880 <_vfiprintf_r+0xe4>
  404ce4:	f043 0301 	orr.w	r3, r3, #1
  404ce8:	f898 2000 	ldrb.w	r2, [r8]
  404cec:	e5c8      	b.n	404880 <_vfiprintf_r+0xe4>
  404cee:	9608      	str	r6, [sp, #32]
  404cf0:	2800      	cmp	r0, #0
  404cf2:	f040 8393 	bne.w	40541c <_vfiprintf_r+0xc80>
  404cf6:	4929      	ldr	r1, [pc, #164]	; (404d9c <_vfiprintf_r+0x600>)
  404cf8:	910b      	str	r1, [sp, #44]	; 0x2c
  404cfa:	069f      	lsls	r7, r3, #26
  404cfc:	f100 82e8 	bmi.w	4052d0 <_vfiprintf_r+0xb34>
  404d00:	9807      	ldr	r0, [sp, #28]
  404d02:	06de      	lsls	r6, r3, #27
  404d04:	4601      	mov	r1, r0
  404d06:	f100 8270 	bmi.w	4051ea <_vfiprintf_r+0xa4e>
  404d0a:	065d      	lsls	r5, r3, #25
  404d0c:	f140 826d 	bpl.w	4051ea <_vfiprintf_r+0xa4e>
  404d10:	3104      	adds	r1, #4
  404d12:	8806      	ldrh	r6, [r0, #0]
  404d14:	9107      	str	r1, [sp, #28]
  404d16:	2700      	movs	r7, #0
  404d18:	07d8      	lsls	r0, r3, #31
  404d1a:	f140 8222 	bpl.w	405162 <_vfiprintf_r+0x9c6>
  404d1e:	ea56 0107 	orrs.w	r1, r6, r7
  404d22:	f000 821e 	beq.w	405162 <_vfiprintf_r+0x9c6>
  404d26:	2130      	movs	r1, #48	; 0x30
  404d28:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  404d2c:	f043 0302 	orr.w	r3, r3, #2
  404d30:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404d34:	2202      	movs	r2, #2
  404d36:	e664      	b.n	404a02 <_vfiprintf_r+0x266>
  404d38:	9608      	str	r6, [sp, #32]
  404d3a:	2800      	cmp	r0, #0
  404d3c:	f040 836b 	bne.w	405416 <_vfiprintf_r+0xc7a>
  404d40:	4917      	ldr	r1, [pc, #92]	; (404da0 <_vfiprintf_r+0x604>)
  404d42:	910b      	str	r1, [sp, #44]	; 0x2c
  404d44:	e7d9      	b.n	404cfa <_vfiprintf_r+0x55e>
  404d46:	9907      	ldr	r1, [sp, #28]
  404d48:	9608      	str	r6, [sp, #32]
  404d4a:	680a      	ldr	r2, [r1, #0]
  404d4c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404d50:	f04f 0000 	mov.w	r0, #0
  404d54:	460a      	mov	r2, r1
  404d56:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  404d5a:	3204      	adds	r2, #4
  404d5c:	2001      	movs	r0, #1
  404d5e:	9001      	str	r0, [sp, #4]
  404d60:	9207      	str	r2, [sp, #28]
  404d62:	9005      	str	r0, [sp, #20]
  404d64:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  404d68:	9302      	str	r3, [sp, #8]
  404d6a:	2400      	movs	r4, #0
  404d6c:	e670      	b.n	404a50 <_vfiprintf_r+0x2b4>
  404d6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404d72:	f898 2000 	ldrb.w	r2, [r8]
  404d76:	e583      	b.n	404880 <_vfiprintf_r+0xe4>
  404d78:	f898 2000 	ldrb.w	r2, [r8]
  404d7c:	2a6c      	cmp	r2, #108	; 0x6c
  404d7e:	bf03      	ittte	eq
  404d80:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  404d84:	f043 0320 	orreq.w	r3, r3, #32
  404d88:	f108 0801 	addeq.w	r8, r8, #1
  404d8c:	f043 0310 	orrne.w	r3, r3, #16
  404d90:	e576      	b.n	404880 <_vfiprintf_r+0xe4>
  404d92:	bf00      	nop
  404d94:	00406d70 	.word	0x00406d70
  404d98:	00406d80 	.word	0x00406d80
  404d9c:	00406d54 	.word	0x00406d54
  404da0:	00406d40 	.word	0x00406d40
  404da4:	9907      	ldr	r1, [sp, #28]
  404da6:	680e      	ldr	r6, [r1, #0]
  404da8:	460a      	mov	r2, r1
  404daa:	2e00      	cmp	r6, #0
  404dac:	f102 0204 	add.w	r2, r2, #4
  404db0:	f6ff ae0f 	blt.w	4049d2 <_vfiprintf_r+0x236>
  404db4:	9207      	str	r2, [sp, #28]
  404db6:	f898 2000 	ldrb.w	r2, [r8]
  404dba:	e561      	b.n	404880 <_vfiprintf_r+0xe4>
  404dbc:	f898 2000 	ldrb.w	r2, [r8]
  404dc0:	2001      	movs	r0, #1
  404dc2:	252b      	movs	r5, #43	; 0x2b
  404dc4:	e55c      	b.n	404880 <_vfiprintf_r+0xe4>
  404dc6:	9907      	ldr	r1, [sp, #28]
  404dc8:	9608      	str	r6, [sp, #32]
  404dca:	f8d1 b000 	ldr.w	fp, [r1]
  404dce:	f04f 0200 	mov.w	r2, #0
  404dd2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404dd6:	1d0e      	adds	r6, r1, #4
  404dd8:	f1bb 0f00 	cmp.w	fp, #0
  404ddc:	f000 82e5 	beq.w	4053aa <_vfiprintf_r+0xc0e>
  404de0:	1c67      	adds	r7, r4, #1
  404de2:	f000 82c4 	beq.w	40536e <_vfiprintf_r+0xbd2>
  404de6:	4622      	mov	r2, r4
  404de8:	2100      	movs	r1, #0
  404dea:	4658      	mov	r0, fp
  404dec:	9301      	str	r3, [sp, #4]
  404dee:	f001 f91f 	bl	406030 <memchr>
  404df2:	9b01      	ldr	r3, [sp, #4]
  404df4:	2800      	cmp	r0, #0
  404df6:	f000 82e5 	beq.w	4053c4 <_vfiprintf_r+0xc28>
  404dfa:	eba0 020b 	sub.w	r2, r0, fp
  404dfe:	9205      	str	r2, [sp, #20]
  404e00:	9607      	str	r6, [sp, #28]
  404e02:	9302      	str	r3, [sp, #8]
  404e04:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404e08:	2400      	movs	r4, #0
  404e0a:	e619      	b.n	404a40 <_vfiprintf_r+0x2a4>
  404e0c:	f898 2000 	ldrb.w	r2, [r8]
  404e10:	2a2a      	cmp	r2, #42	; 0x2a
  404e12:	f108 0701 	add.w	r7, r8, #1
  404e16:	f000 82e9 	beq.w	4053ec <_vfiprintf_r+0xc50>
  404e1a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404e1e:	2909      	cmp	r1, #9
  404e20:	46b8      	mov	r8, r7
  404e22:	f04f 0400 	mov.w	r4, #0
  404e26:	f63f ad2d 	bhi.w	404884 <_vfiprintf_r+0xe8>
  404e2a:	f818 2b01 	ldrb.w	r2, [r8], #1
  404e2e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404e32:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  404e36:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404e3a:	2909      	cmp	r1, #9
  404e3c:	d9f5      	bls.n	404e2a <_vfiprintf_r+0x68e>
  404e3e:	e521      	b.n	404884 <_vfiprintf_r+0xe8>
  404e40:	f043 0320 	orr.w	r3, r3, #32
  404e44:	f898 2000 	ldrb.w	r2, [r8]
  404e48:	e51a      	b.n	404880 <_vfiprintf_r+0xe4>
  404e4a:	9608      	str	r6, [sp, #32]
  404e4c:	2800      	cmp	r0, #0
  404e4e:	f040 82db 	bne.w	405408 <_vfiprintf_r+0xc6c>
  404e52:	2a00      	cmp	r2, #0
  404e54:	f000 80e7 	beq.w	405026 <_vfiprintf_r+0x88a>
  404e58:	2101      	movs	r1, #1
  404e5a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404e5e:	f04f 0200 	mov.w	r2, #0
  404e62:	9101      	str	r1, [sp, #4]
  404e64:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404e68:	9105      	str	r1, [sp, #20]
  404e6a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  404e6e:	e77b      	b.n	404d68 <_vfiprintf_r+0x5cc>
  404e70:	9a07      	ldr	r2, [sp, #28]
  404e72:	6813      	ldr	r3, [r2, #0]
  404e74:	3204      	adds	r2, #4
  404e76:	9207      	str	r2, [sp, #28]
  404e78:	9a03      	ldr	r2, [sp, #12]
  404e7a:	601a      	str	r2, [r3, #0]
  404e7c:	e4cb      	b.n	404816 <_vfiprintf_r+0x7a>
  404e7e:	aa0f      	add	r2, sp, #60	; 0x3c
  404e80:	9904      	ldr	r1, [sp, #16]
  404e82:	4620      	mov	r0, r4
  404e84:	f7ff fc4a 	bl	40471c <__sprint_r.part.0>
  404e88:	2800      	cmp	r0, #0
  404e8a:	f040 8139 	bne.w	405100 <_vfiprintf_r+0x964>
  404e8e:	9910      	ldr	r1, [sp, #64]	; 0x40
  404e90:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404e92:	f101 0c01 	add.w	ip, r1, #1
  404e96:	46ce      	mov	lr, r9
  404e98:	e5ff      	b.n	404a9a <_vfiprintf_r+0x2fe>
  404e9a:	9910      	ldr	r1, [sp, #64]	; 0x40
  404e9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404e9e:	1c48      	adds	r0, r1, #1
  404ea0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404ea4:	2d00      	cmp	r5, #0
  404ea6:	f43f ae22 	beq.w	404aee <_vfiprintf_r+0x352>
  404eaa:	3201      	adds	r2, #1
  404eac:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  404eb0:	2101      	movs	r1, #1
  404eb2:	2807      	cmp	r0, #7
  404eb4:	9211      	str	r2, [sp, #68]	; 0x44
  404eb6:	9010      	str	r0, [sp, #64]	; 0x40
  404eb8:	f8ca 5000 	str.w	r5, [sl]
  404ebc:	f8ca 1004 	str.w	r1, [sl, #4]
  404ec0:	f340 8108 	ble.w	4050d4 <_vfiprintf_r+0x938>
  404ec4:	2a00      	cmp	r2, #0
  404ec6:	f040 81bc 	bne.w	405242 <_vfiprintf_r+0xaa6>
  404eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404ecc:	2b00      	cmp	r3, #0
  404ece:	f43f ae1f 	beq.w	404b10 <_vfiprintf_r+0x374>
  404ed2:	ab0e      	add	r3, sp, #56	; 0x38
  404ed4:	2202      	movs	r2, #2
  404ed6:	4608      	mov	r0, r1
  404ed8:	931c      	str	r3, [sp, #112]	; 0x70
  404eda:	921d      	str	r2, [sp, #116]	; 0x74
  404edc:	46ca      	mov	sl, r9
  404ede:	4601      	mov	r1, r0
  404ee0:	f10a 0a08 	add.w	sl, sl, #8
  404ee4:	3001      	adds	r0, #1
  404ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404ee8:	2b80      	cmp	r3, #128	; 0x80
  404eea:	f43f ae19 	beq.w	404b20 <_vfiprintf_r+0x384>
  404eee:	9b05      	ldr	r3, [sp, #20]
  404ef0:	1ae4      	subs	r4, r4, r3
  404ef2:	2c00      	cmp	r4, #0
  404ef4:	dd2e      	ble.n	404f54 <_vfiprintf_r+0x7b8>
  404ef6:	2c10      	cmp	r4, #16
  404ef8:	4db3      	ldr	r5, [pc, #716]	; (4051c8 <_vfiprintf_r+0xa2c>)
  404efa:	dd1e      	ble.n	404f3a <_vfiprintf_r+0x79e>
  404efc:	46d6      	mov	lr, sl
  404efe:	2610      	movs	r6, #16
  404f00:	9f06      	ldr	r7, [sp, #24]
  404f02:	f8dd a010 	ldr.w	sl, [sp, #16]
  404f06:	e006      	b.n	404f16 <_vfiprintf_r+0x77a>
  404f08:	1c88      	adds	r0, r1, #2
  404f0a:	f10e 0e08 	add.w	lr, lr, #8
  404f0e:	4619      	mov	r1, r3
  404f10:	3c10      	subs	r4, #16
  404f12:	2c10      	cmp	r4, #16
  404f14:	dd10      	ble.n	404f38 <_vfiprintf_r+0x79c>
  404f16:	1c4b      	adds	r3, r1, #1
  404f18:	3210      	adds	r2, #16
  404f1a:	2b07      	cmp	r3, #7
  404f1c:	9211      	str	r2, [sp, #68]	; 0x44
  404f1e:	e88e 0060 	stmia.w	lr, {r5, r6}
  404f22:	9310      	str	r3, [sp, #64]	; 0x40
  404f24:	ddf0      	ble.n	404f08 <_vfiprintf_r+0x76c>
  404f26:	2a00      	cmp	r2, #0
  404f28:	d165      	bne.n	404ff6 <_vfiprintf_r+0x85a>
  404f2a:	3c10      	subs	r4, #16
  404f2c:	2c10      	cmp	r4, #16
  404f2e:	f04f 0001 	mov.w	r0, #1
  404f32:	4611      	mov	r1, r2
  404f34:	46ce      	mov	lr, r9
  404f36:	dcee      	bgt.n	404f16 <_vfiprintf_r+0x77a>
  404f38:	46f2      	mov	sl, lr
  404f3a:	4422      	add	r2, r4
  404f3c:	2807      	cmp	r0, #7
  404f3e:	9211      	str	r2, [sp, #68]	; 0x44
  404f40:	f8ca 5000 	str.w	r5, [sl]
  404f44:	f8ca 4004 	str.w	r4, [sl, #4]
  404f48:	9010      	str	r0, [sp, #64]	; 0x40
  404f4a:	f300 8085 	bgt.w	405058 <_vfiprintf_r+0x8bc>
  404f4e:	f10a 0a08 	add.w	sl, sl, #8
  404f52:	3001      	adds	r0, #1
  404f54:	9905      	ldr	r1, [sp, #20]
  404f56:	f8ca b000 	str.w	fp, [sl]
  404f5a:	440a      	add	r2, r1
  404f5c:	2807      	cmp	r0, #7
  404f5e:	9211      	str	r2, [sp, #68]	; 0x44
  404f60:	f8ca 1004 	str.w	r1, [sl, #4]
  404f64:	9010      	str	r0, [sp, #64]	; 0x40
  404f66:	f340 8082 	ble.w	40506e <_vfiprintf_r+0x8d2>
  404f6a:	2a00      	cmp	r2, #0
  404f6c:	f040 8118 	bne.w	4051a0 <_vfiprintf_r+0xa04>
  404f70:	9b02      	ldr	r3, [sp, #8]
  404f72:	9210      	str	r2, [sp, #64]	; 0x40
  404f74:	0758      	lsls	r0, r3, #29
  404f76:	d535      	bpl.n	404fe4 <_vfiprintf_r+0x848>
  404f78:	9b08      	ldr	r3, [sp, #32]
  404f7a:	9901      	ldr	r1, [sp, #4]
  404f7c:	1a5c      	subs	r4, r3, r1
  404f7e:	2c00      	cmp	r4, #0
  404f80:	f340 80e7 	ble.w	405152 <_vfiprintf_r+0x9b6>
  404f84:	46ca      	mov	sl, r9
  404f86:	2c10      	cmp	r4, #16
  404f88:	f340 8218 	ble.w	4053bc <_vfiprintf_r+0xc20>
  404f8c:	9910      	ldr	r1, [sp, #64]	; 0x40
  404f8e:	4e8f      	ldr	r6, [pc, #572]	; (4051cc <_vfiprintf_r+0xa30>)
  404f90:	9f06      	ldr	r7, [sp, #24]
  404f92:	f8dd b010 	ldr.w	fp, [sp, #16]
  404f96:	2510      	movs	r5, #16
  404f98:	e006      	b.n	404fa8 <_vfiprintf_r+0x80c>
  404f9a:	1c88      	adds	r0, r1, #2
  404f9c:	f10a 0a08 	add.w	sl, sl, #8
  404fa0:	4619      	mov	r1, r3
  404fa2:	3c10      	subs	r4, #16
  404fa4:	2c10      	cmp	r4, #16
  404fa6:	dd11      	ble.n	404fcc <_vfiprintf_r+0x830>
  404fa8:	1c4b      	adds	r3, r1, #1
  404faa:	3210      	adds	r2, #16
  404fac:	2b07      	cmp	r3, #7
  404fae:	9211      	str	r2, [sp, #68]	; 0x44
  404fb0:	f8ca 6000 	str.w	r6, [sl]
  404fb4:	f8ca 5004 	str.w	r5, [sl, #4]
  404fb8:	9310      	str	r3, [sp, #64]	; 0x40
  404fba:	ddee      	ble.n	404f9a <_vfiprintf_r+0x7fe>
  404fbc:	bb42      	cbnz	r2, 405010 <_vfiprintf_r+0x874>
  404fbe:	3c10      	subs	r4, #16
  404fc0:	2c10      	cmp	r4, #16
  404fc2:	f04f 0001 	mov.w	r0, #1
  404fc6:	4611      	mov	r1, r2
  404fc8:	46ca      	mov	sl, r9
  404fca:	dced      	bgt.n	404fa8 <_vfiprintf_r+0x80c>
  404fcc:	4422      	add	r2, r4
  404fce:	2807      	cmp	r0, #7
  404fd0:	9211      	str	r2, [sp, #68]	; 0x44
  404fd2:	f8ca 6000 	str.w	r6, [sl]
  404fd6:	f8ca 4004 	str.w	r4, [sl, #4]
  404fda:	9010      	str	r0, [sp, #64]	; 0x40
  404fdc:	dd51      	ble.n	405082 <_vfiprintf_r+0x8e6>
  404fde:	2a00      	cmp	r2, #0
  404fe0:	f040 819b 	bne.w	40531a <_vfiprintf_r+0xb7e>
  404fe4:	9b03      	ldr	r3, [sp, #12]
  404fe6:	9a08      	ldr	r2, [sp, #32]
  404fe8:	9901      	ldr	r1, [sp, #4]
  404fea:	428a      	cmp	r2, r1
  404fec:	bfac      	ite	ge
  404fee:	189b      	addge	r3, r3, r2
  404ff0:	185b      	addlt	r3, r3, r1
  404ff2:	9303      	str	r3, [sp, #12]
  404ff4:	e04e      	b.n	405094 <_vfiprintf_r+0x8f8>
  404ff6:	aa0f      	add	r2, sp, #60	; 0x3c
  404ff8:	4651      	mov	r1, sl
  404ffa:	4638      	mov	r0, r7
  404ffc:	f7ff fb8e 	bl	40471c <__sprint_r.part.0>
  405000:	2800      	cmp	r0, #0
  405002:	f040 813f 	bne.w	405284 <_vfiprintf_r+0xae8>
  405006:	9910      	ldr	r1, [sp, #64]	; 0x40
  405008:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40500a:	1c48      	adds	r0, r1, #1
  40500c:	46ce      	mov	lr, r9
  40500e:	e77f      	b.n	404f10 <_vfiprintf_r+0x774>
  405010:	aa0f      	add	r2, sp, #60	; 0x3c
  405012:	4659      	mov	r1, fp
  405014:	4638      	mov	r0, r7
  405016:	f7ff fb81 	bl	40471c <__sprint_r.part.0>
  40501a:	b960      	cbnz	r0, 405036 <_vfiprintf_r+0x89a>
  40501c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40501e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405020:	1c48      	adds	r0, r1, #1
  405022:	46ca      	mov	sl, r9
  405024:	e7bd      	b.n	404fa2 <_vfiprintf_r+0x806>
  405026:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405028:	f8dd b010 	ldr.w	fp, [sp, #16]
  40502c:	2b00      	cmp	r3, #0
  40502e:	f040 81d4 	bne.w	4053da <_vfiprintf_r+0xc3e>
  405032:	2300      	movs	r3, #0
  405034:	9310      	str	r3, [sp, #64]	; 0x40
  405036:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40503a:	f013 0f01 	tst.w	r3, #1
  40503e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405042:	d102      	bne.n	40504a <_vfiprintf_r+0x8ae>
  405044:	059a      	lsls	r2, r3, #22
  405046:	f140 80de 	bpl.w	405206 <_vfiprintf_r+0xa6a>
  40504a:	065b      	lsls	r3, r3, #25
  40504c:	f53f acb2 	bmi.w	4049b4 <_vfiprintf_r+0x218>
  405050:	9803      	ldr	r0, [sp, #12]
  405052:	b02d      	add	sp, #180	; 0xb4
  405054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405058:	2a00      	cmp	r2, #0
  40505a:	f040 8106 	bne.w	40526a <_vfiprintf_r+0xace>
  40505e:	9a05      	ldr	r2, [sp, #20]
  405060:	921d      	str	r2, [sp, #116]	; 0x74
  405062:	2301      	movs	r3, #1
  405064:	9211      	str	r2, [sp, #68]	; 0x44
  405066:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40506a:	9310      	str	r3, [sp, #64]	; 0x40
  40506c:	46ca      	mov	sl, r9
  40506e:	f10a 0a08 	add.w	sl, sl, #8
  405072:	9b02      	ldr	r3, [sp, #8]
  405074:	0759      	lsls	r1, r3, #29
  405076:	d504      	bpl.n	405082 <_vfiprintf_r+0x8e6>
  405078:	9b08      	ldr	r3, [sp, #32]
  40507a:	9901      	ldr	r1, [sp, #4]
  40507c:	1a5c      	subs	r4, r3, r1
  40507e:	2c00      	cmp	r4, #0
  405080:	dc81      	bgt.n	404f86 <_vfiprintf_r+0x7ea>
  405082:	9b03      	ldr	r3, [sp, #12]
  405084:	9908      	ldr	r1, [sp, #32]
  405086:	9801      	ldr	r0, [sp, #4]
  405088:	4281      	cmp	r1, r0
  40508a:	bfac      	ite	ge
  40508c:	185b      	addge	r3, r3, r1
  40508e:	181b      	addlt	r3, r3, r0
  405090:	9303      	str	r3, [sp, #12]
  405092:	bb72      	cbnz	r2, 4050f2 <_vfiprintf_r+0x956>
  405094:	2300      	movs	r3, #0
  405096:	9310      	str	r3, [sp, #64]	; 0x40
  405098:	46ca      	mov	sl, r9
  40509a:	f7ff bbbc 	b.w	404816 <_vfiprintf_r+0x7a>
  40509e:	aa0f      	add	r2, sp, #60	; 0x3c
  4050a0:	9904      	ldr	r1, [sp, #16]
  4050a2:	4620      	mov	r0, r4
  4050a4:	f7ff fb3a 	bl	40471c <__sprint_r.part.0>
  4050a8:	bb50      	cbnz	r0, 405100 <_vfiprintf_r+0x964>
  4050aa:	9910      	ldr	r1, [sp, #64]	; 0x40
  4050ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4050ae:	f101 0e01 	add.w	lr, r1, #1
  4050b2:	46cc      	mov	ip, r9
  4050b4:	e548      	b.n	404b48 <_vfiprintf_r+0x3ac>
  4050b6:	2a00      	cmp	r2, #0
  4050b8:	f040 8140 	bne.w	40533c <_vfiprintf_r+0xba0>
  4050bc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  4050c0:	2900      	cmp	r1, #0
  4050c2:	f000 811b 	beq.w	4052fc <_vfiprintf_r+0xb60>
  4050c6:	2201      	movs	r2, #1
  4050c8:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4050cc:	4610      	mov	r0, r2
  4050ce:	921d      	str	r2, [sp, #116]	; 0x74
  4050d0:	911c      	str	r1, [sp, #112]	; 0x70
  4050d2:	46ca      	mov	sl, r9
  4050d4:	4601      	mov	r1, r0
  4050d6:	f10a 0a08 	add.w	sl, sl, #8
  4050da:	3001      	adds	r0, #1
  4050dc:	e507      	b.n	404aee <_vfiprintf_r+0x352>
  4050de:	9b02      	ldr	r3, [sp, #8]
  4050e0:	2a01      	cmp	r2, #1
  4050e2:	f000 8098 	beq.w	405216 <_vfiprintf_r+0xa7a>
  4050e6:	2a02      	cmp	r2, #2
  4050e8:	d10d      	bne.n	405106 <_vfiprintf_r+0x96a>
  4050ea:	9302      	str	r3, [sp, #8]
  4050ec:	2600      	movs	r6, #0
  4050ee:	2700      	movs	r7, #0
  4050f0:	e5b0      	b.n	404c54 <_vfiprintf_r+0x4b8>
  4050f2:	aa0f      	add	r2, sp, #60	; 0x3c
  4050f4:	9904      	ldr	r1, [sp, #16]
  4050f6:	9806      	ldr	r0, [sp, #24]
  4050f8:	f7ff fb10 	bl	40471c <__sprint_r.part.0>
  4050fc:	2800      	cmp	r0, #0
  4050fe:	d0c9      	beq.n	405094 <_vfiprintf_r+0x8f8>
  405100:	f8dd b010 	ldr.w	fp, [sp, #16]
  405104:	e797      	b.n	405036 <_vfiprintf_r+0x89a>
  405106:	9302      	str	r3, [sp, #8]
  405108:	2600      	movs	r6, #0
  40510a:	2700      	movs	r7, #0
  40510c:	4649      	mov	r1, r9
  40510e:	e000      	b.n	405112 <_vfiprintf_r+0x976>
  405110:	4659      	mov	r1, fp
  405112:	08f2      	lsrs	r2, r6, #3
  405114:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  405118:	08f8      	lsrs	r0, r7, #3
  40511a:	f006 0307 	and.w	r3, r6, #7
  40511e:	4607      	mov	r7, r0
  405120:	4616      	mov	r6, r2
  405122:	3330      	adds	r3, #48	; 0x30
  405124:	ea56 0207 	orrs.w	r2, r6, r7
  405128:	f801 3c01 	strb.w	r3, [r1, #-1]
  40512c:	f101 3bff 	add.w	fp, r1, #4294967295
  405130:	d1ee      	bne.n	405110 <_vfiprintf_r+0x974>
  405132:	9a02      	ldr	r2, [sp, #8]
  405134:	07d6      	lsls	r6, r2, #31
  405136:	f57f ad9d 	bpl.w	404c74 <_vfiprintf_r+0x4d8>
  40513a:	2b30      	cmp	r3, #48	; 0x30
  40513c:	f43f ad9a 	beq.w	404c74 <_vfiprintf_r+0x4d8>
  405140:	3902      	subs	r1, #2
  405142:	2330      	movs	r3, #48	; 0x30
  405144:	f80b 3c01 	strb.w	r3, [fp, #-1]
  405148:	eba9 0301 	sub.w	r3, r9, r1
  40514c:	9305      	str	r3, [sp, #20]
  40514e:	468b      	mov	fp, r1
  405150:	e476      	b.n	404a40 <_vfiprintf_r+0x2a4>
  405152:	9b03      	ldr	r3, [sp, #12]
  405154:	9a08      	ldr	r2, [sp, #32]
  405156:	428a      	cmp	r2, r1
  405158:	bfac      	ite	ge
  40515a:	189b      	addge	r3, r3, r2
  40515c:	185b      	addlt	r3, r3, r1
  40515e:	9303      	str	r3, [sp, #12]
  405160:	e798      	b.n	405094 <_vfiprintf_r+0x8f8>
  405162:	2202      	movs	r2, #2
  405164:	e44d      	b.n	404a02 <_vfiprintf_r+0x266>
  405166:	2f00      	cmp	r7, #0
  405168:	bf08      	it	eq
  40516a:	2e0a      	cmpeq	r6, #10
  40516c:	d352      	bcc.n	405214 <_vfiprintf_r+0xa78>
  40516e:	46cb      	mov	fp, r9
  405170:	4630      	mov	r0, r6
  405172:	4639      	mov	r1, r7
  405174:	220a      	movs	r2, #10
  405176:	2300      	movs	r3, #0
  405178:	f001 fbc6 	bl	406908 <__aeabi_uldivmod>
  40517c:	3230      	adds	r2, #48	; 0x30
  40517e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  405182:	4630      	mov	r0, r6
  405184:	4639      	mov	r1, r7
  405186:	2300      	movs	r3, #0
  405188:	220a      	movs	r2, #10
  40518a:	f001 fbbd 	bl	406908 <__aeabi_uldivmod>
  40518e:	4606      	mov	r6, r0
  405190:	460f      	mov	r7, r1
  405192:	ea56 0307 	orrs.w	r3, r6, r7
  405196:	d1eb      	bne.n	405170 <_vfiprintf_r+0x9d4>
  405198:	e56c      	b.n	404c74 <_vfiprintf_r+0x4d8>
  40519a:	9405      	str	r4, [sp, #20]
  40519c:	46cb      	mov	fp, r9
  40519e:	e44f      	b.n	404a40 <_vfiprintf_r+0x2a4>
  4051a0:	aa0f      	add	r2, sp, #60	; 0x3c
  4051a2:	9904      	ldr	r1, [sp, #16]
  4051a4:	9806      	ldr	r0, [sp, #24]
  4051a6:	f7ff fab9 	bl	40471c <__sprint_r.part.0>
  4051aa:	2800      	cmp	r0, #0
  4051ac:	d1a8      	bne.n	405100 <_vfiprintf_r+0x964>
  4051ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4051b0:	46ca      	mov	sl, r9
  4051b2:	e75e      	b.n	405072 <_vfiprintf_r+0x8d6>
  4051b4:	aa0f      	add	r2, sp, #60	; 0x3c
  4051b6:	9904      	ldr	r1, [sp, #16]
  4051b8:	9806      	ldr	r0, [sp, #24]
  4051ba:	f7ff faaf 	bl	40471c <__sprint_r.part.0>
  4051be:	2800      	cmp	r0, #0
  4051c0:	d19e      	bne.n	405100 <_vfiprintf_r+0x964>
  4051c2:	46ca      	mov	sl, r9
  4051c4:	f7ff bbc0 	b.w	404948 <_vfiprintf_r+0x1ac>
  4051c8:	00406d80 	.word	0x00406d80
  4051cc:	00406d70 	.word	0x00406d70
  4051d0:	3104      	adds	r1, #4
  4051d2:	6816      	ldr	r6, [r2, #0]
  4051d4:	9107      	str	r1, [sp, #28]
  4051d6:	2201      	movs	r2, #1
  4051d8:	2700      	movs	r7, #0
  4051da:	e412      	b.n	404a02 <_vfiprintf_r+0x266>
  4051dc:	9807      	ldr	r0, [sp, #28]
  4051de:	4601      	mov	r1, r0
  4051e0:	3104      	adds	r1, #4
  4051e2:	6806      	ldr	r6, [r0, #0]
  4051e4:	9107      	str	r1, [sp, #28]
  4051e6:	2700      	movs	r7, #0
  4051e8:	e40b      	b.n	404a02 <_vfiprintf_r+0x266>
  4051ea:	680e      	ldr	r6, [r1, #0]
  4051ec:	3104      	adds	r1, #4
  4051ee:	9107      	str	r1, [sp, #28]
  4051f0:	2700      	movs	r7, #0
  4051f2:	e591      	b.n	404d18 <_vfiprintf_r+0x57c>
  4051f4:	9907      	ldr	r1, [sp, #28]
  4051f6:	680e      	ldr	r6, [r1, #0]
  4051f8:	460a      	mov	r2, r1
  4051fa:	17f7      	asrs	r7, r6, #31
  4051fc:	3204      	adds	r2, #4
  4051fe:	9207      	str	r2, [sp, #28]
  405200:	4630      	mov	r0, r6
  405202:	4639      	mov	r1, r7
  405204:	e50f      	b.n	404c26 <_vfiprintf_r+0x48a>
  405206:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40520a:	f000 fe7f 	bl	405f0c <__retarget_lock_release_recursive>
  40520e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405212:	e71a      	b.n	40504a <_vfiprintf_r+0x8ae>
  405214:	9b02      	ldr	r3, [sp, #8]
  405216:	9302      	str	r3, [sp, #8]
  405218:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40521c:	3630      	adds	r6, #48	; 0x30
  40521e:	2301      	movs	r3, #1
  405220:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  405224:	9305      	str	r3, [sp, #20]
  405226:	e40b      	b.n	404a40 <_vfiprintf_r+0x2a4>
  405228:	aa0f      	add	r2, sp, #60	; 0x3c
  40522a:	9904      	ldr	r1, [sp, #16]
  40522c:	9806      	ldr	r0, [sp, #24]
  40522e:	f7ff fa75 	bl	40471c <__sprint_r.part.0>
  405232:	2800      	cmp	r0, #0
  405234:	f47f af64 	bne.w	405100 <_vfiprintf_r+0x964>
  405238:	9910      	ldr	r1, [sp, #64]	; 0x40
  40523a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40523c:	1c48      	adds	r0, r1, #1
  40523e:	46ca      	mov	sl, r9
  405240:	e651      	b.n	404ee6 <_vfiprintf_r+0x74a>
  405242:	aa0f      	add	r2, sp, #60	; 0x3c
  405244:	9904      	ldr	r1, [sp, #16]
  405246:	9806      	ldr	r0, [sp, #24]
  405248:	f7ff fa68 	bl	40471c <__sprint_r.part.0>
  40524c:	2800      	cmp	r0, #0
  40524e:	f47f af57 	bne.w	405100 <_vfiprintf_r+0x964>
  405252:	9910      	ldr	r1, [sp, #64]	; 0x40
  405254:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405256:	1c48      	adds	r0, r1, #1
  405258:	46ca      	mov	sl, r9
  40525a:	e448      	b.n	404aee <_vfiprintf_r+0x352>
  40525c:	2a00      	cmp	r2, #0
  40525e:	f040 8091 	bne.w	405384 <_vfiprintf_r+0xbe8>
  405262:	2001      	movs	r0, #1
  405264:	4611      	mov	r1, r2
  405266:	46ca      	mov	sl, r9
  405268:	e641      	b.n	404eee <_vfiprintf_r+0x752>
  40526a:	aa0f      	add	r2, sp, #60	; 0x3c
  40526c:	9904      	ldr	r1, [sp, #16]
  40526e:	9806      	ldr	r0, [sp, #24]
  405270:	f7ff fa54 	bl	40471c <__sprint_r.part.0>
  405274:	2800      	cmp	r0, #0
  405276:	f47f af43 	bne.w	405100 <_vfiprintf_r+0x964>
  40527a:	9810      	ldr	r0, [sp, #64]	; 0x40
  40527c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40527e:	3001      	adds	r0, #1
  405280:	46ca      	mov	sl, r9
  405282:	e667      	b.n	404f54 <_vfiprintf_r+0x7b8>
  405284:	46d3      	mov	fp, sl
  405286:	e6d6      	b.n	405036 <_vfiprintf_r+0x89a>
  405288:	9e07      	ldr	r6, [sp, #28]
  40528a:	3607      	adds	r6, #7
  40528c:	f026 0207 	bic.w	r2, r6, #7
  405290:	f102 0108 	add.w	r1, r2, #8
  405294:	e9d2 6700 	ldrd	r6, r7, [r2]
  405298:	9107      	str	r1, [sp, #28]
  40529a:	2201      	movs	r2, #1
  40529c:	f7ff bbb1 	b.w	404a02 <_vfiprintf_r+0x266>
  4052a0:	9e07      	ldr	r6, [sp, #28]
  4052a2:	3607      	adds	r6, #7
  4052a4:	f026 0607 	bic.w	r6, r6, #7
  4052a8:	e9d6 0100 	ldrd	r0, r1, [r6]
  4052ac:	f106 0208 	add.w	r2, r6, #8
  4052b0:	9207      	str	r2, [sp, #28]
  4052b2:	4606      	mov	r6, r0
  4052b4:	460f      	mov	r7, r1
  4052b6:	e4b6      	b.n	404c26 <_vfiprintf_r+0x48a>
  4052b8:	9e07      	ldr	r6, [sp, #28]
  4052ba:	3607      	adds	r6, #7
  4052bc:	f026 0207 	bic.w	r2, r6, #7
  4052c0:	f102 0108 	add.w	r1, r2, #8
  4052c4:	e9d2 6700 	ldrd	r6, r7, [r2]
  4052c8:	9107      	str	r1, [sp, #28]
  4052ca:	2200      	movs	r2, #0
  4052cc:	f7ff bb99 	b.w	404a02 <_vfiprintf_r+0x266>
  4052d0:	9e07      	ldr	r6, [sp, #28]
  4052d2:	3607      	adds	r6, #7
  4052d4:	f026 0107 	bic.w	r1, r6, #7
  4052d8:	f101 0008 	add.w	r0, r1, #8
  4052dc:	9007      	str	r0, [sp, #28]
  4052de:	e9d1 6700 	ldrd	r6, r7, [r1]
  4052e2:	e519      	b.n	404d18 <_vfiprintf_r+0x57c>
  4052e4:	46cb      	mov	fp, r9
  4052e6:	f7ff bbab 	b.w	404a40 <_vfiprintf_r+0x2a4>
  4052ea:	252d      	movs	r5, #45	; 0x2d
  4052ec:	4276      	negs	r6, r6
  4052ee:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4052f2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4052f6:	2201      	movs	r2, #1
  4052f8:	f7ff bb88 	b.w	404a0c <_vfiprintf_r+0x270>
  4052fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4052fe:	b9b3      	cbnz	r3, 40532e <_vfiprintf_r+0xb92>
  405300:	4611      	mov	r1, r2
  405302:	2001      	movs	r0, #1
  405304:	46ca      	mov	sl, r9
  405306:	e5f2      	b.n	404eee <_vfiprintf_r+0x752>
  405308:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40530c:	f000 fdfe 	bl	405f0c <__retarget_lock_release_recursive>
  405310:	f04f 33ff 	mov.w	r3, #4294967295
  405314:	9303      	str	r3, [sp, #12]
  405316:	f7ff bb50 	b.w	4049ba <_vfiprintf_r+0x21e>
  40531a:	aa0f      	add	r2, sp, #60	; 0x3c
  40531c:	9904      	ldr	r1, [sp, #16]
  40531e:	9806      	ldr	r0, [sp, #24]
  405320:	f7ff f9fc 	bl	40471c <__sprint_r.part.0>
  405324:	2800      	cmp	r0, #0
  405326:	f47f aeeb 	bne.w	405100 <_vfiprintf_r+0x964>
  40532a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40532c:	e6a9      	b.n	405082 <_vfiprintf_r+0x8e6>
  40532e:	ab0e      	add	r3, sp, #56	; 0x38
  405330:	2202      	movs	r2, #2
  405332:	931c      	str	r3, [sp, #112]	; 0x70
  405334:	921d      	str	r2, [sp, #116]	; 0x74
  405336:	2001      	movs	r0, #1
  405338:	46ca      	mov	sl, r9
  40533a:	e5d0      	b.n	404ede <_vfiprintf_r+0x742>
  40533c:	aa0f      	add	r2, sp, #60	; 0x3c
  40533e:	9904      	ldr	r1, [sp, #16]
  405340:	9806      	ldr	r0, [sp, #24]
  405342:	f7ff f9eb 	bl	40471c <__sprint_r.part.0>
  405346:	2800      	cmp	r0, #0
  405348:	f47f aeda 	bne.w	405100 <_vfiprintf_r+0x964>
  40534c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40534e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405350:	1c48      	adds	r0, r1, #1
  405352:	46ca      	mov	sl, r9
  405354:	e5a4      	b.n	404ea0 <_vfiprintf_r+0x704>
  405356:	9a07      	ldr	r2, [sp, #28]
  405358:	9903      	ldr	r1, [sp, #12]
  40535a:	6813      	ldr	r3, [r2, #0]
  40535c:	17cd      	asrs	r5, r1, #31
  40535e:	4608      	mov	r0, r1
  405360:	3204      	adds	r2, #4
  405362:	4629      	mov	r1, r5
  405364:	9207      	str	r2, [sp, #28]
  405366:	e9c3 0100 	strd	r0, r1, [r3]
  40536a:	f7ff ba54 	b.w	404816 <_vfiprintf_r+0x7a>
  40536e:	4658      	mov	r0, fp
  405370:	9607      	str	r6, [sp, #28]
  405372:	9302      	str	r3, [sp, #8]
  405374:	f7ff f964 	bl	404640 <strlen>
  405378:	2400      	movs	r4, #0
  40537a:	9005      	str	r0, [sp, #20]
  40537c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405380:	f7ff bb5e 	b.w	404a40 <_vfiprintf_r+0x2a4>
  405384:	aa0f      	add	r2, sp, #60	; 0x3c
  405386:	9904      	ldr	r1, [sp, #16]
  405388:	9806      	ldr	r0, [sp, #24]
  40538a:	f7ff f9c7 	bl	40471c <__sprint_r.part.0>
  40538e:	2800      	cmp	r0, #0
  405390:	f47f aeb6 	bne.w	405100 <_vfiprintf_r+0x964>
  405394:	9910      	ldr	r1, [sp, #64]	; 0x40
  405396:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405398:	1c48      	adds	r0, r1, #1
  40539a:	46ca      	mov	sl, r9
  40539c:	e5a7      	b.n	404eee <_vfiprintf_r+0x752>
  40539e:	9910      	ldr	r1, [sp, #64]	; 0x40
  4053a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4053a2:	4e20      	ldr	r6, [pc, #128]	; (405424 <_vfiprintf_r+0xc88>)
  4053a4:	3101      	adds	r1, #1
  4053a6:	f7ff bb90 	b.w	404aca <_vfiprintf_r+0x32e>
  4053aa:	2c06      	cmp	r4, #6
  4053ac:	bf28      	it	cs
  4053ae:	2406      	movcs	r4, #6
  4053b0:	9405      	str	r4, [sp, #20]
  4053b2:	9607      	str	r6, [sp, #28]
  4053b4:	9401      	str	r4, [sp, #4]
  4053b6:	f8df b070 	ldr.w	fp, [pc, #112]	; 405428 <_vfiprintf_r+0xc8c>
  4053ba:	e4d5      	b.n	404d68 <_vfiprintf_r+0x5cc>
  4053bc:	9810      	ldr	r0, [sp, #64]	; 0x40
  4053be:	4e19      	ldr	r6, [pc, #100]	; (405424 <_vfiprintf_r+0xc88>)
  4053c0:	3001      	adds	r0, #1
  4053c2:	e603      	b.n	404fcc <_vfiprintf_r+0x830>
  4053c4:	9405      	str	r4, [sp, #20]
  4053c6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4053ca:	9607      	str	r6, [sp, #28]
  4053cc:	9302      	str	r3, [sp, #8]
  4053ce:	4604      	mov	r4, r0
  4053d0:	f7ff bb36 	b.w	404a40 <_vfiprintf_r+0x2a4>
  4053d4:	4686      	mov	lr, r0
  4053d6:	f7ff bbce 	b.w	404b76 <_vfiprintf_r+0x3da>
  4053da:	9806      	ldr	r0, [sp, #24]
  4053dc:	aa0f      	add	r2, sp, #60	; 0x3c
  4053de:	4659      	mov	r1, fp
  4053e0:	f7ff f99c 	bl	40471c <__sprint_r.part.0>
  4053e4:	2800      	cmp	r0, #0
  4053e6:	f43f ae24 	beq.w	405032 <_vfiprintf_r+0x896>
  4053ea:	e624      	b.n	405036 <_vfiprintf_r+0x89a>
  4053ec:	9907      	ldr	r1, [sp, #28]
  4053ee:	f898 2001 	ldrb.w	r2, [r8, #1]
  4053f2:	680c      	ldr	r4, [r1, #0]
  4053f4:	3104      	adds	r1, #4
  4053f6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4053fa:	46b8      	mov	r8, r7
  4053fc:	9107      	str	r1, [sp, #28]
  4053fe:	f7ff ba3f 	b.w	404880 <_vfiprintf_r+0xe4>
  405402:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405406:	e43c      	b.n	404c82 <_vfiprintf_r+0x4e6>
  405408:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40540c:	e521      	b.n	404e52 <_vfiprintf_r+0x6b6>
  40540e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405412:	f7ff bbf4 	b.w	404bfe <_vfiprintf_r+0x462>
  405416:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40541a:	e491      	b.n	404d40 <_vfiprintf_r+0x5a4>
  40541c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405420:	e469      	b.n	404cf6 <_vfiprintf_r+0x55a>
  405422:	bf00      	nop
  405424:	00406d70 	.word	0x00406d70
  405428:	00406d68 	.word	0x00406d68

0040542c <__sbprintf>:
  40542c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405430:	460c      	mov	r4, r1
  405432:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  405436:	8989      	ldrh	r1, [r1, #12]
  405438:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40543a:	89e5      	ldrh	r5, [r4, #14]
  40543c:	9619      	str	r6, [sp, #100]	; 0x64
  40543e:	f021 0102 	bic.w	r1, r1, #2
  405442:	4606      	mov	r6, r0
  405444:	69e0      	ldr	r0, [r4, #28]
  405446:	f8ad 100c 	strh.w	r1, [sp, #12]
  40544a:	4617      	mov	r7, r2
  40544c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  405450:	6a62      	ldr	r2, [r4, #36]	; 0x24
  405452:	f8ad 500e 	strh.w	r5, [sp, #14]
  405456:	4698      	mov	r8, r3
  405458:	ad1a      	add	r5, sp, #104	; 0x68
  40545a:	2300      	movs	r3, #0
  40545c:	9007      	str	r0, [sp, #28]
  40545e:	a816      	add	r0, sp, #88	; 0x58
  405460:	9209      	str	r2, [sp, #36]	; 0x24
  405462:	9306      	str	r3, [sp, #24]
  405464:	9500      	str	r5, [sp, #0]
  405466:	9504      	str	r5, [sp, #16]
  405468:	9102      	str	r1, [sp, #8]
  40546a:	9105      	str	r1, [sp, #20]
  40546c:	f000 fd48 	bl	405f00 <__retarget_lock_init_recursive>
  405470:	4643      	mov	r3, r8
  405472:	463a      	mov	r2, r7
  405474:	4669      	mov	r1, sp
  405476:	4630      	mov	r0, r6
  405478:	f7ff f990 	bl	40479c <_vfiprintf_r>
  40547c:	1e05      	subs	r5, r0, #0
  40547e:	db07      	blt.n	405490 <__sbprintf+0x64>
  405480:	4630      	mov	r0, r6
  405482:	4669      	mov	r1, sp
  405484:	f000 f928 	bl	4056d8 <_fflush_r>
  405488:	2800      	cmp	r0, #0
  40548a:	bf18      	it	ne
  40548c:	f04f 35ff 	movne.w	r5, #4294967295
  405490:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  405494:	065b      	lsls	r3, r3, #25
  405496:	d503      	bpl.n	4054a0 <__sbprintf+0x74>
  405498:	89a3      	ldrh	r3, [r4, #12]
  40549a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40549e:	81a3      	strh	r3, [r4, #12]
  4054a0:	9816      	ldr	r0, [sp, #88]	; 0x58
  4054a2:	f000 fd2f 	bl	405f04 <__retarget_lock_close_recursive>
  4054a6:	4628      	mov	r0, r5
  4054a8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4054ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004054b0 <__swsetup_r>:
  4054b0:	b538      	push	{r3, r4, r5, lr}
  4054b2:	4b30      	ldr	r3, [pc, #192]	; (405574 <__swsetup_r+0xc4>)
  4054b4:	681b      	ldr	r3, [r3, #0]
  4054b6:	4605      	mov	r5, r0
  4054b8:	460c      	mov	r4, r1
  4054ba:	b113      	cbz	r3, 4054c2 <__swsetup_r+0x12>
  4054bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4054be:	2a00      	cmp	r2, #0
  4054c0:	d038      	beq.n	405534 <__swsetup_r+0x84>
  4054c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4054c6:	b293      	uxth	r3, r2
  4054c8:	0718      	lsls	r0, r3, #28
  4054ca:	d50c      	bpl.n	4054e6 <__swsetup_r+0x36>
  4054cc:	6920      	ldr	r0, [r4, #16]
  4054ce:	b1a8      	cbz	r0, 4054fc <__swsetup_r+0x4c>
  4054d0:	f013 0201 	ands.w	r2, r3, #1
  4054d4:	d01e      	beq.n	405514 <__swsetup_r+0x64>
  4054d6:	6963      	ldr	r3, [r4, #20]
  4054d8:	2200      	movs	r2, #0
  4054da:	425b      	negs	r3, r3
  4054dc:	61a3      	str	r3, [r4, #24]
  4054de:	60a2      	str	r2, [r4, #8]
  4054e0:	b1f0      	cbz	r0, 405520 <__swsetup_r+0x70>
  4054e2:	2000      	movs	r0, #0
  4054e4:	bd38      	pop	{r3, r4, r5, pc}
  4054e6:	06d9      	lsls	r1, r3, #27
  4054e8:	d53c      	bpl.n	405564 <__swsetup_r+0xb4>
  4054ea:	0758      	lsls	r0, r3, #29
  4054ec:	d426      	bmi.n	40553c <__swsetup_r+0x8c>
  4054ee:	6920      	ldr	r0, [r4, #16]
  4054f0:	f042 0308 	orr.w	r3, r2, #8
  4054f4:	81a3      	strh	r3, [r4, #12]
  4054f6:	b29b      	uxth	r3, r3
  4054f8:	2800      	cmp	r0, #0
  4054fa:	d1e9      	bne.n	4054d0 <__swsetup_r+0x20>
  4054fc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  405500:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405504:	d0e4      	beq.n	4054d0 <__swsetup_r+0x20>
  405506:	4628      	mov	r0, r5
  405508:	4621      	mov	r1, r4
  40550a:	f000 fd2f 	bl	405f6c <__smakebuf_r>
  40550e:	89a3      	ldrh	r3, [r4, #12]
  405510:	6920      	ldr	r0, [r4, #16]
  405512:	e7dd      	b.n	4054d0 <__swsetup_r+0x20>
  405514:	0799      	lsls	r1, r3, #30
  405516:	bf58      	it	pl
  405518:	6962      	ldrpl	r2, [r4, #20]
  40551a:	60a2      	str	r2, [r4, #8]
  40551c:	2800      	cmp	r0, #0
  40551e:	d1e0      	bne.n	4054e2 <__swsetup_r+0x32>
  405520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405524:	061a      	lsls	r2, r3, #24
  405526:	d5dd      	bpl.n	4054e4 <__swsetup_r+0x34>
  405528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40552c:	81a3      	strh	r3, [r4, #12]
  40552e:	f04f 30ff 	mov.w	r0, #4294967295
  405532:	bd38      	pop	{r3, r4, r5, pc}
  405534:	4618      	mov	r0, r3
  405536:	f000 f927 	bl	405788 <__sinit>
  40553a:	e7c2      	b.n	4054c2 <__swsetup_r+0x12>
  40553c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40553e:	b151      	cbz	r1, 405556 <__swsetup_r+0xa6>
  405540:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405544:	4299      	cmp	r1, r3
  405546:	d004      	beq.n	405552 <__swsetup_r+0xa2>
  405548:	4628      	mov	r0, r5
  40554a:	f000 fa43 	bl	4059d4 <_free_r>
  40554e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405552:	2300      	movs	r3, #0
  405554:	6323      	str	r3, [r4, #48]	; 0x30
  405556:	2300      	movs	r3, #0
  405558:	6920      	ldr	r0, [r4, #16]
  40555a:	6063      	str	r3, [r4, #4]
  40555c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  405560:	6020      	str	r0, [r4, #0]
  405562:	e7c5      	b.n	4054f0 <__swsetup_r+0x40>
  405564:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  405568:	2309      	movs	r3, #9
  40556a:	602b      	str	r3, [r5, #0]
  40556c:	f04f 30ff 	mov.w	r0, #4294967295
  405570:	81a2      	strh	r2, [r4, #12]
  405572:	bd38      	pop	{r3, r4, r5, pc}
  405574:	20400010 	.word	0x20400010

00405578 <register_fini>:
  405578:	4b02      	ldr	r3, [pc, #8]	; (405584 <register_fini+0xc>)
  40557a:	b113      	cbz	r3, 405582 <register_fini+0xa>
  40557c:	4802      	ldr	r0, [pc, #8]	; (405588 <register_fini+0x10>)
  40557e:	f000 b805 	b.w	40558c <atexit>
  405582:	4770      	bx	lr
  405584:	00000000 	.word	0x00000000
  405588:	004057f9 	.word	0x004057f9

0040558c <atexit>:
  40558c:	2300      	movs	r3, #0
  40558e:	4601      	mov	r1, r0
  405590:	461a      	mov	r2, r3
  405592:	4618      	mov	r0, r3
  405594:	f001 b890 	b.w	4066b8 <__register_exitproc>

00405598 <__sflush_r>:
  405598:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40559c:	b29a      	uxth	r2, r3
  40559e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4055a2:	460d      	mov	r5, r1
  4055a4:	0711      	lsls	r1, r2, #28
  4055a6:	4680      	mov	r8, r0
  4055a8:	d43a      	bmi.n	405620 <__sflush_r+0x88>
  4055aa:	686a      	ldr	r2, [r5, #4]
  4055ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4055b0:	2a00      	cmp	r2, #0
  4055b2:	81ab      	strh	r3, [r5, #12]
  4055b4:	dd6f      	ble.n	405696 <__sflush_r+0xfe>
  4055b6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4055b8:	2c00      	cmp	r4, #0
  4055ba:	d049      	beq.n	405650 <__sflush_r+0xb8>
  4055bc:	2200      	movs	r2, #0
  4055be:	b29b      	uxth	r3, r3
  4055c0:	f8d8 6000 	ldr.w	r6, [r8]
  4055c4:	f8c8 2000 	str.w	r2, [r8]
  4055c8:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4055cc:	d067      	beq.n	40569e <__sflush_r+0x106>
  4055ce:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4055d0:	075f      	lsls	r7, r3, #29
  4055d2:	d505      	bpl.n	4055e0 <__sflush_r+0x48>
  4055d4:	6869      	ldr	r1, [r5, #4]
  4055d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4055d8:	1a52      	subs	r2, r2, r1
  4055da:	b10b      	cbz	r3, 4055e0 <__sflush_r+0x48>
  4055dc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4055de:	1ad2      	subs	r2, r2, r3
  4055e0:	2300      	movs	r3, #0
  4055e2:	69e9      	ldr	r1, [r5, #28]
  4055e4:	4640      	mov	r0, r8
  4055e6:	47a0      	blx	r4
  4055e8:	1c44      	adds	r4, r0, #1
  4055ea:	d03c      	beq.n	405666 <__sflush_r+0xce>
  4055ec:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4055f0:	692a      	ldr	r2, [r5, #16]
  4055f2:	602a      	str	r2, [r5, #0]
  4055f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4055f8:	2200      	movs	r2, #0
  4055fa:	81ab      	strh	r3, [r5, #12]
  4055fc:	04db      	lsls	r3, r3, #19
  4055fe:	606a      	str	r2, [r5, #4]
  405600:	d447      	bmi.n	405692 <__sflush_r+0xfa>
  405602:	6b29      	ldr	r1, [r5, #48]	; 0x30
  405604:	f8c8 6000 	str.w	r6, [r8]
  405608:	b311      	cbz	r1, 405650 <__sflush_r+0xb8>
  40560a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40560e:	4299      	cmp	r1, r3
  405610:	d002      	beq.n	405618 <__sflush_r+0x80>
  405612:	4640      	mov	r0, r8
  405614:	f000 f9de 	bl	4059d4 <_free_r>
  405618:	2000      	movs	r0, #0
  40561a:	6328      	str	r0, [r5, #48]	; 0x30
  40561c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405620:	692e      	ldr	r6, [r5, #16]
  405622:	b1ae      	cbz	r6, 405650 <__sflush_r+0xb8>
  405624:	682c      	ldr	r4, [r5, #0]
  405626:	602e      	str	r6, [r5, #0]
  405628:	0791      	lsls	r1, r2, #30
  40562a:	bf0c      	ite	eq
  40562c:	696b      	ldreq	r3, [r5, #20]
  40562e:	2300      	movne	r3, #0
  405630:	1ba4      	subs	r4, r4, r6
  405632:	60ab      	str	r3, [r5, #8]
  405634:	e00a      	b.n	40564c <__sflush_r+0xb4>
  405636:	4623      	mov	r3, r4
  405638:	4632      	mov	r2, r6
  40563a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40563c:	69e9      	ldr	r1, [r5, #28]
  40563e:	4640      	mov	r0, r8
  405640:	47b8      	blx	r7
  405642:	2800      	cmp	r0, #0
  405644:	eba4 0400 	sub.w	r4, r4, r0
  405648:	4406      	add	r6, r0
  40564a:	dd04      	ble.n	405656 <__sflush_r+0xbe>
  40564c:	2c00      	cmp	r4, #0
  40564e:	dcf2      	bgt.n	405636 <__sflush_r+0x9e>
  405650:	2000      	movs	r0, #0
  405652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405656:	89ab      	ldrh	r3, [r5, #12]
  405658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40565c:	81ab      	strh	r3, [r5, #12]
  40565e:	f04f 30ff 	mov.w	r0, #4294967295
  405662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405666:	f8d8 4000 	ldr.w	r4, [r8]
  40566a:	2c1d      	cmp	r4, #29
  40566c:	d8f3      	bhi.n	405656 <__sflush_r+0xbe>
  40566e:	4b19      	ldr	r3, [pc, #100]	; (4056d4 <__sflush_r+0x13c>)
  405670:	40e3      	lsrs	r3, r4
  405672:	43db      	mvns	r3, r3
  405674:	f013 0301 	ands.w	r3, r3, #1
  405678:	d1ed      	bne.n	405656 <__sflush_r+0xbe>
  40567a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40567e:	606b      	str	r3, [r5, #4]
  405680:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  405684:	6929      	ldr	r1, [r5, #16]
  405686:	81ab      	strh	r3, [r5, #12]
  405688:	04da      	lsls	r2, r3, #19
  40568a:	6029      	str	r1, [r5, #0]
  40568c:	d5b9      	bpl.n	405602 <__sflush_r+0x6a>
  40568e:	2c00      	cmp	r4, #0
  405690:	d1b7      	bne.n	405602 <__sflush_r+0x6a>
  405692:	6528      	str	r0, [r5, #80]	; 0x50
  405694:	e7b5      	b.n	405602 <__sflush_r+0x6a>
  405696:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  405698:	2a00      	cmp	r2, #0
  40569a:	dc8c      	bgt.n	4055b6 <__sflush_r+0x1e>
  40569c:	e7d8      	b.n	405650 <__sflush_r+0xb8>
  40569e:	2301      	movs	r3, #1
  4056a0:	69e9      	ldr	r1, [r5, #28]
  4056a2:	4640      	mov	r0, r8
  4056a4:	47a0      	blx	r4
  4056a6:	1c43      	adds	r3, r0, #1
  4056a8:	4602      	mov	r2, r0
  4056aa:	d002      	beq.n	4056b2 <__sflush_r+0x11a>
  4056ac:	89ab      	ldrh	r3, [r5, #12]
  4056ae:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4056b0:	e78e      	b.n	4055d0 <__sflush_r+0x38>
  4056b2:	f8d8 3000 	ldr.w	r3, [r8]
  4056b6:	2b00      	cmp	r3, #0
  4056b8:	d0f8      	beq.n	4056ac <__sflush_r+0x114>
  4056ba:	2b1d      	cmp	r3, #29
  4056bc:	d001      	beq.n	4056c2 <__sflush_r+0x12a>
  4056be:	2b16      	cmp	r3, #22
  4056c0:	d102      	bne.n	4056c8 <__sflush_r+0x130>
  4056c2:	f8c8 6000 	str.w	r6, [r8]
  4056c6:	e7c3      	b.n	405650 <__sflush_r+0xb8>
  4056c8:	89ab      	ldrh	r3, [r5, #12]
  4056ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4056ce:	81ab      	strh	r3, [r5, #12]
  4056d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4056d4:	20400001 	.word	0x20400001

004056d8 <_fflush_r>:
  4056d8:	b538      	push	{r3, r4, r5, lr}
  4056da:	460d      	mov	r5, r1
  4056dc:	4604      	mov	r4, r0
  4056de:	b108      	cbz	r0, 4056e4 <_fflush_r+0xc>
  4056e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4056e2:	b1bb      	cbz	r3, 405714 <_fflush_r+0x3c>
  4056e4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4056e8:	b188      	cbz	r0, 40570e <_fflush_r+0x36>
  4056ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4056ec:	07db      	lsls	r3, r3, #31
  4056ee:	d401      	bmi.n	4056f4 <_fflush_r+0x1c>
  4056f0:	0581      	lsls	r1, r0, #22
  4056f2:	d517      	bpl.n	405724 <_fflush_r+0x4c>
  4056f4:	4620      	mov	r0, r4
  4056f6:	4629      	mov	r1, r5
  4056f8:	f7ff ff4e 	bl	405598 <__sflush_r>
  4056fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4056fe:	07da      	lsls	r2, r3, #31
  405700:	4604      	mov	r4, r0
  405702:	d402      	bmi.n	40570a <_fflush_r+0x32>
  405704:	89ab      	ldrh	r3, [r5, #12]
  405706:	059b      	lsls	r3, r3, #22
  405708:	d507      	bpl.n	40571a <_fflush_r+0x42>
  40570a:	4620      	mov	r0, r4
  40570c:	bd38      	pop	{r3, r4, r5, pc}
  40570e:	4604      	mov	r4, r0
  405710:	4620      	mov	r0, r4
  405712:	bd38      	pop	{r3, r4, r5, pc}
  405714:	f000 f838 	bl	405788 <__sinit>
  405718:	e7e4      	b.n	4056e4 <_fflush_r+0xc>
  40571a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40571c:	f000 fbf6 	bl	405f0c <__retarget_lock_release_recursive>
  405720:	4620      	mov	r0, r4
  405722:	bd38      	pop	{r3, r4, r5, pc}
  405724:	6da8      	ldr	r0, [r5, #88]	; 0x58
  405726:	f000 fbef 	bl	405f08 <__retarget_lock_acquire_recursive>
  40572a:	e7e3      	b.n	4056f4 <_fflush_r+0x1c>

0040572c <_cleanup_r>:
  40572c:	4901      	ldr	r1, [pc, #4]	; (405734 <_cleanup_r+0x8>)
  40572e:	f000 bbaf 	b.w	405e90 <_fwalk_reent>
  405732:	bf00      	nop
  405734:	004067a1 	.word	0x004067a1

00405738 <std.isra.0>:
  405738:	b510      	push	{r4, lr}
  40573a:	2300      	movs	r3, #0
  40573c:	4604      	mov	r4, r0
  40573e:	8181      	strh	r1, [r0, #12]
  405740:	81c2      	strh	r2, [r0, #14]
  405742:	6003      	str	r3, [r0, #0]
  405744:	6043      	str	r3, [r0, #4]
  405746:	6083      	str	r3, [r0, #8]
  405748:	6643      	str	r3, [r0, #100]	; 0x64
  40574a:	6103      	str	r3, [r0, #16]
  40574c:	6143      	str	r3, [r0, #20]
  40574e:	6183      	str	r3, [r0, #24]
  405750:	4619      	mov	r1, r3
  405752:	2208      	movs	r2, #8
  405754:	305c      	adds	r0, #92	; 0x5c
  405756:	f7fe fe1f 	bl	404398 <memset>
  40575a:	4807      	ldr	r0, [pc, #28]	; (405778 <std.isra.0+0x40>)
  40575c:	4907      	ldr	r1, [pc, #28]	; (40577c <std.isra.0+0x44>)
  40575e:	4a08      	ldr	r2, [pc, #32]	; (405780 <std.isra.0+0x48>)
  405760:	4b08      	ldr	r3, [pc, #32]	; (405784 <std.isra.0+0x4c>)
  405762:	6220      	str	r0, [r4, #32]
  405764:	61e4      	str	r4, [r4, #28]
  405766:	6261      	str	r1, [r4, #36]	; 0x24
  405768:	62a2      	str	r2, [r4, #40]	; 0x28
  40576a:	62e3      	str	r3, [r4, #44]	; 0x2c
  40576c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  405770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  405774:	f000 bbc4 	b.w	405f00 <__retarget_lock_init_recursive>
  405778:	004064e5 	.word	0x004064e5
  40577c:	00406509 	.word	0x00406509
  405780:	00406545 	.word	0x00406545
  405784:	00406565 	.word	0x00406565

00405788 <__sinit>:
  405788:	b510      	push	{r4, lr}
  40578a:	4604      	mov	r4, r0
  40578c:	4812      	ldr	r0, [pc, #72]	; (4057d8 <__sinit+0x50>)
  40578e:	f000 fbbb 	bl	405f08 <__retarget_lock_acquire_recursive>
  405792:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  405794:	b9d2      	cbnz	r2, 4057cc <__sinit+0x44>
  405796:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40579a:	4810      	ldr	r0, [pc, #64]	; (4057dc <__sinit+0x54>)
  40579c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4057a0:	2103      	movs	r1, #3
  4057a2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4057a6:	63e0      	str	r0, [r4, #60]	; 0x3c
  4057a8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4057ac:	6860      	ldr	r0, [r4, #4]
  4057ae:	2104      	movs	r1, #4
  4057b0:	f7ff ffc2 	bl	405738 <std.isra.0>
  4057b4:	2201      	movs	r2, #1
  4057b6:	2109      	movs	r1, #9
  4057b8:	68a0      	ldr	r0, [r4, #8]
  4057ba:	f7ff ffbd 	bl	405738 <std.isra.0>
  4057be:	2202      	movs	r2, #2
  4057c0:	2112      	movs	r1, #18
  4057c2:	68e0      	ldr	r0, [r4, #12]
  4057c4:	f7ff ffb8 	bl	405738 <std.isra.0>
  4057c8:	2301      	movs	r3, #1
  4057ca:	63a3      	str	r3, [r4, #56]	; 0x38
  4057cc:	4802      	ldr	r0, [pc, #8]	; (4057d8 <__sinit+0x50>)
  4057ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4057d2:	f000 bb9b 	b.w	405f0c <__retarget_lock_release_recursive>
  4057d6:	bf00      	nop
  4057d8:	20400cb4 	.word	0x20400cb4
  4057dc:	0040572d 	.word	0x0040572d

004057e0 <__sfp_lock_acquire>:
  4057e0:	4801      	ldr	r0, [pc, #4]	; (4057e8 <__sfp_lock_acquire+0x8>)
  4057e2:	f000 bb91 	b.w	405f08 <__retarget_lock_acquire_recursive>
  4057e6:	bf00      	nop
  4057e8:	20400cc8 	.word	0x20400cc8

004057ec <__sfp_lock_release>:
  4057ec:	4801      	ldr	r0, [pc, #4]	; (4057f4 <__sfp_lock_release+0x8>)
  4057ee:	f000 bb8d 	b.w	405f0c <__retarget_lock_release_recursive>
  4057f2:	bf00      	nop
  4057f4:	20400cc8 	.word	0x20400cc8

004057f8 <__libc_fini_array>:
  4057f8:	b538      	push	{r3, r4, r5, lr}
  4057fa:	4c0a      	ldr	r4, [pc, #40]	; (405824 <__libc_fini_array+0x2c>)
  4057fc:	4d0a      	ldr	r5, [pc, #40]	; (405828 <__libc_fini_array+0x30>)
  4057fe:	1b64      	subs	r4, r4, r5
  405800:	10a4      	asrs	r4, r4, #2
  405802:	d00a      	beq.n	40581a <__libc_fini_array+0x22>
  405804:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  405808:	3b01      	subs	r3, #1
  40580a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40580e:	3c01      	subs	r4, #1
  405810:	f855 3904 	ldr.w	r3, [r5], #-4
  405814:	4798      	blx	r3
  405816:	2c00      	cmp	r4, #0
  405818:	d1f9      	bne.n	40580e <__libc_fini_array+0x16>
  40581a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40581e:	f001 bb4b 	b.w	406eb8 <_fini>
  405822:	bf00      	nop
  405824:	00406ec8 	.word	0x00406ec8
  405828:	00406ec4 	.word	0x00406ec4

0040582c <__fputwc>:
  40582c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405830:	b082      	sub	sp, #8
  405832:	4680      	mov	r8, r0
  405834:	4689      	mov	r9, r1
  405836:	4614      	mov	r4, r2
  405838:	f000 fb54 	bl	405ee4 <__locale_mb_cur_max>
  40583c:	2801      	cmp	r0, #1
  40583e:	d036      	beq.n	4058ae <__fputwc+0x82>
  405840:	464a      	mov	r2, r9
  405842:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  405846:	a901      	add	r1, sp, #4
  405848:	4640      	mov	r0, r8
  40584a:	f000 fee7 	bl	40661c <_wcrtomb_r>
  40584e:	1c42      	adds	r2, r0, #1
  405850:	4606      	mov	r6, r0
  405852:	d025      	beq.n	4058a0 <__fputwc+0x74>
  405854:	b3a8      	cbz	r0, 4058c2 <__fputwc+0x96>
  405856:	f89d e004 	ldrb.w	lr, [sp, #4]
  40585a:	2500      	movs	r5, #0
  40585c:	f10d 0a04 	add.w	sl, sp, #4
  405860:	e009      	b.n	405876 <__fputwc+0x4a>
  405862:	6823      	ldr	r3, [r4, #0]
  405864:	1c5a      	adds	r2, r3, #1
  405866:	6022      	str	r2, [r4, #0]
  405868:	f883 e000 	strb.w	lr, [r3]
  40586c:	3501      	adds	r5, #1
  40586e:	42b5      	cmp	r5, r6
  405870:	d227      	bcs.n	4058c2 <__fputwc+0x96>
  405872:	f815 e00a 	ldrb.w	lr, [r5, sl]
  405876:	68a3      	ldr	r3, [r4, #8]
  405878:	3b01      	subs	r3, #1
  40587a:	2b00      	cmp	r3, #0
  40587c:	60a3      	str	r3, [r4, #8]
  40587e:	daf0      	bge.n	405862 <__fputwc+0x36>
  405880:	69a7      	ldr	r7, [r4, #24]
  405882:	42bb      	cmp	r3, r7
  405884:	4671      	mov	r1, lr
  405886:	4622      	mov	r2, r4
  405888:	4640      	mov	r0, r8
  40588a:	db02      	blt.n	405892 <__fputwc+0x66>
  40588c:	f1be 0f0a 	cmp.w	lr, #10
  405890:	d1e7      	bne.n	405862 <__fputwc+0x36>
  405892:	f000 fe6b 	bl	40656c <__swbuf_r>
  405896:	1c43      	adds	r3, r0, #1
  405898:	d1e8      	bne.n	40586c <__fputwc+0x40>
  40589a:	b002      	add	sp, #8
  40589c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4058a0:	89a3      	ldrh	r3, [r4, #12]
  4058a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4058a6:	81a3      	strh	r3, [r4, #12]
  4058a8:	b002      	add	sp, #8
  4058aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4058ae:	f109 33ff 	add.w	r3, r9, #4294967295
  4058b2:	2bfe      	cmp	r3, #254	; 0xfe
  4058b4:	d8c4      	bhi.n	405840 <__fputwc+0x14>
  4058b6:	fa5f fe89 	uxtb.w	lr, r9
  4058ba:	4606      	mov	r6, r0
  4058bc:	f88d e004 	strb.w	lr, [sp, #4]
  4058c0:	e7cb      	b.n	40585a <__fputwc+0x2e>
  4058c2:	4648      	mov	r0, r9
  4058c4:	b002      	add	sp, #8
  4058c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4058ca:	bf00      	nop

004058cc <_fputwc_r>:
  4058cc:	b530      	push	{r4, r5, lr}
  4058ce:	6e53      	ldr	r3, [r2, #100]	; 0x64
  4058d0:	f013 0f01 	tst.w	r3, #1
  4058d4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4058d8:	4614      	mov	r4, r2
  4058da:	b083      	sub	sp, #12
  4058dc:	4605      	mov	r5, r0
  4058de:	b29a      	uxth	r2, r3
  4058e0:	d101      	bne.n	4058e6 <_fputwc_r+0x1a>
  4058e2:	0590      	lsls	r0, r2, #22
  4058e4:	d51c      	bpl.n	405920 <_fputwc_r+0x54>
  4058e6:	0490      	lsls	r0, r2, #18
  4058e8:	d406      	bmi.n	4058f8 <_fputwc_r+0x2c>
  4058ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4058ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4058f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4058f4:	81a3      	strh	r3, [r4, #12]
  4058f6:	6662      	str	r2, [r4, #100]	; 0x64
  4058f8:	4628      	mov	r0, r5
  4058fa:	4622      	mov	r2, r4
  4058fc:	f7ff ff96 	bl	40582c <__fputwc>
  405900:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405902:	07da      	lsls	r2, r3, #31
  405904:	4605      	mov	r5, r0
  405906:	d402      	bmi.n	40590e <_fputwc_r+0x42>
  405908:	89a3      	ldrh	r3, [r4, #12]
  40590a:	059b      	lsls	r3, r3, #22
  40590c:	d502      	bpl.n	405914 <_fputwc_r+0x48>
  40590e:	4628      	mov	r0, r5
  405910:	b003      	add	sp, #12
  405912:	bd30      	pop	{r4, r5, pc}
  405914:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405916:	f000 faf9 	bl	405f0c <__retarget_lock_release_recursive>
  40591a:	4628      	mov	r0, r5
  40591c:	b003      	add	sp, #12
  40591e:	bd30      	pop	{r4, r5, pc}
  405920:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405922:	9101      	str	r1, [sp, #4]
  405924:	f000 faf0 	bl	405f08 <__retarget_lock_acquire_recursive>
  405928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40592c:	9901      	ldr	r1, [sp, #4]
  40592e:	b29a      	uxth	r2, r3
  405930:	e7d9      	b.n	4058e6 <_fputwc_r+0x1a>
  405932:	bf00      	nop

00405934 <_malloc_trim_r>:
  405934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405936:	4f24      	ldr	r7, [pc, #144]	; (4059c8 <_malloc_trim_r+0x94>)
  405938:	460c      	mov	r4, r1
  40593a:	4606      	mov	r6, r0
  40593c:	f7fe fd7a 	bl	404434 <__malloc_lock>
  405940:	68bb      	ldr	r3, [r7, #8]
  405942:	685d      	ldr	r5, [r3, #4]
  405944:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  405948:	310f      	adds	r1, #15
  40594a:	f025 0503 	bic.w	r5, r5, #3
  40594e:	4429      	add	r1, r5
  405950:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405954:	f021 010f 	bic.w	r1, r1, #15
  405958:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40595c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405960:	db07      	blt.n	405972 <_malloc_trim_r+0x3e>
  405962:	2100      	movs	r1, #0
  405964:	4630      	mov	r0, r6
  405966:	f7fe fd71 	bl	40444c <_sbrk_r>
  40596a:	68bb      	ldr	r3, [r7, #8]
  40596c:	442b      	add	r3, r5
  40596e:	4298      	cmp	r0, r3
  405970:	d004      	beq.n	40597c <_malloc_trim_r+0x48>
  405972:	4630      	mov	r0, r6
  405974:	f7fe fd64 	bl	404440 <__malloc_unlock>
  405978:	2000      	movs	r0, #0
  40597a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40597c:	4261      	negs	r1, r4
  40597e:	4630      	mov	r0, r6
  405980:	f7fe fd64 	bl	40444c <_sbrk_r>
  405984:	3001      	adds	r0, #1
  405986:	d00d      	beq.n	4059a4 <_malloc_trim_r+0x70>
  405988:	4b10      	ldr	r3, [pc, #64]	; (4059cc <_malloc_trim_r+0x98>)
  40598a:	68ba      	ldr	r2, [r7, #8]
  40598c:	6819      	ldr	r1, [r3, #0]
  40598e:	1b2d      	subs	r5, r5, r4
  405990:	f045 0501 	orr.w	r5, r5, #1
  405994:	4630      	mov	r0, r6
  405996:	1b09      	subs	r1, r1, r4
  405998:	6055      	str	r5, [r2, #4]
  40599a:	6019      	str	r1, [r3, #0]
  40599c:	f7fe fd50 	bl	404440 <__malloc_unlock>
  4059a0:	2001      	movs	r0, #1
  4059a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4059a4:	2100      	movs	r1, #0
  4059a6:	4630      	mov	r0, r6
  4059a8:	f7fe fd50 	bl	40444c <_sbrk_r>
  4059ac:	68ba      	ldr	r2, [r7, #8]
  4059ae:	1a83      	subs	r3, r0, r2
  4059b0:	2b0f      	cmp	r3, #15
  4059b2:	ddde      	ble.n	405972 <_malloc_trim_r+0x3e>
  4059b4:	4c06      	ldr	r4, [pc, #24]	; (4059d0 <_malloc_trim_r+0x9c>)
  4059b6:	4905      	ldr	r1, [pc, #20]	; (4059cc <_malloc_trim_r+0x98>)
  4059b8:	6824      	ldr	r4, [r4, #0]
  4059ba:	f043 0301 	orr.w	r3, r3, #1
  4059be:	1b00      	subs	r0, r0, r4
  4059c0:	6053      	str	r3, [r2, #4]
  4059c2:	6008      	str	r0, [r1, #0]
  4059c4:	e7d5      	b.n	405972 <_malloc_trim_r+0x3e>
  4059c6:	bf00      	nop
  4059c8:	20400440 	.word	0x20400440
  4059cc:	20400b94 	.word	0x20400b94
  4059d0:	20400848 	.word	0x20400848

004059d4 <_free_r>:
  4059d4:	2900      	cmp	r1, #0
  4059d6:	d044      	beq.n	405a62 <_free_r+0x8e>
  4059d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4059dc:	460d      	mov	r5, r1
  4059de:	4680      	mov	r8, r0
  4059e0:	f7fe fd28 	bl	404434 <__malloc_lock>
  4059e4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4059e8:	4969      	ldr	r1, [pc, #420]	; (405b90 <_free_r+0x1bc>)
  4059ea:	f027 0301 	bic.w	r3, r7, #1
  4059ee:	f1a5 0408 	sub.w	r4, r5, #8
  4059f2:	18e2      	adds	r2, r4, r3
  4059f4:	688e      	ldr	r6, [r1, #8]
  4059f6:	6850      	ldr	r0, [r2, #4]
  4059f8:	42b2      	cmp	r2, r6
  4059fa:	f020 0003 	bic.w	r0, r0, #3
  4059fe:	d05e      	beq.n	405abe <_free_r+0xea>
  405a00:	07fe      	lsls	r6, r7, #31
  405a02:	6050      	str	r0, [r2, #4]
  405a04:	d40b      	bmi.n	405a1e <_free_r+0x4a>
  405a06:	f855 7c08 	ldr.w	r7, [r5, #-8]
  405a0a:	1be4      	subs	r4, r4, r7
  405a0c:	f101 0e08 	add.w	lr, r1, #8
  405a10:	68a5      	ldr	r5, [r4, #8]
  405a12:	4575      	cmp	r5, lr
  405a14:	443b      	add	r3, r7
  405a16:	d06d      	beq.n	405af4 <_free_r+0x120>
  405a18:	68e7      	ldr	r7, [r4, #12]
  405a1a:	60ef      	str	r7, [r5, #12]
  405a1c:	60bd      	str	r5, [r7, #8]
  405a1e:	1815      	adds	r5, r2, r0
  405a20:	686d      	ldr	r5, [r5, #4]
  405a22:	07ed      	lsls	r5, r5, #31
  405a24:	d53e      	bpl.n	405aa4 <_free_r+0xd0>
  405a26:	f043 0201 	orr.w	r2, r3, #1
  405a2a:	6062      	str	r2, [r4, #4]
  405a2c:	50e3      	str	r3, [r4, r3]
  405a2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405a32:	d217      	bcs.n	405a64 <_free_r+0x90>
  405a34:	08db      	lsrs	r3, r3, #3
  405a36:	1c58      	adds	r0, r3, #1
  405a38:	109a      	asrs	r2, r3, #2
  405a3a:	684d      	ldr	r5, [r1, #4]
  405a3c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  405a40:	60a7      	str	r7, [r4, #8]
  405a42:	2301      	movs	r3, #1
  405a44:	4093      	lsls	r3, r2
  405a46:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  405a4a:	432b      	orrs	r3, r5
  405a4c:	3a08      	subs	r2, #8
  405a4e:	60e2      	str	r2, [r4, #12]
  405a50:	604b      	str	r3, [r1, #4]
  405a52:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  405a56:	60fc      	str	r4, [r7, #12]
  405a58:	4640      	mov	r0, r8
  405a5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405a5e:	f7fe bcef 	b.w	404440 <__malloc_unlock>
  405a62:	4770      	bx	lr
  405a64:	0a5a      	lsrs	r2, r3, #9
  405a66:	2a04      	cmp	r2, #4
  405a68:	d852      	bhi.n	405b10 <_free_r+0x13c>
  405a6a:	099a      	lsrs	r2, r3, #6
  405a6c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  405a70:	00ff      	lsls	r7, r7, #3
  405a72:	f102 0538 	add.w	r5, r2, #56	; 0x38
  405a76:	19c8      	adds	r0, r1, r7
  405a78:	59ca      	ldr	r2, [r1, r7]
  405a7a:	3808      	subs	r0, #8
  405a7c:	4290      	cmp	r0, r2
  405a7e:	d04f      	beq.n	405b20 <_free_r+0x14c>
  405a80:	6851      	ldr	r1, [r2, #4]
  405a82:	f021 0103 	bic.w	r1, r1, #3
  405a86:	428b      	cmp	r3, r1
  405a88:	d232      	bcs.n	405af0 <_free_r+0x11c>
  405a8a:	6892      	ldr	r2, [r2, #8]
  405a8c:	4290      	cmp	r0, r2
  405a8e:	d1f7      	bne.n	405a80 <_free_r+0xac>
  405a90:	68c3      	ldr	r3, [r0, #12]
  405a92:	60a0      	str	r0, [r4, #8]
  405a94:	60e3      	str	r3, [r4, #12]
  405a96:	609c      	str	r4, [r3, #8]
  405a98:	60c4      	str	r4, [r0, #12]
  405a9a:	4640      	mov	r0, r8
  405a9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405aa0:	f7fe bcce 	b.w	404440 <__malloc_unlock>
  405aa4:	6895      	ldr	r5, [r2, #8]
  405aa6:	4f3b      	ldr	r7, [pc, #236]	; (405b94 <_free_r+0x1c0>)
  405aa8:	42bd      	cmp	r5, r7
  405aaa:	4403      	add	r3, r0
  405aac:	d040      	beq.n	405b30 <_free_r+0x15c>
  405aae:	68d0      	ldr	r0, [r2, #12]
  405ab0:	60e8      	str	r0, [r5, #12]
  405ab2:	f043 0201 	orr.w	r2, r3, #1
  405ab6:	6085      	str	r5, [r0, #8]
  405ab8:	6062      	str	r2, [r4, #4]
  405aba:	50e3      	str	r3, [r4, r3]
  405abc:	e7b7      	b.n	405a2e <_free_r+0x5a>
  405abe:	07ff      	lsls	r7, r7, #31
  405ac0:	4403      	add	r3, r0
  405ac2:	d407      	bmi.n	405ad4 <_free_r+0x100>
  405ac4:	f855 2c08 	ldr.w	r2, [r5, #-8]
  405ac8:	1aa4      	subs	r4, r4, r2
  405aca:	4413      	add	r3, r2
  405acc:	68a0      	ldr	r0, [r4, #8]
  405ace:	68e2      	ldr	r2, [r4, #12]
  405ad0:	60c2      	str	r2, [r0, #12]
  405ad2:	6090      	str	r0, [r2, #8]
  405ad4:	4a30      	ldr	r2, [pc, #192]	; (405b98 <_free_r+0x1c4>)
  405ad6:	6812      	ldr	r2, [r2, #0]
  405ad8:	f043 0001 	orr.w	r0, r3, #1
  405adc:	4293      	cmp	r3, r2
  405ade:	6060      	str	r0, [r4, #4]
  405ae0:	608c      	str	r4, [r1, #8]
  405ae2:	d3b9      	bcc.n	405a58 <_free_r+0x84>
  405ae4:	4b2d      	ldr	r3, [pc, #180]	; (405b9c <_free_r+0x1c8>)
  405ae6:	4640      	mov	r0, r8
  405ae8:	6819      	ldr	r1, [r3, #0]
  405aea:	f7ff ff23 	bl	405934 <_malloc_trim_r>
  405aee:	e7b3      	b.n	405a58 <_free_r+0x84>
  405af0:	4610      	mov	r0, r2
  405af2:	e7cd      	b.n	405a90 <_free_r+0xbc>
  405af4:	1811      	adds	r1, r2, r0
  405af6:	6849      	ldr	r1, [r1, #4]
  405af8:	07c9      	lsls	r1, r1, #31
  405afa:	d444      	bmi.n	405b86 <_free_r+0x1b2>
  405afc:	6891      	ldr	r1, [r2, #8]
  405afe:	68d2      	ldr	r2, [r2, #12]
  405b00:	60ca      	str	r2, [r1, #12]
  405b02:	4403      	add	r3, r0
  405b04:	f043 0001 	orr.w	r0, r3, #1
  405b08:	6091      	str	r1, [r2, #8]
  405b0a:	6060      	str	r0, [r4, #4]
  405b0c:	50e3      	str	r3, [r4, r3]
  405b0e:	e7a3      	b.n	405a58 <_free_r+0x84>
  405b10:	2a14      	cmp	r2, #20
  405b12:	d816      	bhi.n	405b42 <_free_r+0x16e>
  405b14:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405b18:	00ff      	lsls	r7, r7, #3
  405b1a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  405b1e:	e7aa      	b.n	405a76 <_free_r+0xa2>
  405b20:	10aa      	asrs	r2, r5, #2
  405b22:	2301      	movs	r3, #1
  405b24:	684d      	ldr	r5, [r1, #4]
  405b26:	4093      	lsls	r3, r2
  405b28:	432b      	orrs	r3, r5
  405b2a:	604b      	str	r3, [r1, #4]
  405b2c:	4603      	mov	r3, r0
  405b2e:	e7b0      	b.n	405a92 <_free_r+0xbe>
  405b30:	f043 0201 	orr.w	r2, r3, #1
  405b34:	614c      	str	r4, [r1, #20]
  405b36:	610c      	str	r4, [r1, #16]
  405b38:	60e5      	str	r5, [r4, #12]
  405b3a:	60a5      	str	r5, [r4, #8]
  405b3c:	6062      	str	r2, [r4, #4]
  405b3e:	50e3      	str	r3, [r4, r3]
  405b40:	e78a      	b.n	405a58 <_free_r+0x84>
  405b42:	2a54      	cmp	r2, #84	; 0x54
  405b44:	d806      	bhi.n	405b54 <_free_r+0x180>
  405b46:	0b1a      	lsrs	r2, r3, #12
  405b48:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  405b4c:	00ff      	lsls	r7, r7, #3
  405b4e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  405b52:	e790      	b.n	405a76 <_free_r+0xa2>
  405b54:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405b58:	d806      	bhi.n	405b68 <_free_r+0x194>
  405b5a:	0bda      	lsrs	r2, r3, #15
  405b5c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  405b60:	00ff      	lsls	r7, r7, #3
  405b62:	f102 0577 	add.w	r5, r2, #119	; 0x77
  405b66:	e786      	b.n	405a76 <_free_r+0xa2>
  405b68:	f240 5054 	movw	r0, #1364	; 0x554
  405b6c:	4282      	cmp	r2, r0
  405b6e:	d806      	bhi.n	405b7e <_free_r+0x1aa>
  405b70:	0c9a      	lsrs	r2, r3, #18
  405b72:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  405b76:	00ff      	lsls	r7, r7, #3
  405b78:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  405b7c:	e77b      	b.n	405a76 <_free_r+0xa2>
  405b7e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  405b82:	257e      	movs	r5, #126	; 0x7e
  405b84:	e777      	b.n	405a76 <_free_r+0xa2>
  405b86:	f043 0101 	orr.w	r1, r3, #1
  405b8a:	6061      	str	r1, [r4, #4]
  405b8c:	6013      	str	r3, [r2, #0]
  405b8e:	e763      	b.n	405a58 <_free_r+0x84>
  405b90:	20400440 	.word	0x20400440
  405b94:	20400448 	.word	0x20400448
  405b98:	2040084c 	.word	0x2040084c
  405b9c:	20400bc4 	.word	0x20400bc4

00405ba0 <__sfvwrite_r>:
  405ba0:	6893      	ldr	r3, [r2, #8]
  405ba2:	2b00      	cmp	r3, #0
  405ba4:	d073      	beq.n	405c8e <__sfvwrite_r+0xee>
  405ba6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405baa:	898b      	ldrh	r3, [r1, #12]
  405bac:	b083      	sub	sp, #12
  405bae:	460c      	mov	r4, r1
  405bb0:	0719      	lsls	r1, r3, #28
  405bb2:	9000      	str	r0, [sp, #0]
  405bb4:	4616      	mov	r6, r2
  405bb6:	d526      	bpl.n	405c06 <__sfvwrite_r+0x66>
  405bb8:	6922      	ldr	r2, [r4, #16]
  405bba:	b322      	cbz	r2, 405c06 <__sfvwrite_r+0x66>
  405bbc:	f013 0002 	ands.w	r0, r3, #2
  405bc0:	6835      	ldr	r5, [r6, #0]
  405bc2:	d02c      	beq.n	405c1e <__sfvwrite_r+0x7e>
  405bc4:	f04f 0900 	mov.w	r9, #0
  405bc8:	4fb0      	ldr	r7, [pc, #704]	; (405e8c <__sfvwrite_r+0x2ec>)
  405bca:	46c8      	mov	r8, r9
  405bcc:	46b2      	mov	sl, r6
  405bce:	45b8      	cmp	r8, r7
  405bd0:	4643      	mov	r3, r8
  405bd2:	464a      	mov	r2, r9
  405bd4:	bf28      	it	cs
  405bd6:	463b      	movcs	r3, r7
  405bd8:	9800      	ldr	r0, [sp, #0]
  405bda:	f1b8 0f00 	cmp.w	r8, #0
  405bde:	d050      	beq.n	405c82 <__sfvwrite_r+0xe2>
  405be0:	69e1      	ldr	r1, [r4, #28]
  405be2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405be4:	47b0      	blx	r6
  405be6:	2800      	cmp	r0, #0
  405be8:	dd58      	ble.n	405c9c <__sfvwrite_r+0xfc>
  405bea:	f8da 3008 	ldr.w	r3, [sl, #8]
  405bee:	1a1b      	subs	r3, r3, r0
  405bf0:	4481      	add	r9, r0
  405bf2:	eba8 0800 	sub.w	r8, r8, r0
  405bf6:	f8ca 3008 	str.w	r3, [sl, #8]
  405bfa:	2b00      	cmp	r3, #0
  405bfc:	d1e7      	bne.n	405bce <__sfvwrite_r+0x2e>
  405bfe:	2000      	movs	r0, #0
  405c00:	b003      	add	sp, #12
  405c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405c06:	4621      	mov	r1, r4
  405c08:	9800      	ldr	r0, [sp, #0]
  405c0a:	f7ff fc51 	bl	4054b0 <__swsetup_r>
  405c0e:	2800      	cmp	r0, #0
  405c10:	f040 8133 	bne.w	405e7a <__sfvwrite_r+0x2da>
  405c14:	89a3      	ldrh	r3, [r4, #12]
  405c16:	6835      	ldr	r5, [r6, #0]
  405c18:	f013 0002 	ands.w	r0, r3, #2
  405c1c:	d1d2      	bne.n	405bc4 <__sfvwrite_r+0x24>
  405c1e:	f013 0901 	ands.w	r9, r3, #1
  405c22:	d145      	bne.n	405cb0 <__sfvwrite_r+0x110>
  405c24:	464f      	mov	r7, r9
  405c26:	9601      	str	r6, [sp, #4]
  405c28:	b337      	cbz	r7, 405c78 <__sfvwrite_r+0xd8>
  405c2a:	059a      	lsls	r2, r3, #22
  405c2c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  405c30:	f140 8083 	bpl.w	405d3a <__sfvwrite_r+0x19a>
  405c34:	4547      	cmp	r7, r8
  405c36:	46c3      	mov	fp, r8
  405c38:	f0c0 80ab 	bcc.w	405d92 <__sfvwrite_r+0x1f2>
  405c3c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  405c40:	f040 80ac 	bne.w	405d9c <__sfvwrite_r+0x1fc>
  405c44:	6820      	ldr	r0, [r4, #0]
  405c46:	46ba      	mov	sl, r7
  405c48:	465a      	mov	r2, fp
  405c4a:	4649      	mov	r1, r9
  405c4c:	f000 fa40 	bl	4060d0 <memmove>
  405c50:	68a2      	ldr	r2, [r4, #8]
  405c52:	6823      	ldr	r3, [r4, #0]
  405c54:	eba2 0208 	sub.w	r2, r2, r8
  405c58:	445b      	add	r3, fp
  405c5a:	60a2      	str	r2, [r4, #8]
  405c5c:	6023      	str	r3, [r4, #0]
  405c5e:	9a01      	ldr	r2, [sp, #4]
  405c60:	6893      	ldr	r3, [r2, #8]
  405c62:	eba3 030a 	sub.w	r3, r3, sl
  405c66:	44d1      	add	r9, sl
  405c68:	eba7 070a 	sub.w	r7, r7, sl
  405c6c:	6093      	str	r3, [r2, #8]
  405c6e:	2b00      	cmp	r3, #0
  405c70:	d0c5      	beq.n	405bfe <__sfvwrite_r+0x5e>
  405c72:	89a3      	ldrh	r3, [r4, #12]
  405c74:	2f00      	cmp	r7, #0
  405c76:	d1d8      	bne.n	405c2a <__sfvwrite_r+0x8a>
  405c78:	f8d5 9000 	ldr.w	r9, [r5]
  405c7c:	686f      	ldr	r7, [r5, #4]
  405c7e:	3508      	adds	r5, #8
  405c80:	e7d2      	b.n	405c28 <__sfvwrite_r+0x88>
  405c82:	f8d5 9000 	ldr.w	r9, [r5]
  405c86:	f8d5 8004 	ldr.w	r8, [r5, #4]
  405c8a:	3508      	adds	r5, #8
  405c8c:	e79f      	b.n	405bce <__sfvwrite_r+0x2e>
  405c8e:	2000      	movs	r0, #0
  405c90:	4770      	bx	lr
  405c92:	4621      	mov	r1, r4
  405c94:	9800      	ldr	r0, [sp, #0]
  405c96:	f7ff fd1f 	bl	4056d8 <_fflush_r>
  405c9a:	b370      	cbz	r0, 405cfa <__sfvwrite_r+0x15a>
  405c9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405ca4:	f04f 30ff 	mov.w	r0, #4294967295
  405ca8:	81a3      	strh	r3, [r4, #12]
  405caa:	b003      	add	sp, #12
  405cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405cb0:	4681      	mov	r9, r0
  405cb2:	4633      	mov	r3, r6
  405cb4:	464e      	mov	r6, r9
  405cb6:	46a8      	mov	r8, r5
  405cb8:	469a      	mov	sl, r3
  405cba:	464d      	mov	r5, r9
  405cbc:	b34e      	cbz	r6, 405d12 <__sfvwrite_r+0x172>
  405cbe:	b380      	cbz	r0, 405d22 <__sfvwrite_r+0x182>
  405cc0:	6820      	ldr	r0, [r4, #0]
  405cc2:	6923      	ldr	r3, [r4, #16]
  405cc4:	6962      	ldr	r2, [r4, #20]
  405cc6:	45b1      	cmp	r9, r6
  405cc8:	46cb      	mov	fp, r9
  405cca:	bf28      	it	cs
  405ccc:	46b3      	movcs	fp, r6
  405cce:	4298      	cmp	r0, r3
  405cd0:	465f      	mov	r7, fp
  405cd2:	d904      	bls.n	405cde <__sfvwrite_r+0x13e>
  405cd4:	68a3      	ldr	r3, [r4, #8]
  405cd6:	4413      	add	r3, r2
  405cd8:	459b      	cmp	fp, r3
  405cda:	f300 80a6 	bgt.w	405e2a <__sfvwrite_r+0x28a>
  405cde:	4593      	cmp	fp, r2
  405ce0:	db4b      	blt.n	405d7a <__sfvwrite_r+0x1da>
  405ce2:	4613      	mov	r3, r2
  405ce4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  405ce6:	69e1      	ldr	r1, [r4, #28]
  405ce8:	9800      	ldr	r0, [sp, #0]
  405cea:	462a      	mov	r2, r5
  405cec:	47b8      	blx	r7
  405cee:	1e07      	subs	r7, r0, #0
  405cf0:	ddd4      	ble.n	405c9c <__sfvwrite_r+0xfc>
  405cf2:	ebb9 0907 	subs.w	r9, r9, r7
  405cf6:	d0cc      	beq.n	405c92 <__sfvwrite_r+0xf2>
  405cf8:	2001      	movs	r0, #1
  405cfa:	f8da 3008 	ldr.w	r3, [sl, #8]
  405cfe:	1bdb      	subs	r3, r3, r7
  405d00:	443d      	add	r5, r7
  405d02:	1bf6      	subs	r6, r6, r7
  405d04:	f8ca 3008 	str.w	r3, [sl, #8]
  405d08:	2b00      	cmp	r3, #0
  405d0a:	f43f af78 	beq.w	405bfe <__sfvwrite_r+0x5e>
  405d0e:	2e00      	cmp	r6, #0
  405d10:	d1d5      	bne.n	405cbe <__sfvwrite_r+0x11e>
  405d12:	f108 0308 	add.w	r3, r8, #8
  405d16:	e913 0060 	ldmdb	r3, {r5, r6}
  405d1a:	4698      	mov	r8, r3
  405d1c:	3308      	adds	r3, #8
  405d1e:	2e00      	cmp	r6, #0
  405d20:	d0f9      	beq.n	405d16 <__sfvwrite_r+0x176>
  405d22:	4632      	mov	r2, r6
  405d24:	210a      	movs	r1, #10
  405d26:	4628      	mov	r0, r5
  405d28:	f000 f982 	bl	406030 <memchr>
  405d2c:	2800      	cmp	r0, #0
  405d2e:	f000 80a1 	beq.w	405e74 <__sfvwrite_r+0x2d4>
  405d32:	3001      	adds	r0, #1
  405d34:	eba0 0905 	sub.w	r9, r0, r5
  405d38:	e7c2      	b.n	405cc0 <__sfvwrite_r+0x120>
  405d3a:	6820      	ldr	r0, [r4, #0]
  405d3c:	6923      	ldr	r3, [r4, #16]
  405d3e:	4298      	cmp	r0, r3
  405d40:	d802      	bhi.n	405d48 <__sfvwrite_r+0x1a8>
  405d42:	6963      	ldr	r3, [r4, #20]
  405d44:	429f      	cmp	r7, r3
  405d46:	d25d      	bcs.n	405e04 <__sfvwrite_r+0x264>
  405d48:	45b8      	cmp	r8, r7
  405d4a:	bf28      	it	cs
  405d4c:	46b8      	movcs	r8, r7
  405d4e:	4642      	mov	r2, r8
  405d50:	4649      	mov	r1, r9
  405d52:	f000 f9bd 	bl	4060d0 <memmove>
  405d56:	68a3      	ldr	r3, [r4, #8]
  405d58:	6822      	ldr	r2, [r4, #0]
  405d5a:	eba3 0308 	sub.w	r3, r3, r8
  405d5e:	4442      	add	r2, r8
  405d60:	60a3      	str	r3, [r4, #8]
  405d62:	6022      	str	r2, [r4, #0]
  405d64:	b10b      	cbz	r3, 405d6a <__sfvwrite_r+0x1ca>
  405d66:	46c2      	mov	sl, r8
  405d68:	e779      	b.n	405c5e <__sfvwrite_r+0xbe>
  405d6a:	4621      	mov	r1, r4
  405d6c:	9800      	ldr	r0, [sp, #0]
  405d6e:	f7ff fcb3 	bl	4056d8 <_fflush_r>
  405d72:	2800      	cmp	r0, #0
  405d74:	d192      	bne.n	405c9c <__sfvwrite_r+0xfc>
  405d76:	46c2      	mov	sl, r8
  405d78:	e771      	b.n	405c5e <__sfvwrite_r+0xbe>
  405d7a:	465a      	mov	r2, fp
  405d7c:	4629      	mov	r1, r5
  405d7e:	f000 f9a7 	bl	4060d0 <memmove>
  405d82:	68a2      	ldr	r2, [r4, #8]
  405d84:	6823      	ldr	r3, [r4, #0]
  405d86:	eba2 020b 	sub.w	r2, r2, fp
  405d8a:	445b      	add	r3, fp
  405d8c:	60a2      	str	r2, [r4, #8]
  405d8e:	6023      	str	r3, [r4, #0]
  405d90:	e7af      	b.n	405cf2 <__sfvwrite_r+0x152>
  405d92:	6820      	ldr	r0, [r4, #0]
  405d94:	46b8      	mov	r8, r7
  405d96:	46ba      	mov	sl, r7
  405d98:	46bb      	mov	fp, r7
  405d9a:	e755      	b.n	405c48 <__sfvwrite_r+0xa8>
  405d9c:	6962      	ldr	r2, [r4, #20]
  405d9e:	6820      	ldr	r0, [r4, #0]
  405da0:	6921      	ldr	r1, [r4, #16]
  405da2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  405da6:	eba0 0a01 	sub.w	sl, r0, r1
  405daa:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  405dae:	f10a 0001 	add.w	r0, sl, #1
  405db2:	ea4f 0868 	mov.w	r8, r8, asr #1
  405db6:	4438      	add	r0, r7
  405db8:	4540      	cmp	r0, r8
  405dba:	4642      	mov	r2, r8
  405dbc:	bf84      	itt	hi
  405dbe:	4680      	movhi	r8, r0
  405dc0:	4642      	movhi	r2, r8
  405dc2:	055b      	lsls	r3, r3, #21
  405dc4:	d544      	bpl.n	405e50 <__sfvwrite_r+0x2b0>
  405dc6:	4611      	mov	r1, r2
  405dc8:	9800      	ldr	r0, [sp, #0]
  405dca:	f7fd ff9b 	bl	403d04 <_malloc_r>
  405dce:	4683      	mov	fp, r0
  405dd0:	2800      	cmp	r0, #0
  405dd2:	d055      	beq.n	405e80 <__sfvwrite_r+0x2e0>
  405dd4:	4652      	mov	r2, sl
  405dd6:	6921      	ldr	r1, [r4, #16]
  405dd8:	f7fe fa44 	bl	404264 <memcpy>
  405ddc:	89a3      	ldrh	r3, [r4, #12]
  405dde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  405de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405de6:	81a3      	strh	r3, [r4, #12]
  405de8:	eb0b 000a 	add.w	r0, fp, sl
  405dec:	eba8 030a 	sub.w	r3, r8, sl
  405df0:	f8c4 b010 	str.w	fp, [r4, #16]
  405df4:	f8c4 8014 	str.w	r8, [r4, #20]
  405df8:	6020      	str	r0, [r4, #0]
  405dfa:	60a3      	str	r3, [r4, #8]
  405dfc:	46b8      	mov	r8, r7
  405dfe:	46ba      	mov	sl, r7
  405e00:	46bb      	mov	fp, r7
  405e02:	e721      	b.n	405c48 <__sfvwrite_r+0xa8>
  405e04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  405e08:	42b9      	cmp	r1, r7
  405e0a:	bf28      	it	cs
  405e0c:	4639      	movcs	r1, r7
  405e0e:	464a      	mov	r2, r9
  405e10:	fb91 f1f3 	sdiv	r1, r1, r3
  405e14:	9800      	ldr	r0, [sp, #0]
  405e16:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405e18:	fb03 f301 	mul.w	r3, r3, r1
  405e1c:	69e1      	ldr	r1, [r4, #28]
  405e1e:	47b0      	blx	r6
  405e20:	f1b0 0a00 	subs.w	sl, r0, #0
  405e24:	f73f af1b 	bgt.w	405c5e <__sfvwrite_r+0xbe>
  405e28:	e738      	b.n	405c9c <__sfvwrite_r+0xfc>
  405e2a:	461a      	mov	r2, r3
  405e2c:	4629      	mov	r1, r5
  405e2e:	9301      	str	r3, [sp, #4]
  405e30:	f000 f94e 	bl	4060d0 <memmove>
  405e34:	6822      	ldr	r2, [r4, #0]
  405e36:	9b01      	ldr	r3, [sp, #4]
  405e38:	9800      	ldr	r0, [sp, #0]
  405e3a:	441a      	add	r2, r3
  405e3c:	6022      	str	r2, [r4, #0]
  405e3e:	4621      	mov	r1, r4
  405e40:	f7ff fc4a 	bl	4056d8 <_fflush_r>
  405e44:	9b01      	ldr	r3, [sp, #4]
  405e46:	2800      	cmp	r0, #0
  405e48:	f47f af28 	bne.w	405c9c <__sfvwrite_r+0xfc>
  405e4c:	461f      	mov	r7, r3
  405e4e:	e750      	b.n	405cf2 <__sfvwrite_r+0x152>
  405e50:	9800      	ldr	r0, [sp, #0]
  405e52:	f000 f9a1 	bl	406198 <_realloc_r>
  405e56:	4683      	mov	fp, r0
  405e58:	2800      	cmp	r0, #0
  405e5a:	d1c5      	bne.n	405de8 <__sfvwrite_r+0x248>
  405e5c:	9d00      	ldr	r5, [sp, #0]
  405e5e:	6921      	ldr	r1, [r4, #16]
  405e60:	4628      	mov	r0, r5
  405e62:	f7ff fdb7 	bl	4059d4 <_free_r>
  405e66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405e6a:	220c      	movs	r2, #12
  405e6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  405e70:	602a      	str	r2, [r5, #0]
  405e72:	e715      	b.n	405ca0 <__sfvwrite_r+0x100>
  405e74:	f106 0901 	add.w	r9, r6, #1
  405e78:	e722      	b.n	405cc0 <__sfvwrite_r+0x120>
  405e7a:	f04f 30ff 	mov.w	r0, #4294967295
  405e7e:	e6bf      	b.n	405c00 <__sfvwrite_r+0x60>
  405e80:	9a00      	ldr	r2, [sp, #0]
  405e82:	230c      	movs	r3, #12
  405e84:	6013      	str	r3, [r2, #0]
  405e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405e8a:	e709      	b.n	405ca0 <__sfvwrite_r+0x100>
  405e8c:	7ffffc00 	.word	0x7ffffc00

00405e90 <_fwalk_reent>:
  405e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405e94:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  405e98:	d01f      	beq.n	405eda <_fwalk_reent+0x4a>
  405e9a:	4688      	mov	r8, r1
  405e9c:	4606      	mov	r6, r0
  405e9e:	f04f 0900 	mov.w	r9, #0
  405ea2:	687d      	ldr	r5, [r7, #4]
  405ea4:	68bc      	ldr	r4, [r7, #8]
  405ea6:	3d01      	subs	r5, #1
  405ea8:	d411      	bmi.n	405ece <_fwalk_reent+0x3e>
  405eaa:	89a3      	ldrh	r3, [r4, #12]
  405eac:	2b01      	cmp	r3, #1
  405eae:	f105 35ff 	add.w	r5, r5, #4294967295
  405eb2:	d908      	bls.n	405ec6 <_fwalk_reent+0x36>
  405eb4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  405eb8:	3301      	adds	r3, #1
  405eba:	4621      	mov	r1, r4
  405ebc:	4630      	mov	r0, r6
  405ebe:	d002      	beq.n	405ec6 <_fwalk_reent+0x36>
  405ec0:	47c0      	blx	r8
  405ec2:	ea49 0900 	orr.w	r9, r9, r0
  405ec6:	1c6b      	adds	r3, r5, #1
  405ec8:	f104 0468 	add.w	r4, r4, #104	; 0x68
  405ecc:	d1ed      	bne.n	405eaa <_fwalk_reent+0x1a>
  405ece:	683f      	ldr	r7, [r7, #0]
  405ed0:	2f00      	cmp	r7, #0
  405ed2:	d1e6      	bne.n	405ea2 <_fwalk_reent+0x12>
  405ed4:	4648      	mov	r0, r9
  405ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405eda:	46b9      	mov	r9, r7
  405edc:	4648      	mov	r0, r9
  405ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405ee2:	bf00      	nop

00405ee4 <__locale_mb_cur_max>:
  405ee4:	4b04      	ldr	r3, [pc, #16]	; (405ef8 <__locale_mb_cur_max+0x14>)
  405ee6:	4a05      	ldr	r2, [pc, #20]	; (405efc <__locale_mb_cur_max+0x18>)
  405ee8:	681b      	ldr	r3, [r3, #0]
  405eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  405eec:	2b00      	cmp	r3, #0
  405eee:	bf08      	it	eq
  405ef0:	4613      	moveq	r3, r2
  405ef2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  405ef6:	4770      	bx	lr
  405ef8:	20400010 	.word	0x20400010
  405efc:	20400854 	.word	0x20400854

00405f00 <__retarget_lock_init_recursive>:
  405f00:	4770      	bx	lr
  405f02:	bf00      	nop

00405f04 <__retarget_lock_close_recursive>:
  405f04:	4770      	bx	lr
  405f06:	bf00      	nop

00405f08 <__retarget_lock_acquire_recursive>:
  405f08:	4770      	bx	lr
  405f0a:	bf00      	nop

00405f0c <__retarget_lock_release_recursive>:
  405f0c:	4770      	bx	lr
  405f0e:	bf00      	nop

00405f10 <__swhatbuf_r>:
  405f10:	b570      	push	{r4, r5, r6, lr}
  405f12:	460c      	mov	r4, r1
  405f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405f18:	2900      	cmp	r1, #0
  405f1a:	b090      	sub	sp, #64	; 0x40
  405f1c:	4615      	mov	r5, r2
  405f1e:	461e      	mov	r6, r3
  405f20:	db14      	blt.n	405f4c <__swhatbuf_r+0x3c>
  405f22:	aa01      	add	r2, sp, #4
  405f24:	f000 fc9e 	bl	406864 <_fstat_r>
  405f28:	2800      	cmp	r0, #0
  405f2a:	db0f      	blt.n	405f4c <__swhatbuf_r+0x3c>
  405f2c:	9a02      	ldr	r2, [sp, #8]
  405f2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  405f32:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  405f36:	fab2 f282 	clz	r2, r2
  405f3a:	0952      	lsrs	r2, r2, #5
  405f3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405f40:	f44f 6000 	mov.w	r0, #2048	; 0x800
  405f44:	6032      	str	r2, [r6, #0]
  405f46:	602b      	str	r3, [r5, #0]
  405f48:	b010      	add	sp, #64	; 0x40
  405f4a:	bd70      	pop	{r4, r5, r6, pc}
  405f4c:	89a2      	ldrh	r2, [r4, #12]
  405f4e:	2300      	movs	r3, #0
  405f50:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  405f54:	6033      	str	r3, [r6, #0]
  405f56:	d004      	beq.n	405f62 <__swhatbuf_r+0x52>
  405f58:	2240      	movs	r2, #64	; 0x40
  405f5a:	4618      	mov	r0, r3
  405f5c:	602a      	str	r2, [r5, #0]
  405f5e:	b010      	add	sp, #64	; 0x40
  405f60:	bd70      	pop	{r4, r5, r6, pc}
  405f62:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405f66:	602b      	str	r3, [r5, #0]
  405f68:	b010      	add	sp, #64	; 0x40
  405f6a:	bd70      	pop	{r4, r5, r6, pc}

00405f6c <__smakebuf_r>:
  405f6c:	898a      	ldrh	r2, [r1, #12]
  405f6e:	0792      	lsls	r2, r2, #30
  405f70:	460b      	mov	r3, r1
  405f72:	d506      	bpl.n	405f82 <__smakebuf_r+0x16>
  405f74:	f101 0243 	add.w	r2, r1, #67	; 0x43
  405f78:	2101      	movs	r1, #1
  405f7a:	601a      	str	r2, [r3, #0]
  405f7c:	611a      	str	r2, [r3, #16]
  405f7e:	6159      	str	r1, [r3, #20]
  405f80:	4770      	bx	lr
  405f82:	b5f0      	push	{r4, r5, r6, r7, lr}
  405f84:	b083      	sub	sp, #12
  405f86:	ab01      	add	r3, sp, #4
  405f88:	466a      	mov	r2, sp
  405f8a:	460c      	mov	r4, r1
  405f8c:	4606      	mov	r6, r0
  405f8e:	f7ff ffbf 	bl	405f10 <__swhatbuf_r>
  405f92:	9900      	ldr	r1, [sp, #0]
  405f94:	4605      	mov	r5, r0
  405f96:	4630      	mov	r0, r6
  405f98:	f7fd feb4 	bl	403d04 <_malloc_r>
  405f9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405fa0:	b1d8      	cbz	r0, 405fda <__smakebuf_r+0x6e>
  405fa2:	9a01      	ldr	r2, [sp, #4]
  405fa4:	4f15      	ldr	r7, [pc, #84]	; (405ffc <__smakebuf_r+0x90>)
  405fa6:	9900      	ldr	r1, [sp, #0]
  405fa8:	63f7      	str	r7, [r6, #60]	; 0x3c
  405faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405fae:	81a3      	strh	r3, [r4, #12]
  405fb0:	6020      	str	r0, [r4, #0]
  405fb2:	6120      	str	r0, [r4, #16]
  405fb4:	6161      	str	r1, [r4, #20]
  405fb6:	b91a      	cbnz	r2, 405fc0 <__smakebuf_r+0x54>
  405fb8:	432b      	orrs	r3, r5
  405fba:	81a3      	strh	r3, [r4, #12]
  405fbc:	b003      	add	sp, #12
  405fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405fc0:	4630      	mov	r0, r6
  405fc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405fc6:	f000 fc61 	bl	40688c <_isatty_r>
  405fca:	b1a0      	cbz	r0, 405ff6 <__smakebuf_r+0x8a>
  405fcc:	89a3      	ldrh	r3, [r4, #12]
  405fce:	f023 0303 	bic.w	r3, r3, #3
  405fd2:	f043 0301 	orr.w	r3, r3, #1
  405fd6:	b21b      	sxth	r3, r3
  405fd8:	e7ee      	b.n	405fb8 <__smakebuf_r+0x4c>
  405fda:	059a      	lsls	r2, r3, #22
  405fdc:	d4ee      	bmi.n	405fbc <__smakebuf_r+0x50>
  405fde:	f023 0303 	bic.w	r3, r3, #3
  405fe2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  405fe6:	f043 0302 	orr.w	r3, r3, #2
  405fea:	2101      	movs	r1, #1
  405fec:	81a3      	strh	r3, [r4, #12]
  405fee:	6022      	str	r2, [r4, #0]
  405ff0:	6122      	str	r2, [r4, #16]
  405ff2:	6161      	str	r1, [r4, #20]
  405ff4:	e7e2      	b.n	405fbc <__smakebuf_r+0x50>
  405ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405ffa:	e7dd      	b.n	405fb8 <__smakebuf_r+0x4c>
  405ffc:	0040572d 	.word	0x0040572d

00406000 <__ascii_mbtowc>:
  406000:	b082      	sub	sp, #8
  406002:	b149      	cbz	r1, 406018 <__ascii_mbtowc+0x18>
  406004:	b15a      	cbz	r2, 40601e <__ascii_mbtowc+0x1e>
  406006:	b16b      	cbz	r3, 406024 <__ascii_mbtowc+0x24>
  406008:	7813      	ldrb	r3, [r2, #0]
  40600a:	600b      	str	r3, [r1, #0]
  40600c:	7812      	ldrb	r2, [r2, #0]
  40600e:	1c10      	adds	r0, r2, #0
  406010:	bf18      	it	ne
  406012:	2001      	movne	r0, #1
  406014:	b002      	add	sp, #8
  406016:	4770      	bx	lr
  406018:	a901      	add	r1, sp, #4
  40601a:	2a00      	cmp	r2, #0
  40601c:	d1f3      	bne.n	406006 <__ascii_mbtowc+0x6>
  40601e:	4610      	mov	r0, r2
  406020:	b002      	add	sp, #8
  406022:	4770      	bx	lr
  406024:	f06f 0001 	mvn.w	r0, #1
  406028:	e7f4      	b.n	406014 <__ascii_mbtowc+0x14>
  40602a:	bf00      	nop
  40602c:	0000      	movs	r0, r0
	...

00406030 <memchr>:
  406030:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406034:	2a10      	cmp	r2, #16
  406036:	db2b      	blt.n	406090 <memchr+0x60>
  406038:	f010 0f07 	tst.w	r0, #7
  40603c:	d008      	beq.n	406050 <memchr+0x20>
  40603e:	f810 3b01 	ldrb.w	r3, [r0], #1
  406042:	3a01      	subs	r2, #1
  406044:	428b      	cmp	r3, r1
  406046:	d02d      	beq.n	4060a4 <memchr+0x74>
  406048:	f010 0f07 	tst.w	r0, #7
  40604c:	b342      	cbz	r2, 4060a0 <memchr+0x70>
  40604e:	d1f6      	bne.n	40603e <memchr+0xe>
  406050:	b4f0      	push	{r4, r5, r6, r7}
  406052:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406056:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40605a:	f022 0407 	bic.w	r4, r2, #7
  40605e:	f07f 0700 	mvns.w	r7, #0
  406062:	2300      	movs	r3, #0
  406064:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406068:	3c08      	subs	r4, #8
  40606a:	ea85 0501 	eor.w	r5, r5, r1
  40606e:	ea86 0601 	eor.w	r6, r6, r1
  406072:	fa85 f547 	uadd8	r5, r5, r7
  406076:	faa3 f587 	sel	r5, r3, r7
  40607a:	fa86 f647 	uadd8	r6, r6, r7
  40607e:	faa5 f687 	sel	r6, r5, r7
  406082:	b98e      	cbnz	r6, 4060a8 <memchr+0x78>
  406084:	d1ee      	bne.n	406064 <memchr+0x34>
  406086:	bcf0      	pop	{r4, r5, r6, r7}
  406088:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40608c:	f002 0207 	and.w	r2, r2, #7
  406090:	b132      	cbz	r2, 4060a0 <memchr+0x70>
  406092:	f810 3b01 	ldrb.w	r3, [r0], #1
  406096:	3a01      	subs	r2, #1
  406098:	ea83 0301 	eor.w	r3, r3, r1
  40609c:	b113      	cbz	r3, 4060a4 <memchr+0x74>
  40609e:	d1f8      	bne.n	406092 <memchr+0x62>
  4060a0:	2000      	movs	r0, #0
  4060a2:	4770      	bx	lr
  4060a4:	3801      	subs	r0, #1
  4060a6:	4770      	bx	lr
  4060a8:	2d00      	cmp	r5, #0
  4060aa:	bf06      	itte	eq
  4060ac:	4635      	moveq	r5, r6
  4060ae:	3803      	subeq	r0, #3
  4060b0:	3807      	subne	r0, #7
  4060b2:	f015 0f01 	tst.w	r5, #1
  4060b6:	d107      	bne.n	4060c8 <memchr+0x98>
  4060b8:	3001      	adds	r0, #1
  4060ba:	f415 7f80 	tst.w	r5, #256	; 0x100
  4060be:	bf02      	ittt	eq
  4060c0:	3001      	addeq	r0, #1
  4060c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4060c6:	3001      	addeq	r0, #1
  4060c8:	bcf0      	pop	{r4, r5, r6, r7}
  4060ca:	3801      	subs	r0, #1
  4060cc:	4770      	bx	lr
  4060ce:	bf00      	nop

004060d0 <memmove>:
  4060d0:	4288      	cmp	r0, r1
  4060d2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4060d4:	d90d      	bls.n	4060f2 <memmove+0x22>
  4060d6:	188b      	adds	r3, r1, r2
  4060d8:	4298      	cmp	r0, r3
  4060da:	d20a      	bcs.n	4060f2 <memmove+0x22>
  4060dc:	1884      	adds	r4, r0, r2
  4060de:	2a00      	cmp	r2, #0
  4060e0:	d051      	beq.n	406186 <memmove+0xb6>
  4060e2:	4622      	mov	r2, r4
  4060e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4060e8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4060ec:	4299      	cmp	r1, r3
  4060ee:	d1f9      	bne.n	4060e4 <memmove+0x14>
  4060f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4060f2:	2a0f      	cmp	r2, #15
  4060f4:	d948      	bls.n	406188 <memmove+0xb8>
  4060f6:	ea41 0300 	orr.w	r3, r1, r0
  4060fa:	079b      	lsls	r3, r3, #30
  4060fc:	d146      	bne.n	40618c <memmove+0xbc>
  4060fe:	f100 0410 	add.w	r4, r0, #16
  406102:	f101 0310 	add.w	r3, r1, #16
  406106:	4615      	mov	r5, r2
  406108:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40610c:	f844 6c10 	str.w	r6, [r4, #-16]
  406110:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406114:	f844 6c0c 	str.w	r6, [r4, #-12]
  406118:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40611c:	f844 6c08 	str.w	r6, [r4, #-8]
  406120:	3d10      	subs	r5, #16
  406122:	f853 6c04 	ldr.w	r6, [r3, #-4]
  406126:	f844 6c04 	str.w	r6, [r4, #-4]
  40612a:	2d0f      	cmp	r5, #15
  40612c:	f103 0310 	add.w	r3, r3, #16
  406130:	f104 0410 	add.w	r4, r4, #16
  406134:	d8e8      	bhi.n	406108 <memmove+0x38>
  406136:	f1a2 0310 	sub.w	r3, r2, #16
  40613a:	f023 030f 	bic.w	r3, r3, #15
  40613e:	f002 0e0f 	and.w	lr, r2, #15
  406142:	3310      	adds	r3, #16
  406144:	f1be 0f03 	cmp.w	lr, #3
  406148:	4419      	add	r1, r3
  40614a:	4403      	add	r3, r0
  40614c:	d921      	bls.n	406192 <memmove+0xc2>
  40614e:	1f1e      	subs	r6, r3, #4
  406150:	460d      	mov	r5, r1
  406152:	4674      	mov	r4, lr
  406154:	3c04      	subs	r4, #4
  406156:	f855 7b04 	ldr.w	r7, [r5], #4
  40615a:	f846 7f04 	str.w	r7, [r6, #4]!
  40615e:	2c03      	cmp	r4, #3
  406160:	d8f8      	bhi.n	406154 <memmove+0x84>
  406162:	f1ae 0404 	sub.w	r4, lr, #4
  406166:	f024 0403 	bic.w	r4, r4, #3
  40616a:	3404      	adds	r4, #4
  40616c:	4421      	add	r1, r4
  40616e:	4423      	add	r3, r4
  406170:	f002 0203 	and.w	r2, r2, #3
  406174:	b162      	cbz	r2, 406190 <memmove+0xc0>
  406176:	3b01      	subs	r3, #1
  406178:	440a      	add	r2, r1
  40617a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40617e:	f803 4f01 	strb.w	r4, [r3, #1]!
  406182:	428a      	cmp	r2, r1
  406184:	d1f9      	bne.n	40617a <memmove+0xaa>
  406186:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406188:	4603      	mov	r3, r0
  40618a:	e7f3      	b.n	406174 <memmove+0xa4>
  40618c:	4603      	mov	r3, r0
  40618e:	e7f2      	b.n	406176 <memmove+0xa6>
  406190:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406192:	4672      	mov	r2, lr
  406194:	e7ee      	b.n	406174 <memmove+0xa4>
  406196:	bf00      	nop

00406198 <_realloc_r>:
  406198:	2900      	cmp	r1, #0
  40619a:	f000 8095 	beq.w	4062c8 <_realloc_r+0x130>
  40619e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4061a2:	460d      	mov	r5, r1
  4061a4:	4616      	mov	r6, r2
  4061a6:	b083      	sub	sp, #12
  4061a8:	4680      	mov	r8, r0
  4061aa:	f106 070b 	add.w	r7, r6, #11
  4061ae:	f7fe f941 	bl	404434 <__malloc_lock>
  4061b2:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4061b6:	2f16      	cmp	r7, #22
  4061b8:	f02e 0403 	bic.w	r4, lr, #3
  4061bc:	f1a5 0908 	sub.w	r9, r5, #8
  4061c0:	d83c      	bhi.n	40623c <_realloc_r+0xa4>
  4061c2:	2210      	movs	r2, #16
  4061c4:	4617      	mov	r7, r2
  4061c6:	42be      	cmp	r6, r7
  4061c8:	d83d      	bhi.n	406246 <_realloc_r+0xae>
  4061ca:	4294      	cmp	r4, r2
  4061cc:	da43      	bge.n	406256 <_realloc_r+0xbe>
  4061ce:	4bc4      	ldr	r3, [pc, #784]	; (4064e0 <_realloc_r+0x348>)
  4061d0:	6899      	ldr	r1, [r3, #8]
  4061d2:	eb09 0004 	add.w	r0, r9, r4
  4061d6:	4288      	cmp	r0, r1
  4061d8:	f000 80b4 	beq.w	406344 <_realloc_r+0x1ac>
  4061dc:	6843      	ldr	r3, [r0, #4]
  4061de:	f023 0101 	bic.w	r1, r3, #1
  4061e2:	4401      	add	r1, r0
  4061e4:	6849      	ldr	r1, [r1, #4]
  4061e6:	07c9      	lsls	r1, r1, #31
  4061e8:	d54c      	bpl.n	406284 <_realloc_r+0xec>
  4061ea:	f01e 0f01 	tst.w	lr, #1
  4061ee:	f000 809b 	beq.w	406328 <_realloc_r+0x190>
  4061f2:	4631      	mov	r1, r6
  4061f4:	4640      	mov	r0, r8
  4061f6:	f7fd fd85 	bl	403d04 <_malloc_r>
  4061fa:	4606      	mov	r6, r0
  4061fc:	2800      	cmp	r0, #0
  4061fe:	d03a      	beq.n	406276 <_realloc_r+0xde>
  406200:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406204:	f023 0301 	bic.w	r3, r3, #1
  406208:	444b      	add	r3, r9
  40620a:	f1a0 0208 	sub.w	r2, r0, #8
  40620e:	429a      	cmp	r2, r3
  406210:	f000 8121 	beq.w	406456 <_realloc_r+0x2be>
  406214:	1f22      	subs	r2, r4, #4
  406216:	2a24      	cmp	r2, #36	; 0x24
  406218:	f200 8107 	bhi.w	40642a <_realloc_r+0x292>
  40621c:	2a13      	cmp	r2, #19
  40621e:	f200 80db 	bhi.w	4063d8 <_realloc_r+0x240>
  406222:	4603      	mov	r3, r0
  406224:	462a      	mov	r2, r5
  406226:	6811      	ldr	r1, [r2, #0]
  406228:	6019      	str	r1, [r3, #0]
  40622a:	6851      	ldr	r1, [r2, #4]
  40622c:	6059      	str	r1, [r3, #4]
  40622e:	6892      	ldr	r2, [r2, #8]
  406230:	609a      	str	r2, [r3, #8]
  406232:	4629      	mov	r1, r5
  406234:	4640      	mov	r0, r8
  406236:	f7ff fbcd 	bl	4059d4 <_free_r>
  40623a:	e01c      	b.n	406276 <_realloc_r+0xde>
  40623c:	f027 0707 	bic.w	r7, r7, #7
  406240:	2f00      	cmp	r7, #0
  406242:	463a      	mov	r2, r7
  406244:	dabf      	bge.n	4061c6 <_realloc_r+0x2e>
  406246:	2600      	movs	r6, #0
  406248:	230c      	movs	r3, #12
  40624a:	4630      	mov	r0, r6
  40624c:	f8c8 3000 	str.w	r3, [r8]
  406250:	b003      	add	sp, #12
  406252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406256:	462e      	mov	r6, r5
  406258:	1be3      	subs	r3, r4, r7
  40625a:	2b0f      	cmp	r3, #15
  40625c:	d81e      	bhi.n	40629c <_realloc_r+0x104>
  40625e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  406262:	f003 0301 	and.w	r3, r3, #1
  406266:	4323      	orrs	r3, r4
  406268:	444c      	add	r4, r9
  40626a:	f8c9 3004 	str.w	r3, [r9, #4]
  40626e:	6863      	ldr	r3, [r4, #4]
  406270:	f043 0301 	orr.w	r3, r3, #1
  406274:	6063      	str	r3, [r4, #4]
  406276:	4640      	mov	r0, r8
  406278:	f7fe f8e2 	bl	404440 <__malloc_unlock>
  40627c:	4630      	mov	r0, r6
  40627e:	b003      	add	sp, #12
  406280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406284:	f023 0303 	bic.w	r3, r3, #3
  406288:	18e1      	adds	r1, r4, r3
  40628a:	4291      	cmp	r1, r2
  40628c:	db1f      	blt.n	4062ce <_realloc_r+0x136>
  40628e:	68c3      	ldr	r3, [r0, #12]
  406290:	6882      	ldr	r2, [r0, #8]
  406292:	462e      	mov	r6, r5
  406294:	60d3      	str	r3, [r2, #12]
  406296:	460c      	mov	r4, r1
  406298:	609a      	str	r2, [r3, #8]
  40629a:	e7dd      	b.n	406258 <_realloc_r+0xc0>
  40629c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4062a0:	eb09 0107 	add.w	r1, r9, r7
  4062a4:	f002 0201 	and.w	r2, r2, #1
  4062a8:	444c      	add	r4, r9
  4062aa:	f043 0301 	orr.w	r3, r3, #1
  4062ae:	4317      	orrs	r7, r2
  4062b0:	f8c9 7004 	str.w	r7, [r9, #4]
  4062b4:	604b      	str	r3, [r1, #4]
  4062b6:	6863      	ldr	r3, [r4, #4]
  4062b8:	f043 0301 	orr.w	r3, r3, #1
  4062bc:	3108      	adds	r1, #8
  4062be:	6063      	str	r3, [r4, #4]
  4062c0:	4640      	mov	r0, r8
  4062c2:	f7ff fb87 	bl	4059d4 <_free_r>
  4062c6:	e7d6      	b.n	406276 <_realloc_r+0xde>
  4062c8:	4611      	mov	r1, r2
  4062ca:	f7fd bd1b 	b.w	403d04 <_malloc_r>
  4062ce:	f01e 0f01 	tst.w	lr, #1
  4062d2:	d18e      	bne.n	4061f2 <_realloc_r+0x5a>
  4062d4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4062d8:	eba9 0a01 	sub.w	sl, r9, r1
  4062dc:	f8da 1004 	ldr.w	r1, [sl, #4]
  4062e0:	f021 0103 	bic.w	r1, r1, #3
  4062e4:	440b      	add	r3, r1
  4062e6:	4423      	add	r3, r4
  4062e8:	4293      	cmp	r3, r2
  4062ea:	db25      	blt.n	406338 <_realloc_r+0x1a0>
  4062ec:	68c2      	ldr	r2, [r0, #12]
  4062ee:	6881      	ldr	r1, [r0, #8]
  4062f0:	4656      	mov	r6, sl
  4062f2:	60ca      	str	r2, [r1, #12]
  4062f4:	6091      	str	r1, [r2, #8]
  4062f6:	f8da 100c 	ldr.w	r1, [sl, #12]
  4062fa:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4062fe:	1f22      	subs	r2, r4, #4
  406300:	2a24      	cmp	r2, #36	; 0x24
  406302:	60c1      	str	r1, [r0, #12]
  406304:	6088      	str	r0, [r1, #8]
  406306:	f200 8094 	bhi.w	406432 <_realloc_r+0x29a>
  40630a:	2a13      	cmp	r2, #19
  40630c:	d96f      	bls.n	4063ee <_realloc_r+0x256>
  40630e:	6829      	ldr	r1, [r5, #0]
  406310:	f8ca 1008 	str.w	r1, [sl, #8]
  406314:	6869      	ldr	r1, [r5, #4]
  406316:	f8ca 100c 	str.w	r1, [sl, #12]
  40631a:	2a1b      	cmp	r2, #27
  40631c:	f200 80a2 	bhi.w	406464 <_realloc_r+0x2cc>
  406320:	3508      	adds	r5, #8
  406322:	f10a 0210 	add.w	r2, sl, #16
  406326:	e063      	b.n	4063f0 <_realloc_r+0x258>
  406328:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40632c:	eba9 0a03 	sub.w	sl, r9, r3
  406330:	f8da 1004 	ldr.w	r1, [sl, #4]
  406334:	f021 0103 	bic.w	r1, r1, #3
  406338:	1863      	adds	r3, r4, r1
  40633a:	4293      	cmp	r3, r2
  40633c:	f6ff af59 	blt.w	4061f2 <_realloc_r+0x5a>
  406340:	4656      	mov	r6, sl
  406342:	e7d8      	b.n	4062f6 <_realloc_r+0x15e>
  406344:	6841      	ldr	r1, [r0, #4]
  406346:	f021 0b03 	bic.w	fp, r1, #3
  40634a:	44a3      	add	fp, r4
  40634c:	f107 0010 	add.w	r0, r7, #16
  406350:	4583      	cmp	fp, r0
  406352:	da56      	bge.n	406402 <_realloc_r+0x26a>
  406354:	f01e 0f01 	tst.w	lr, #1
  406358:	f47f af4b 	bne.w	4061f2 <_realloc_r+0x5a>
  40635c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406360:	eba9 0a01 	sub.w	sl, r9, r1
  406364:	f8da 1004 	ldr.w	r1, [sl, #4]
  406368:	f021 0103 	bic.w	r1, r1, #3
  40636c:	448b      	add	fp, r1
  40636e:	4558      	cmp	r0, fp
  406370:	dce2      	bgt.n	406338 <_realloc_r+0x1a0>
  406372:	4656      	mov	r6, sl
  406374:	f8da 100c 	ldr.w	r1, [sl, #12]
  406378:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40637c:	1f22      	subs	r2, r4, #4
  40637e:	2a24      	cmp	r2, #36	; 0x24
  406380:	60c1      	str	r1, [r0, #12]
  406382:	6088      	str	r0, [r1, #8]
  406384:	f200 808f 	bhi.w	4064a6 <_realloc_r+0x30e>
  406388:	2a13      	cmp	r2, #19
  40638a:	f240 808a 	bls.w	4064a2 <_realloc_r+0x30a>
  40638e:	6829      	ldr	r1, [r5, #0]
  406390:	f8ca 1008 	str.w	r1, [sl, #8]
  406394:	6869      	ldr	r1, [r5, #4]
  406396:	f8ca 100c 	str.w	r1, [sl, #12]
  40639a:	2a1b      	cmp	r2, #27
  40639c:	f200 808a 	bhi.w	4064b4 <_realloc_r+0x31c>
  4063a0:	3508      	adds	r5, #8
  4063a2:	f10a 0210 	add.w	r2, sl, #16
  4063a6:	6829      	ldr	r1, [r5, #0]
  4063a8:	6011      	str	r1, [r2, #0]
  4063aa:	6869      	ldr	r1, [r5, #4]
  4063ac:	6051      	str	r1, [r2, #4]
  4063ae:	68a9      	ldr	r1, [r5, #8]
  4063b0:	6091      	str	r1, [r2, #8]
  4063b2:	eb0a 0107 	add.w	r1, sl, r7
  4063b6:	ebab 0207 	sub.w	r2, fp, r7
  4063ba:	f042 0201 	orr.w	r2, r2, #1
  4063be:	6099      	str	r1, [r3, #8]
  4063c0:	604a      	str	r2, [r1, #4]
  4063c2:	f8da 3004 	ldr.w	r3, [sl, #4]
  4063c6:	f003 0301 	and.w	r3, r3, #1
  4063ca:	431f      	orrs	r7, r3
  4063cc:	4640      	mov	r0, r8
  4063ce:	f8ca 7004 	str.w	r7, [sl, #4]
  4063d2:	f7fe f835 	bl	404440 <__malloc_unlock>
  4063d6:	e751      	b.n	40627c <_realloc_r+0xe4>
  4063d8:	682b      	ldr	r3, [r5, #0]
  4063da:	6003      	str	r3, [r0, #0]
  4063dc:	686b      	ldr	r3, [r5, #4]
  4063de:	6043      	str	r3, [r0, #4]
  4063e0:	2a1b      	cmp	r2, #27
  4063e2:	d82d      	bhi.n	406440 <_realloc_r+0x2a8>
  4063e4:	f100 0308 	add.w	r3, r0, #8
  4063e8:	f105 0208 	add.w	r2, r5, #8
  4063ec:	e71b      	b.n	406226 <_realloc_r+0x8e>
  4063ee:	4632      	mov	r2, r6
  4063f0:	6829      	ldr	r1, [r5, #0]
  4063f2:	6011      	str	r1, [r2, #0]
  4063f4:	6869      	ldr	r1, [r5, #4]
  4063f6:	6051      	str	r1, [r2, #4]
  4063f8:	68a9      	ldr	r1, [r5, #8]
  4063fa:	6091      	str	r1, [r2, #8]
  4063fc:	461c      	mov	r4, r3
  4063fe:	46d1      	mov	r9, sl
  406400:	e72a      	b.n	406258 <_realloc_r+0xc0>
  406402:	eb09 0107 	add.w	r1, r9, r7
  406406:	ebab 0b07 	sub.w	fp, fp, r7
  40640a:	f04b 0201 	orr.w	r2, fp, #1
  40640e:	6099      	str	r1, [r3, #8]
  406410:	604a      	str	r2, [r1, #4]
  406412:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406416:	f003 0301 	and.w	r3, r3, #1
  40641a:	431f      	orrs	r7, r3
  40641c:	4640      	mov	r0, r8
  40641e:	f845 7c04 	str.w	r7, [r5, #-4]
  406422:	f7fe f80d 	bl	404440 <__malloc_unlock>
  406426:	462e      	mov	r6, r5
  406428:	e728      	b.n	40627c <_realloc_r+0xe4>
  40642a:	4629      	mov	r1, r5
  40642c:	f7ff fe50 	bl	4060d0 <memmove>
  406430:	e6ff      	b.n	406232 <_realloc_r+0x9a>
  406432:	4629      	mov	r1, r5
  406434:	4630      	mov	r0, r6
  406436:	461c      	mov	r4, r3
  406438:	46d1      	mov	r9, sl
  40643a:	f7ff fe49 	bl	4060d0 <memmove>
  40643e:	e70b      	b.n	406258 <_realloc_r+0xc0>
  406440:	68ab      	ldr	r3, [r5, #8]
  406442:	6083      	str	r3, [r0, #8]
  406444:	68eb      	ldr	r3, [r5, #12]
  406446:	60c3      	str	r3, [r0, #12]
  406448:	2a24      	cmp	r2, #36	; 0x24
  40644a:	d017      	beq.n	40647c <_realloc_r+0x2e4>
  40644c:	f100 0310 	add.w	r3, r0, #16
  406450:	f105 0210 	add.w	r2, r5, #16
  406454:	e6e7      	b.n	406226 <_realloc_r+0x8e>
  406456:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40645a:	f023 0303 	bic.w	r3, r3, #3
  40645e:	441c      	add	r4, r3
  406460:	462e      	mov	r6, r5
  406462:	e6f9      	b.n	406258 <_realloc_r+0xc0>
  406464:	68a9      	ldr	r1, [r5, #8]
  406466:	f8ca 1010 	str.w	r1, [sl, #16]
  40646a:	68e9      	ldr	r1, [r5, #12]
  40646c:	f8ca 1014 	str.w	r1, [sl, #20]
  406470:	2a24      	cmp	r2, #36	; 0x24
  406472:	d00c      	beq.n	40648e <_realloc_r+0x2f6>
  406474:	3510      	adds	r5, #16
  406476:	f10a 0218 	add.w	r2, sl, #24
  40647a:	e7b9      	b.n	4063f0 <_realloc_r+0x258>
  40647c:	692b      	ldr	r3, [r5, #16]
  40647e:	6103      	str	r3, [r0, #16]
  406480:	696b      	ldr	r3, [r5, #20]
  406482:	6143      	str	r3, [r0, #20]
  406484:	f105 0218 	add.w	r2, r5, #24
  406488:	f100 0318 	add.w	r3, r0, #24
  40648c:	e6cb      	b.n	406226 <_realloc_r+0x8e>
  40648e:	692a      	ldr	r2, [r5, #16]
  406490:	f8ca 2018 	str.w	r2, [sl, #24]
  406494:	696a      	ldr	r2, [r5, #20]
  406496:	f8ca 201c 	str.w	r2, [sl, #28]
  40649a:	3518      	adds	r5, #24
  40649c:	f10a 0220 	add.w	r2, sl, #32
  4064a0:	e7a6      	b.n	4063f0 <_realloc_r+0x258>
  4064a2:	4632      	mov	r2, r6
  4064a4:	e77f      	b.n	4063a6 <_realloc_r+0x20e>
  4064a6:	4629      	mov	r1, r5
  4064a8:	4630      	mov	r0, r6
  4064aa:	9301      	str	r3, [sp, #4]
  4064ac:	f7ff fe10 	bl	4060d0 <memmove>
  4064b0:	9b01      	ldr	r3, [sp, #4]
  4064b2:	e77e      	b.n	4063b2 <_realloc_r+0x21a>
  4064b4:	68a9      	ldr	r1, [r5, #8]
  4064b6:	f8ca 1010 	str.w	r1, [sl, #16]
  4064ba:	68e9      	ldr	r1, [r5, #12]
  4064bc:	f8ca 1014 	str.w	r1, [sl, #20]
  4064c0:	2a24      	cmp	r2, #36	; 0x24
  4064c2:	d003      	beq.n	4064cc <_realloc_r+0x334>
  4064c4:	3510      	adds	r5, #16
  4064c6:	f10a 0218 	add.w	r2, sl, #24
  4064ca:	e76c      	b.n	4063a6 <_realloc_r+0x20e>
  4064cc:	692a      	ldr	r2, [r5, #16]
  4064ce:	f8ca 2018 	str.w	r2, [sl, #24]
  4064d2:	696a      	ldr	r2, [r5, #20]
  4064d4:	f8ca 201c 	str.w	r2, [sl, #28]
  4064d8:	3518      	adds	r5, #24
  4064da:	f10a 0220 	add.w	r2, sl, #32
  4064de:	e762      	b.n	4063a6 <_realloc_r+0x20e>
  4064e0:	20400440 	.word	0x20400440

004064e4 <__sread>:
  4064e4:	b510      	push	{r4, lr}
  4064e6:	460c      	mov	r4, r1
  4064e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4064ec:	f000 f9f6 	bl	4068dc <_read_r>
  4064f0:	2800      	cmp	r0, #0
  4064f2:	db03      	blt.n	4064fc <__sread+0x18>
  4064f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4064f6:	4403      	add	r3, r0
  4064f8:	6523      	str	r3, [r4, #80]	; 0x50
  4064fa:	bd10      	pop	{r4, pc}
  4064fc:	89a3      	ldrh	r3, [r4, #12]
  4064fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  406502:	81a3      	strh	r3, [r4, #12]
  406504:	bd10      	pop	{r4, pc}
  406506:	bf00      	nop

00406508 <__swrite>:
  406508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40650c:	4616      	mov	r6, r2
  40650e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  406512:	461f      	mov	r7, r3
  406514:	05d3      	lsls	r3, r2, #23
  406516:	460c      	mov	r4, r1
  406518:	4605      	mov	r5, r0
  40651a:	d507      	bpl.n	40652c <__swrite+0x24>
  40651c:	2200      	movs	r2, #0
  40651e:	2302      	movs	r3, #2
  406520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406524:	f000 f9c4 	bl	4068b0 <_lseek_r>
  406528:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40652c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406530:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406534:	81a2      	strh	r2, [r4, #12]
  406536:	463b      	mov	r3, r7
  406538:	4632      	mov	r2, r6
  40653a:	4628      	mov	r0, r5
  40653c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406540:	f000 b8a4 	b.w	40668c <_write_r>

00406544 <__sseek>:
  406544:	b510      	push	{r4, lr}
  406546:	460c      	mov	r4, r1
  406548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40654c:	f000 f9b0 	bl	4068b0 <_lseek_r>
  406550:	89a3      	ldrh	r3, [r4, #12]
  406552:	1c42      	adds	r2, r0, #1
  406554:	bf0e      	itee	eq
  406556:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40655a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40655e:	6520      	strne	r0, [r4, #80]	; 0x50
  406560:	81a3      	strh	r3, [r4, #12]
  406562:	bd10      	pop	{r4, pc}

00406564 <__sclose>:
  406564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406568:	f000 b908 	b.w	40677c <_close_r>

0040656c <__swbuf_r>:
  40656c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40656e:	460d      	mov	r5, r1
  406570:	4614      	mov	r4, r2
  406572:	4606      	mov	r6, r0
  406574:	b110      	cbz	r0, 40657c <__swbuf_r+0x10>
  406576:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406578:	2b00      	cmp	r3, #0
  40657a:	d04b      	beq.n	406614 <__swbuf_r+0xa8>
  40657c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406580:	69a3      	ldr	r3, [r4, #24]
  406582:	60a3      	str	r3, [r4, #8]
  406584:	b291      	uxth	r1, r2
  406586:	0708      	lsls	r0, r1, #28
  406588:	d539      	bpl.n	4065fe <__swbuf_r+0x92>
  40658a:	6923      	ldr	r3, [r4, #16]
  40658c:	2b00      	cmp	r3, #0
  40658e:	d036      	beq.n	4065fe <__swbuf_r+0x92>
  406590:	b2ed      	uxtb	r5, r5
  406592:	0489      	lsls	r1, r1, #18
  406594:	462f      	mov	r7, r5
  406596:	d515      	bpl.n	4065c4 <__swbuf_r+0x58>
  406598:	6822      	ldr	r2, [r4, #0]
  40659a:	6961      	ldr	r1, [r4, #20]
  40659c:	1ad3      	subs	r3, r2, r3
  40659e:	428b      	cmp	r3, r1
  4065a0:	da1c      	bge.n	4065dc <__swbuf_r+0x70>
  4065a2:	3301      	adds	r3, #1
  4065a4:	68a1      	ldr	r1, [r4, #8]
  4065a6:	1c50      	adds	r0, r2, #1
  4065a8:	3901      	subs	r1, #1
  4065aa:	60a1      	str	r1, [r4, #8]
  4065ac:	6020      	str	r0, [r4, #0]
  4065ae:	7015      	strb	r5, [r2, #0]
  4065b0:	6962      	ldr	r2, [r4, #20]
  4065b2:	429a      	cmp	r2, r3
  4065b4:	d01a      	beq.n	4065ec <__swbuf_r+0x80>
  4065b6:	89a3      	ldrh	r3, [r4, #12]
  4065b8:	07db      	lsls	r3, r3, #31
  4065ba:	d501      	bpl.n	4065c0 <__swbuf_r+0x54>
  4065bc:	2d0a      	cmp	r5, #10
  4065be:	d015      	beq.n	4065ec <__swbuf_r+0x80>
  4065c0:	4638      	mov	r0, r7
  4065c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4065c4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4065c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4065ca:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4065ce:	81a2      	strh	r2, [r4, #12]
  4065d0:	6822      	ldr	r2, [r4, #0]
  4065d2:	6661      	str	r1, [r4, #100]	; 0x64
  4065d4:	6961      	ldr	r1, [r4, #20]
  4065d6:	1ad3      	subs	r3, r2, r3
  4065d8:	428b      	cmp	r3, r1
  4065da:	dbe2      	blt.n	4065a2 <__swbuf_r+0x36>
  4065dc:	4621      	mov	r1, r4
  4065de:	4630      	mov	r0, r6
  4065e0:	f7ff f87a 	bl	4056d8 <_fflush_r>
  4065e4:	b940      	cbnz	r0, 4065f8 <__swbuf_r+0x8c>
  4065e6:	6822      	ldr	r2, [r4, #0]
  4065e8:	2301      	movs	r3, #1
  4065ea:	e7db      	b.n	4065a4 <__swbuf_r+0x38>
  4065ec:	4621      	mov	r1, r4
  4065ee:	4630      	mov	r0, r6
  4065f0:	f7ff f872 	bl	4056d8 <_fflush_r>
  4065f4:	2800      	cmp	r0, #0
  4065f6:	d0e3      	beq.n	4065c0 <__swbuf_r+0x54>
  4065f8:	f04f 37ff 	mov.w	r7, #4294967295
  4065fc:	e7e0      	b.n	4065c0 <__swbuf_r+0x54>
  4065fe:	4621      	mov	r1, r4
  406600:	4630      	mov	r0, r6
  406602:	f7fe ff55 	bl	4054b0 <__swsetup_r>
  406606:	2800      	cmp	r0, #0
  406608:	d1f6      	bne.n	4065f8 <__swbuf_r+0x8c>
  40660a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40660e:	6923      	ldr	r3, [r4, #16]
  406610:	b291      	uxth	r1, r2
  406612:	e7bd      	b.n	406590 <__swbuf_r+0x24>
  406614:	f7ff f8b8 	bl	405788 <__sinit>
  406618:	e7b0      	b.n	40657c <__swbuf_r+0x10>
  40661a:	bf00      	nop

0040661c <_wcrtomb_r>:
  40661c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40661e:	4606      	mov	r6, r0
  406620:	b085      	sub	sp, #20
  406622:	461f      	mov	r7, r3
  406624:	b189      	cbz	r1, 40664a <_wcrtomb_r+0x2e>
  406626:	4c10      	ldr	r4, [pc, #64]	; (406668 <_wcrtomb_r+0x4c>)
  406628:	4d10      	ldr	r5, [pc, #64]	; (40666c <_wcrtomb_r+0x50>)
  40662a:	6824      	ldr	r4, [r4, #0]
  40662c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40662e:	2c00      	cmp	r4, #0
  406630:	bf08      	it	eq
  406632:	462c      	moveq	r4, r5
  406634:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  406638:	47a0      	blx	r4
  40663a:	1c43      	adds	r3, r0, #1
  40663c:	d103      	bne.n	406646 <_wcrtomb_r+0x2a>
  40663e:	2200      	movs	r2, #0
  406640:	238a      	movs	r3, #138	; 0x8a
  406642:	603a      	str	r2, [r7, #0]
  406644:	6033      	str	r3, [r6, #0]
  406646:	b005      	add	sp, #20
  406648:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40664a:	460c      	mov	r4, r1
  40664c:	4906      	ldr	r1, [pc, #24]	; (406668 <_wcrtomb_r+0x4c>)
  40664e:	4a07      	ldr	r2, [pc, #28]	; (40666c <_wcrtomb_r+0x50>)
  406650:	6809      	ldr	r1, [r1, #0]
  406652:	6b49      	ldr	r1, [r1, #52]	; 0x34
  406654:	2900      	cmp	r1, #0
  406656:	bf08      	it	eq
  406658:	4611      	moveq	r1, r2
  40665a:	4622      	mov	r2, r4
  40665c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  406660:	a901      	add	r1, sp, #4
  406662:	47a0      	blx	r4
  406664:	e7e9      	b.n	40663a <_wcrtomb_r+0x1e>
  406666:	bf00      	nop
  406668:	20400010 	.word	0x20400010
  40666c:	20400854 	.word	0x20400854

00406670 <__ascii_wctomb>:
  406670:	b121      	cbz	r1, 40667c <__ascii_wctomb+0xc>
  406672:	2aff      	cmp	r2, #255	; 0xff
  406674:	d804      	bhi.n	406680 <__ascii_wctomb+0x10>
  406676:	700a      	strb	r2, [r1, #0]
  406678:	2001      	movs	r0, #1
  40667a:	4770      	bx	lr
  40667c:	4608      	mov	r0, r1
  40667e:	4770      	bx	lr
  406680:	238a      	movs	r3, #138	; 0x8a
  406682:	6003      	str	r3, [r0, #0]
  406684:	f04f 30ff 	mov.w	r0, #4294967295
  406688:	4770      	bx	lr
  40668a:	bf00      	nop

0040668c <_write_r>:
  40668c:	b570      	push	{r4, r5, r6, lr}
  40668e:	460d      	mov	r5, r1
  406690:	4c08      	ldr	r4, [pc, #32]	; (4066b4 <_write_r+0x28>)
  406692:	4611      	mov	r1, r2
  406694:	4606      	mov	r6, r0
  406696:	461a      	mov	r2, r3
  406698:	4628      	mov	r0, r5
  40669a:	2300      	movs	r3, #0
  40669c:	6023      	str	r3, [r4, #0]
  40669e:	f7f9 fddb 	bl	400258 <_write>
  4066a2:	1c43      	adds	r3, r0, #1
  4066a4:	d000      	beq.n	4066a8 <_write_r+0x1c>
  4066a6:	bd70      	pop	{r4, r5, r6, pc}
  4066a8:	6823      	ldr	r3, [r4, #0]
  4066aa:	2b00      	cmp	r3, #0
  4066ac:	d0fb      	beq.n	4066a6 <_write_r+0x1a>
  4066ae:	6033      	str	r3, [r6, #0]
  4066b0:	bd70      	pop	{r4, r5, r6, pc}
  4066b2:	bf00      	nop
  4066b4:	20400ccc 	.word	0x20400ccc

004066b8 <__register_exitproc>:
  4066b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4066bc:	4d2c      	ldr	r5, [pc, #176]	; (406770 <__register_exitproc+0xb8>)
  4066be:	4606      	mov	r6, r0
  4066c0:	6828      	ldr	r0, [r5, #0]
  4066c2:	4698      	mov	r8, r3
  4066c4:	460f      	mov	r7, r1
  4066c6:	4691      	mov	r9, r2
  4066c8:	f7ff fc1e 	bl	405f08 <__retarget_lock_acquire_recursive>
  4066cc:	4b29      	ldr	r3, [pc, #164]	; (406774 <__register_exitproc+0xbc>)
  4066ce:	681c      	ldr	r4, [r3, #0]
  4066d0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4066d4:	2b00      	cmp	r3, #0
  4066d6:	d03e      	beq.n	406756 <__register_exitproc+0x9e>
  4066d8:	685a      	ldr	r2, [r3, #4]
  4066da:	2a1f      	cmp	r2, #31
  4066dc:	dc1c      	bgt.n	406718 <__register_exitproc+0x60>
  4066de:	f102 0e01 	add.w	lr, r2, #1
  4066e2:	b176      	cbz	r6, 406702 <__register_exitproc+0x4a>
  4066e4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4066e8:	2401      	movs	r4, #1
  4066ea:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4066ee:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4066f2:	4094      	lsls	r4, r2
  4066f4:	4320      	orrs	r0, r4
  4066f6:	2e02      	cmp	r6, #2
  4066f8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4066fc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  406700:	d023      	beq.n	40674a <__register_exitproc+0x92>
  406702:	3202      	adds	r2, #2
  406704:	f8c3 e004 	str.w	lr, [r3, #4]
  406708:	6828      	ldr	r0, [r5, #0]
  40670a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40670e:	f7ff fbfd 	bl	405f0c <__retarget_lock_release_recursive>
  406712:	2000      	movs	r0, #0
  406714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406718:	4b17      	ldr	r3, [pc, #92]	; (406778 <__register_exitproc+0xc0>)
  40671a:	b30b      	cbz	r3, 406760 <__register_exitproc+0xa8>
  40671c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406720:	f7fd fae0 	bl	403ce4 <malloc>
  406724:	4603      	mov	r3, r0
  406726:	b1d8      	cbz	r0, 406760 <__register_exitproc+0xa8>
  406728:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40672c:	6002      	str	r2, [r0, #0]
  40672e:	2100      	movs	r1, #0
  406730:	6041      	str	r1, [r0, #4]
  406732:	460a      	mov	r2, r1
  406734:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406738:	f04f 0e01 	mov.w	lr, #1
  40673c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406740:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  406744:	2e00      	cmp	r6, #0
  406746:	d0dc      	beq.n	406702 <__register_exitproc+0x4a>
  406748:	e7cc      	b.n	4066e4 <__register_exitproc+0x2c>
  40674a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40674e:	430c      	orrs	r4, r1
  406750:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  406754:	e7d5      	b.n	406702 <__register_exitproc+0x4a>
  406756:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40675a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40675e:	e7bb      	b.n	4066d8 <__register_exitproc+0x20>
  406760:	6828      	ldr	r0, [r5, #0]
  406762:	f7ff fbd3 	bl	405f0c <__retarget_lock_release_recursive>
  406766:	f04f 30ff 	mov.w	r0, #4294967295
  40676a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40676e:	bf00      	nop
  406770:	20400850 	.word	0x20400850
  406774:	00406d3c 	.word	0x00406d3c
  406778:	00403ce5 	.word	0x00403ce5

0040677c <_close_r>:
  40677c:	b538      	push	{r3, r4, r5, lr}
  40677e:	4c07      	ldr	r4, [pc, #28]	; (40679c <_close_r+0x20>)
  406780:	2300      	movs	r3, #0
  406782:	4605      	mov	r5, r0
  406784:	4608      	mov	r0, r1
  406786:	6023      	str	r3, [r4, #0]
  406788:	f7fa fa98 	bl	400cbc <_close>
  40678c:	1c43      	adds	r3, r0, #1
  40678e:	d000      	beq.n	406792 <_close_r+0x16>
  406790:	bd38      	pop	{r3, r4, r5, pc}
  406792:	6823      	ldr	r3, [r4, #0]
  406794:	2b00      	cmp	r3, #0
  406796:	d0fb      	beq.n	406790 <_close_r+0x14>
  406798:	602b      	str	r3, [r5, #0]
  40679a:	bd38      	pop	{r3, r4, r5, pc}
  40679c:	20400ccc 	.word	0x20400ccc

004067a0 <_fclose_r>:
  4067a0:	b570      	push	{r4, r5, r6, lr}
  4067a2:	b159      	cbz	r1, 4067bc <_fclose_r+0x1c>
  4067a4:	4605      	mov	r5, r0
  4067a6:	460c      	mov	r4, r1
  4067a8:	b110      	cbz	r0, 4067b0 <_fclose_r+0x10>
  4067aa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4067ac:	2b00      	cmp	r3, #0
  4067ae:	d03c      	beq.n	40682a <_fclose_r+0x8a>
  4067b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4067b2:	07d8      	lsls	r0, r3, #31
  4067b4:	d505      	bpl.n	4067c2 <_fclose_r+0x22>
  4067b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4067ba:	b92b      	cbnz	r3, 4067c8 <_fclose_r+0x28>
  4067bc:	2600      	movs	r6, #0
  4067be:	4630      	mov	r0, r6
  4067c0:	bd70      	pop	{r4, r5, r6, pc}
  4067c2:	89a3      	ldrh	r3, [r4, #12]
  4067c4:	0599      	lsls	r1, r3, #22
  4067c6:	d53c      	bpl.n	406842 <_fclose_r+0xa2>
  4067c8:	4621      	mov	r1, r4
  4067ca:	4628      	mov	r0, r5
  4067cc:	f7fe fee4 	bl	405598 <__sflush_r>
  4067d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4067d2:	4606      	mov	r6, r0
  4067d4:	b133      	cbz	r3, 4067e4 <_fclose_r+0x44>
  4067d6:	69e1      	ldr	r1, [r4, #28]
  4067d8:	4628      	mov	r0, r5
  4067da:	4798      	blx	r3
  4067dc:	2800      	cmp	r0, #0
  4067de:	bfb8      	it	lt
  4067e0:	f04f 36ff 	movlt.w	r6, #4294967295
  4067e4:	89a3      	ldrh	r3, [r4, #12]
  4067e6:	061a      	lsls	r2, r3, #24
  4067e8:	d422      	bmi.n	406830 <_fclose_r+0x90>
  4067ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4067ec:	b141      	cbz	r1, 406800 <_fclose_r+0x60>
  4067ee:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4067f2:	4299      	cmp	r1, r3
  4067f4:	d002      	beq.n	4067fc <_fclose_r+0x5c>
  4067f6:	4628      	mov	r0, r5
  4067f8:	f7ff f8ec 	bl	4059d4 <_free_r>
  4067fc:	2300      	movs	r3, #0
  4067fe:	6323      	str	r3, [r4, #48]	; 0x30
  406800:	6c61      	ldr	r1, [r4, #68]	; 0x44
  406802:	b121      	cbz	r1, 40680e <_fclose_r+0x6e>
  406804:	4628      	mov	r0, r5
  406806:	f7ff f8e5 	bl	4059d4 <_free_r>
  40680a:	2300      	movs	r3, #0
  40680c:	6463      	str	r3, [r4, #68]	; 0x44
  40680e:	f7fe ffe7 	bl	4057e0 <__sfp_lock_acquire>
  406812:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406814:	2200      	movs	r2, #0
  406816:	07db      	lsls	r3, r3, #31
  406818:	81a2      	strh	r2, [r4, #12]
  40681a:	d50e      	bpl.n	40683a <_fclose_r+0x9a>
  40681c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40681e:	f7ff fb71 	bl	405f04 <__retarget_lock_close_recursive>
  406822:	f7fe ffe3 	bl	4057ec <__sfp_lock_release>
  406826:	4630      	mov	r0, r6
  406828:	bd70      	pop	{r4, r5, r6, pc}
  40682a:	f7fe ffad 	bl	405788 <__sinit>
  40682e:	e7bf      	b.n	4067b0 <_fclose_r+0x10>
  406830:	6921      	ldr	r1, [r4, #16]
  406832:	4628      	mov	r0, r5
  406834:	f7ff f8ce 	bl	4059d4 <_free_r>
  406838:	e7d7      	b.n	4067ea <_fclose_r+0x4a>
  40683a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40683c:	f7ff fb66 	bl	405f0c <__retarget_lock_release_recursive>
  406840:	e7ec      	b.n	40681c <_fclose_r+0x7c>
  406842:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406844:	f7ff fb60 	bl	405f08 <__retarget_lock_acquire_recursive>
  406848:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40684c:	2b00      	cmp	r3, #0
  40684e:	d1bb      	bne.n	4067c8 <_fclose_r+0x28>
  406850:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406852:	f016 0601 	ands.w	r6, r6, #1
  406856:	d1b1      	bne.n	4067bc <_fclose_r+0x1c>
  406858:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40685a:	f7ff fb57 	bl	405f0c <__retarget_lock_release_recursive>
  40685e:	4630      	mov	r0, r6
  406860:	bd70      	pop	{r4, r5, r6, pc}
  406862:	bf00      	nop

00406864 <_fstat_r>:
  406864:	b538      	push	{r3, r4, r5, lr}
  406866:	460b      	mov	r3, r1
  406868:	4c07      	ldr	r4, [pc, #28]	; (406888 <_fstat_r+0x24>)
  40686a:	4605      	mov	r5, r0
  40686c:	4611      	mov	r1, r2
  40686e:	4618      	mov	r0, r3
  406870:	2300      	movs	r3, #0
  406872:	6023      	str	r3, [r4, #0]
  406874:	f7fa fa26 	bl	400cc4 <_fstat>
  406878:	1c43      	adds	r3, r0, #1
  40687a:	d000      	beq.n	40687e <_fstat_r+0x1a>
  40687c:	bd38      	pop	{r3, r4, r5, pc}
  40687e:	6823      	ldr	r3, [r4, #0]
  406880:	2b00      	cmp	r3, #0
  406882:	d0fb      	beq.n	40687c <_fstat_r+0x18>
  406884:	602b      	str	r3, [r5, #0]
  406886:	bd38      	pop	{r3, r4, r5, pc}
  406888:	20400ccc 	.word	0x20400ccc

0040688c <_isatty_r>:
  40688c:	b538      	push	{r3, r4, r5, lr}
  40688e:	4c07      	ldr	r4, [pc, #28]	; (4068ac <_isatty_r+0x20>)
  406890:	2300      	movs	r3, #0
  406892:	4605      	mov	r5, r0
  406894:	4608      	mov	r0, r1
  406896:	6023      	str	r3, [r4, #0]
  406898:	f7fa fa1a 	bl	400cd0 <_isatty>
  40689c:	1c43      	adds	r3, r0, #1
  40689e:	d000      	beq.n	4068a2 <_isatty_r+0x16>
  4068a0:	bd38      	pop	{r3, r4, r5, pc}
  4068a2:	6823      	ldr	r3, [r4, #0]
  4068a4:	2b00      	cmp	r3, #0
  4068a6:	d0fb      	beq.n	4068a0 <_isatty_r+0x14>
  4068a8:	602b      	str	r3, [r5, #0]
  4068aa:	bd38      	pop	{r3, r4, r5, pc}
  4068ac:	20400ccc 	.word	0x20400ccc

004068b0 <_lseek_r>:
  4068b0:	b570      	push	{r4, r5, r6, lr}
  4068b2:	460d      	mov	r5, r1
  4068b4:	4c08      	ldr	r4, [pc, #32]	; (4068d8 <_lseek_r+0x28>)
  4068b6:	4611      	mov	r1, r2
  4068b8:	4606      	mov	r6, r0
  4068ba:	461a      	mov	r2, r3
  4068bc:	4628      	mov	r0, r5
  4068be:	2300      	movs	r3, #0
  4068c0:	6023      	str	r3, [r4, #0]
  4068c2:	f7fa fa07 	bl	400cd4 <_lseek>
  4068c6:	1c43      	adds	r3, r0, #1
  4068c8:	d000      	beq.n	4068cc <_lseek_r+0x1c>
  4068ca:	bd70      	pop	{r4, r5, r6, pc}
  4068cc:	6823      	ldr	r3, [r4, #0]
  4068ce:	2b00      	cmp	r3, #0
  4068d0:	d0fb      	beq.n	4068ca <_lseek_r+0x1a>
  4068d2:	6033      	str	r3, [r6, #0]
  4068d4:	bd70      	pop	{r4, r5, r6, pc}
  4068d6:	bf00      	nop
  4068d8:	20400ccc 	.word	0x20400ccc

004068dc <_read_r>:
  4068dc:	b570      	push	{r4, r5, r6, lr}
  4068de:	460d      	mov	r5, r1
  4068e0:	4c08      	ldr	r4, [pc, #32]	; (406904 <_read_r+0x28>)
  4068e2:	4611      	mov	r1, r2
  4068e4:	4606      	mov	r6, r0
  4068e6:	461a      	mov	r2, r3
  4068e8:	4628      	mov	r0, r5
  4068ea:	2300      	movs	r3, #0
  4068ec:	6023      	str	r3, [r4, #0]
  4068ee:	f7f9 fc95 	bl	40021c <_read>
  4068f2:	1c43      	adds	r3, r0, #1
  4068f4:	d000      	beq.n	4068f8 <_read_r+0x1c>
  4068f6:	bd70      	pop	{r4, r5, r6, pc}
  4068f8:	6823      	ldr	r3, [r4, #0]
  4068fa:	2b00      	cmp	r3, #0
  4068fc:	d0fb      	beq.n	4068f6 <_read_r+0x1a>
  4068fe:	6033      	str	r3, [r6, #0]
  406900:	bd70      	pop	{r4, r5, r6, pc}
  406902:	bf00      	nop
  406904:	20400ccc 	.word	0x20400ccc

00406908 <__aeabi_uldivmod>:
  406908:	b953      	cbnz	r3, 406920 <__aeabi_uldivmod+0x18>
  40690a:	b94a      	cbnz	r2, 406920 <__aeabi_uldivmod+0x18>
  40690c:	2900      	cmp	r1, #0
  40690e:	bf08      	it	eq
  406910:	2800      	cmpeq	r0, #0
  406912:	bf1c      	itt	ne
  406914:	f04f 31ff 	movne.w	r1, #4294967295
  406918:	f04f 30ff 	movne.w	r0, #4294967295
  40691c:	f000 b97a 	b.w	406c14 <__aeabi_idiv0>
  406920:	f1ad 0c08 	sub.w	ip, sp, #8
  406924:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  406928:	f000 f806 	bl	406938 <__udivmoddi4>
  40692c:	f8dd e004 	ldr.w	lr, [sp, #4]
  406930:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406934:	b004      	add	sp, #16
  406936:	4770      	bx	lr

00406938 <__udivmoddi4>:
  406938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40693c:	468c      	mov	ip, r1
  40693e:	460d      	mov	r5, r1
  406940:	4604      	mov	r4, r0
  406942:	9e08      	ldr	r6, [sp, #32]
  406944:	2b00      	cmp	r3, #0
  406946:	d151      	bne.n	4069ec <__udivmoddi4+0xb4>
  406948:	428a      	cmp	r2, r1
  40694a:	4617      	mov	r7, r2
  40694c:	d96d      	bls.n	406a2a <__udivmoddi4+0xf2>
  40694e:	fab2 fe82 	clz	lr, r2
  406952:	f1be 0f00 	cmp.w	lr, #0
  406956:	d00b      	beq.n	406970 <__udivmoddi4+0x38>
  406958:	f1ce 0c20 	rsb	ip, lr, #32
  40695c:	fa01 f50e 	lsl.w	r5, r1, lr
  406960:	fa20 fc0c 	lsr.w	ip, r0, ip
  406964:	fa02 f70e 	lsl.w	r7, r2, lr
  406968:	ea4c 0c05 	orr.w	ip, ip, r5
  40696c:	fa00 f40e 	lsl.w	r4, r0, lr
  406970:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  406974:	0c25      	lsrs	r5, r4, #16
  406976:	fbbc f8fa 	udiv	r8, ip, sl
  40697a:	fa1f f987 	uxth.w	r9, r7
  40697e:	fb0a cc18 	mls	ip, sl, r8, ip
  406982:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  406986:	fb08 f309 	mul.w	r3, r8, r9
  40698a:	42ab      	cmp	r3, r5
  40698c:	d90a      	bls.n	4069a4 <__udivmoddi4+0x6c>
  40698e:	19ed      	adds	r5, r5, r7
  406990:	f108 32ff 	add.w	r2, r8, #4294967295
  406994:	f080 8123 	bcs.w	406bde <__udivmoddi4+0x2a6>
  406998:	42ab      	cmp	r3, r5
  40699a:	f240 8120 	bls.w	406bde <__udivmoddi4+0x2a6>
  40699e:	f1a8 0802 	sub.w	r8, r8, #2
  4069a2:	443d      	add	r5, r7
  4069a4:	1aed      	subs	r5, r5, r3
  4069a6:	b2a4      	uxth	r4, r4
  4069a8:	fbb5 f0fa 	udiv	r0, r5, sl
  4069ac:	fb0a 5510 	mls	r5, sl, r0, r5
  4069b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4069b4:	fb00 f909 	mul.w	r9, r0, r9
  4069b8:	45a1      	cmp	r9, r4
  4069ba:	d909      	bls.n	4069d0 <__udivmoddi4+0x98>
  4069bc:	19e4      	adds	r4, r4, r7
  4069be:	f100 33ff 	add.w	r3, r0, #4294967295
  4069c2:	f080 810a 	bcs.w	406bda <__udivmoddi4+0x2a2>
  4069c6:	45a1      	cmp	r9, r4
  4069c8:	f240 8107 	bls.w	406bda <__udivmoddi4+0x2a2>
  4069cc:	3802      	subs	r0, #2
  4069ce:	443c      	add	r4, r7
  4069d0:	eba4 0409 	sub.w	r4, r4, r9
  4069d4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4069d8:	2100      	movs	r1, #0
  4069da:	2e00      	cmp	r6, #0
  4069dc:	d061      	beq.n	406aa2 <__udivmoddi4+0x16a>
  4069de:	fa24 f40e 	lsr.w	r4, r4, lr
  4069e2:	2300      	movs	r3, #0
  4069e4:	6034      	str	r4, [r6, #0]
  4069e6:	6073      	str	r3, [r6, #4]
  4069e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4069ec:	428b      	cmp	r3, r1
  4069ee:	d907      	bls.n	406a00 <__udivmoddi4+0xc8>
  4069f0:	2e00      	cmp	r6, #0
  4069f2:	d054      	beq.n	406a9e <__udivmoddi4+0x166>
  4069f4:	2100      	movs	r1, #0
  4069f6:	e886 0021 	stmia.w	r6, {r0, r5}
  4069fa:	4608      	mov	r0, r1
  4069fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406a00:	fab3 f183 	clz	r1, r3
  406a04:	2900      	cmp	r1, #0
  406a06:	f040 808e 	bne.w	406b26 <__udivmoddi4+0x1ee>
  406a0a:	42ab      	cmp	r3, r5
  406a0c:	d302      	bcc.n	406a14 <__udivmoddi4+0xdc>
  406a0e:	4282      	cmp	r2, r0
  406a10:	f200 80fa 	bhi.w	406c08 <__udivmoddi4+0x2d0>
  406a14:	1a84      	subs	r4, r0, r2
  406a16:	eb65 0503 	sbc.w	r5, r5, r3
  406a1a:	2001      	movs	r0, #1
  406a1c:	46ac      	mov	ip, r5
  406a1e:	2e00      	cmp	r6, #0
  406a20:	d03f      	beq.n	406aa2 <__udivmoddi4+0x16a>
  406a22:	e886 1010 	stmia.w	r6, {r4, ip}
  406a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406a2a:	b912      	cbnz	r2, 406a32 <__udivmoddi4+0xfa>
  406a2c:	2701      	movs	r7, #1
  406a2e:	fbb7 f7f2 	udiv	r7, r7, r2
  406a32:	fab7 fe87 	clz	lr, r7
  406a36:	f1be 0f00 	cmp.w	lr, #0
  406a3a:	d134      	bne.n	406aa6 <__udivmoddi4+0x16e>
  406a3c:	1beb      	subs	r3, r5, r7
  406a3e:	0c3a      	lsrs	r2, r7, #16
  406a40:	fa1f fc87 	uxth.w	ip, r7
  406a44:	2101      	movs	r1, #1
  406a46:	fbb3 f8f2 	udiv	r8, r3, r2
  406a4a:	0c25      	lsrs	r5, r4, #16
  406a4c:	fb02 3318 	mls	r3, r2, r8, r3
  406a50:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406a54:	fb0c f308 	mul.w	r3, ip, r8
  406a58:	42ab      	cmp	r3, r5
  406a5a:	d907      	bls.n	406a6c <__udivmoddi4+0x134>
  406a5c:	19ed      	adds	r5, r5, r7
  406a5e:	f108 30ff 	add.w	r0, r8, #4294967295
  406a62:	d202      	bcs.n	406a6a <__udivmoddi4+0x132>
  406a64:	42ab      	cmp	r3, r5
  406a66:	f200 80d1 	bhi.w	406c0c <__udivmoddi4+0x2d4>
  406a6a:	4680      	mov	r8, r0
  406a6c:	1aed      	subs	r5, r5, r3
  406a6e:	b2a3      	uxth	r3, r4
  406a70:	fbb5 f0f2 	udiv	r0, r5, r2
  406a74:	fb02 5510 	mls	r5, r2, r0, r5
  406a78:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  406a7c:	fb0c fc00 	mul.w	ip, ip, r0
  406a80:	45a4      	cmp	ip, r4
  406a82:	d907      	bls.n	406a94 <__udivmoddi4+0x15c>
  406a84:	19e4      	adds	r4, r4, r7
  406a86:	f100 33ff 	add.w	r3, r0, #4294967295
  406a8a:	d202      	bcs.n	406a92 <__udivmoddi4+0x15a>
  406a8c:	45a4      	cmp	ip, r4
  406a8e:	f200 80b8 	bhi.w	406c02 <__udivmoddi4+0x2ca>
  406a92:	4618      	mov	r0, r3
  406a94:	eba4 040c 	sub.w	r4, r4, ip
  406a98:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406a9c:	e79d      	b.n	4069da <__udivmoddi4+0xa2>
  406a9e:	4631      	mov	r1, r6
  406aa0:	4630      	mov	r0, r6
  406aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406aa6:	f1ce 0420 	rsb	r4, lr, #32
  406aaa:	fa05 f30e 	lsl.w	r3, r5, lr
  406aae:	fa07 f70e 	lsl.w	r7, r7, lr
  406ab2:	fa20 f804 	lsr.w	r8, r0, r4
  406ab6:	0c3a      	lsrs	r2, r7, #16
  406ab8:	fa25 f404 	lsr.w	r4, r5, r4
  406abc:	ea48 0803 	orr.w	r8, r8, r3
  406ac0:	fbb4 f1f2 	udiv	r1, r4, r2
  406ac4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  406ac8:	fb02 4411 	mls	r4, r2, r1, r4
  406acc:	fa1f fc87 	uxth.w	ip, r7
  406ad0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  406ad4:	fb01 f30c 	mul.w	r3, r1, ip
  406ad8:	42ab      	cmp	r3, r5
  406ada:	fa00 f40e 	lsl.w	r4, r0, lr
  406ade:	d909      	bls.n	406af4 <__udivmoddi4+0x1bc>
  406ae0:	19ed      	adds	r5, r5, r7
  406ae2:	f101 30ff 	add.w	r0, r1, #4294967295
  406ae6:	f080 808a 	bcs.w	406bfe <__udivmoddi4+0x2c6>
  406aea:	42ab      	cmp	r3, r5
  406aec:	f240 8087 	bls.w	406bfe <__udivmoddi4+0x2c6>
  406af0:	3902      	subs	r1, #2
  406af2:	443d      	add	r5, r7
  406af4:	1aeb      	subs	r3, r5, r3
  406af6:	fa1f f588 	uxth.w	r5, r8
  406afa:	fbb3 f0f2 	udiv	r0, r3, r2
  406afe:	fb02 3310 	mls	r3, r2, r0, r3
  406b02:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406b06:	fb00 f30c 	mul.w	r3, r0, ip
  406b0a:	42ab      	cmp	r3, r5
  406b0c:	d907      	bls.n	406b1e <__udivmoddi4+0x1e6>
  406b0e:	19ed      	adds	r5, r5, r7
  406b10:	f100 38ff 	add.w	r8, r0, #4294967295
  406b14:	d26f      	bcs.n	406bf6 <__udivmoddi4+0x2be>
  406b16:	42ab      	cmp	r3, r5
  406b18:	d96d      	bls.n	406bf6 <__udivmoddi4+0x2be>
  406b1a:	3802      	subs	r0, #2
  406b1c:	443d      	add	r5, r7
  406b1e:	1aeb      	subs	r3, r5, r3
  406b20:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  406b24:	e78f      	b.n	406a46 <__udivmoddi4+0x10e>
  406b26:	f1c1 0720 	rsb	r7, r1, #32
  406b2a:	fa22 f807 	lsr.w	r8, r2, r7
  406b2e:	408b      	lsls	r3, r1
  406b30:	fa05 f401 	lsl.w	r4, r5, r1
  406b34:	ea48 0303 	orr.w	r3, r8, r3
  406b38:	fa20 fe07 	lsr.w	lr, r0, r7
  406b3c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  406b40:	40fd      	lsrs	r5, r7
  406b42:	ea4e 0e04 	orr.w	lr, lr, r4
  406b46:	fbb5 f9fc 	udiv	r9, r5, ip
  406b4a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  406b4e:	fb0c 5519 	mls	r5, ip, r9, r5
  406b52:	fa1f f883 	uxth.w	r8, r3
  406b56:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  406b5a:	fb09 f408 	mul.w	r4, r9, r8
  406b5e:	42ac      	cmp	r4, r5
  406b60:	fa02 f201 	lsl.w	r2, r2, r1
  406b64:	fa00 fa01 	lsl.w	sl, r0, r1
  406b68:	d908      	bls.n	406b7c <__udivmoddi4+0x244>
  406b6a:	18ed      	adds	r5, r5, r3
  406b6c:	f109 30ff 	add.w	r0, r9, #4294967295
  406b70:	d243      	bcs.n	406bfa <__udivmoddi4+0x2c2>
  406b72:	42ac      	cmp	r4, r5
  406b74:	d941      	bls.n	406bfa <__udivmoddi4+0x2c2>
  406b76:	f1a9 0902 	sub.w	r9, r9, #2
  406b7a:	441d      	add	r5, r3
  406b7c:	1b2d      	subs	r5, r5, r4
  406b7e:	fa1f fe8e 	uxth.w	lr, lr
  406b82:	fbb5 f0fc 	udiv	r0, r5, ip
  406b86:	fb0c 5510 	mls	r5, ip, r0, r5
  406b8a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  406b8e:	fb00 f808 	mul.w	r8, r0, r8
  406b92:	45a0      	cmp	r8, r4
  406b94:	d907      	bls.n	406ba6 <__udivmoddi4+0x26e>
  406b96:	18e4      	adds	r4, r4, r3
  406b98:	f100 35ff 	add.w	r5, r0, #4294967295
  406b9c:	d229      	bcs.n	406bf2 <__udivmoddi4+0x2ba>
  406b9e:	45a0      	cmp	r8, r4
  406ba0:	d927      	bls.n	406bf2 <__udivmoddi4+0x2ba>
  406ba2:	3802      	subs	r0, #2
  406ba4:	441c      	add	r4, r3
  406ba6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  406baa:	eba4 0408 	sub.w	r4, r4, r8
  406bae:	fba0 8902 	umull	r8, r9, r0, r2
  406bb2:	454c      	cmp	r4, r9
  406bb4:	46c6      	mov	lr, r8
  406bb6:	464d      	mov	r5, r9
  406bb8:	d315      	bcc.n	406be6 <__udivmoddi4+0x2ae>
  406bba:	d012      	beq.n	406be2 <__udivmoddi4+0x2aa>
  406bbc:	b156      	cbz	r6, 406bd4 <__udivmoddi4+0x29c>
  406bbe:	ebba 030e 	subs.w	r3, sl, lr
  406bc2:	eb64 0405 	sbc.w	r4, r4, r5
  406bc6:	fa04 f707 	lsl.w	r7, r4, r7
  406bca:	40cb      	lsrs	r3, r1
  406bcc:	431f      	orrs	r7, r3
  406bce:	40cc      	lsrs	r4, r1
  406bd0:	6037      	str	r7, [r6, #0]
  406bd2:	6074      	str	r4, [r6, #4]
  406bd4:	2100      	movs	r1, #0
  406bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406bda:	4618      	mov	r0, r3
  406bdc:	e6f8      	b.n	4069d0 <__udivmoddi4+0x98>
  406bde:	4690      	mov	r8, r2
  406be0:	e6e0      	b.n	4069a4 <__udivmoddi4+0x6c>
  406be2:	45c2      	cmp	sl, r8
  406be4:	d2ea      	bcs.n	406bbc <__udivmoddi4+0x284>
  406be6:	ebb8 0e02 	subs.w	lr, r8, r2
  406bea:	eb69 0503 	sbc.w	r5, r9, r3
  406bee:	3801      	subs	r0, #1
  406bf0:	e7e4      	b.n	406bbc <__udivmoddi4+0x284>
  406bf2:	4628      	mov	r0, r5
  406bf4:	e7d7      	b.n	406ba6 <__udivmoddi4+0x26e>
  406bf6:	4640      	mov	r0, r8
  406bf8:	e791      	b.n	406b1e <__udivmoddi4+0x1e6>
  406bfa:	4681      	mov	r9, r0
  406bfc:	e7be      	b.n	406b7c <__udivmoddi4+0x244>
  406bfe:	4601      	mov	r1, r0
  406c00:	e778      	b.n	406af4 <__udivmoddi4+0x1bc>
  406c02:	3802      	subs	r0, #2
  406c04:	443c      	add	r4, r7
  406c06:	e745      	b.n	406a94 <__udivmoddi4+0x15c>
  406c08:	4608      	mov	r0, r1
  406c0a:	e708      	b.n	406a1e <__udivmoddi4+0xe6>
  406c0c:	f1a8 0802 	sub.w	r8, r8, #2
  406c10:	443d      	add	r5, r7
  406c12:	e72b      	b.n	406a6c <__udivmoddi4+0x134>

00406c14 <__aeabi_idiv0>:
  406c14:	4770      	bx	lr
  406c16:	bf00      	nop

00406c18 <CSWTCH.7>:
  406c18:	0100 0000 0300 0000 0200 0000 4449 454c     ............IDLE
  406c28:	0000 0000 6d54 5172 0000 0000 6d54 2072     ....TmrQ....Tmr 
  406c38:	7653 0063 6166 686c 2061 6d65 6320 6972     Svc.falha em cri
  406c48:	7261 6120 7120 6575 6575 7820 7551 7565     ar a queue xQueu
  406c58:	4165 4344 0a20 0000 6166 686c 2061 6d65     eADC ...falha em
  406c68:	6320 6972 7261 6120 7120 6575 6575 7820      criar a queue x
  406c78:	7551 7565 4d65 6165 206e 000a 4441 0043     QueueMean ..ADC.
  406c88:	6146 6c69 6465 7420 206f 7263 6165 6574     Failed to create
  406c98:	7420 7365 2074 4441 2043 6174 6b73 0a0d      test ADC task..
  406ca8:	0000 0000 7250 636f 0000 0000 6146 6c69     ....Proc....Fail
  406cb8:	6465 7420 206f 7263 6165 6574 7420 7365     ed to create tes
  406cc8:	2074 5250 434f 7420 7361 0d6b 000a 0000     t PROC task.....
  406cd8:	654d 6964 2061 6f6d 6576 3a6c 2520 2064     Media movel: %d 
  406ce8:	000a 0000 6954 656d 0072 0000 4441 3a43     ....Timer...ADC:
  406cf8:	614e 206f 6863 6765 756f 7520 206d 6f6e     Nao chegou um no
  406d08:	6f76 6420 6461 206f 6d65 3120 7320 6765     vo dado em 1 seg
  406d18:	6e75 6f64 000a 0000 7473 6361 206b 766f     undo....stack ov
  406d28:	7265 6c66 776f 2520 2078 7325 0a0d 0000     erflow %x %s....
  406d38:	6f6c 0067                                   log.

00406d3c <_global_impure_ptr>:
  406d3c:	0018 2040 3130 3332 3534 3736 3938 4241     ..@ 0123456789AB
  406d4c:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  406d5c:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  406d6c:	296c 0000                                   l)..

00406d70 <blanks.7217>:
  406d70:	2020 2020 2020 2020 2020 2020 2020 2020                     

00406d80 <zeroes.7218>:
  406d80:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  406d90:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......

00406da0 <_ctype_>:
  406da0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  406db0:	2020 2020 2020 2020 2020 2020 2020 2020                     
  406dc0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  406dd0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  406de0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  406df0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  406e00:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  406e10:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  406e20:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00406ea4 <_init>:
  406ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406ea6:	bf00      	nop
  406ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406eaa:	bc08      	pop	{r3}
  406eac:	469e      	mov	lr, r3
  406eae:	4770      	bx	lr

00406eb0 <__init_array_start>:
  406eb0:	00405579 	.word	0x00405579

00406eb4 <__frame_dummy_init_array_entry>:
  406eb4:	00400165                                e.@.

00406eb8 <_fini>:
  406eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406eba:	bf00      	nop
  406ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406ebe:	bc08      	pop	{r3}
  406ec0:	469e      	mov	lr, r3
  406ec2:	4770      	bx	lr

00406ec4 <__fini_array_start>:
  406ec4:	00400141 	.word	0x00400141
